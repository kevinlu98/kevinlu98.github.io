{"meta":{"title":"冷文聊编辑","subtitle":"","description":"冷文聊编辑【study.kevinlu98.cn】，分享B站教程中用到的课件及资料，用代码做点好玩的事件，让每一天都变的充实起来","author":"Mr丶冷文","url":"https://study.kevinlu98.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-01-13T15:26:22.444Z","updated":"2023-01-13T15:17:29.651Z","comments":false,"path":"/404.html","permalink":"https://study.kevinlu98.cn/404.html","excerpt":"","text":""},{"title":"关于我","date":"2023-01-14T05:48:23.850Z","updated":"2023-01-14T05:48:23.850Z","comments":false,"path":"about/index.html","permalink":"https://study.kevinlu98.cn/about/index.html","excerpt":"","text":"喜欢网站设计、coding，爱折腾，对新技术新事物充满好奇 1234567891011121314151617181920212223242526272829303132333435363738394041&#123; &quot;name&quot;: &quot;Mr丶冷文&quot;, &quot;age&quot;: 24, &quot;gender&quot;: &quot;男&quot;, &quot;profession&quot;: &quot;Golang Engineer &amp; Web Developer&quot;, &quot;address&quot;: &quot;陕西省 西安市&quot;, &quot;education&quot;: &quot;本科&quot;, &quot;experience&quot;: [ &#123; &quot;time&quot;: &quot;2016年9月 到 2020年7月&quot;, &quot;organization&quot;: &quot;西安理工大学&quot;, &quot;capacity&quot;: &quot;学生&quot; &#125;, &#123; &quot;time&quot;: &quot;2020年7月 到 2022年7月&quot;, &quot;organization&quot;: &quot;小米&quot;, &quot;capacity&quot;: &quot;软件开发工程师&quot; &#125;, &#123; &quot;time&quot;: &quot;2022年7月 到 2022年12月&quot;, &quot;organization&quot;: &quot;无&quot;, &quot;capacity&quot;: &quot;辞职待业&quot; &#125; , &#123; &quot;time&quot;: &quot;2022年12月 到 至今&quot;, &quot;organization&quot;: &quot;腾讯云&quot;, &quot;capacity&quot;: &quot;后台开发工程师&quot; &#125; ], &quot;blog&quot;: &quot;https://kevinlu98.cn&quot;, &quot;email&quot;: &quot;kevinlu98@qq.com&quot;, &quot;description&quot;: &quot;一个不折不扣热爱技术的小码农&quot;, &quot;skills&quot;: [ [&quot;Html&quot;, &quot;CSS&quot;, &quot;JS&quot;], [&quot;JQuery&quot;, &quot;Vue&quot;], [&quot;Java&quot;, &quot;PHP&quot;, &quot;Scala&quot;, &quot;Python&quot;], [&quot;Springboot&quot;, &quot;Springcloud&quot;, &quot;Hadoop&quot;, &quot;Spark&quot;, &quot;Flink&quot;], [&quot;Emlog&quot;, &quot;Typecho&quot;], [&quot;Linux&quot;, &quot;Mac&quot;] ]&#125;"},{"title":"书单","date":"2023-01-13T15:26:22.546Z","updated":"2023-01-13T15:17:29.652Z","comments":false,"path":"books/index.html","permalink":"https://study.kevinlu98.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-01-13T15:26:22.597Z","updated":"2023-01-13T15:17:29.652Z","comments":false,"path":"categories/index.html","permalink":"https://study.kevinlu98.cn/categories/index.html","excerpt":"","text":""},{"title":"留言","date":"2023-01-15T02:30:04.432Z","updated":"2023-01-15T02:30:04.432Z","comments":true,"path":"feedback/index.html","permalink":"https://study.kevinlu98.cn/feedback/index.html","excerpt":"","text":"来都来了，留个脚印再走吧 友链申请：https://study.kevinlu98.cn/links/ 访问主站:：https://kevinlu98.cn freewind主题：https://kevinlu98.cn/archives/27.html"},{"title":"友情链接","date":"2023-01-13T15:26:22.643Z","updated":"2023-01-13T15:17:29.652Z","comments":true,"path":"links/index.html","permalink":"https://study.kevinlu98.cn/links/index.html","excerpt":"","text":""},{"title":"Github仓库","date":"2023-01-13T17:06:09.787Z","updated":"2023-01-13T17:06:09.787Z","comments":false,"path":"repository/index.html","permalink":"https://study.kevinlu98.cn/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-01-13T15:26:22.750Z","updated":"2023-01-13T15:17:29.653Z","comments":false,"path":"tags/index.html","permalink":"https://study.kevinlu98.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"(四)vim文本编辑器","slug":"linux/4.vim文本编辑器","date":"2023-01-16T03:03:00.000Z","updated":"2023-01-28T10:11:50.778Z","comments":true,"path":"2023/01/16/wen-ben-bian-ji-qi.html","link":"","permalink":"https://study.kevinlu98.cn/2023/01/16/wen-ben-bian-ji-qi.html","excerpt":"","text":"前言在上节课讲文件描述符的时候应该是有提到过在Linux中一切皆文件，包括鼠标、键盘、网卡等这些硬件在内，所以我们在使用Linux操作系统中需要频繁的修改文件 ，这节课就带大家学习一下Linux中非常重要的文本编辑器vim Vim与ViVivi是所有Linux系统都会内建的文本编辑器，他不像我们在windows的记事本那样打开一个图形窗口来进行编辑，而是在shell窗口中对文本进行编辑，不过现在很少有人会使用vi编辑器了，都是用它的替代器vim Vimvim 是从 vi 发展出来的一个文本编辑器，兼容 vi 的所有指令，不仅能编辑文本，而且还有代码补全、编译及错误跳转等方便编程的功能特别丰富，现在基本一些 主流的Linux操作系统上都内置了vim，我们可以看看vim官网对其的描述 Vim的工作模式在使用vim编辑器时，共有3种工作模式，分别是底线命令模式、命令模式和编辑模式，这3种工作模式可以随意切换 Vim的命令模式在使用vim编辑文件时，默认所处的模式就是命令模式，可使用方向键(上、下、左、右)移动光标位置，也可以对其进行复制、粘贴、删除、替换、撤销等操作，接下来我们具体看看怎么使用命令模式 光标移动这个表格中的字母是区分大小写的 输入 含义 [n] + h 或 向左箭头键(←) 光标向左移动n个字符，这里n为任意数字，可以省略，省略时默认为1 [n] + j 或 向下箭头键(↓) 光标向下移动n个字符，这里n为任意数字，可以省略，省略时默认为1 [n] + k 或 向上箭头键(↑) 光标向上移动n个字符，这里n为任意数字，可以省略，省略时默认为1 [n] + l(小写L) 或 向右箭头键(→) 光标向右移动n个字符，这里n为任意数字，可以省略，省略时默认为1 Ctrl+f 屏幕向下移动一页 Ctrl+b 屏幕向上移动一页 Ctrl+d 屏幕向下移动半页 Ctrl+u 屏幕向上移动半页 + 光标移动到下一行的非空格字符 - 光标移动到上一行的非空格字符 [n] + 空格键 光标会向后移动 n 个字符，这里n为任意数字，可以省略，省略时默认为1，这里与右键是有区别的，当移动到这行最后时会自动换行 0 数字0，移动到行首 $ 移动到行尾 H 光标移动到这个屏幕的最上方那一行的第一个字符(非文件第1行) M 光标移动到这个屏幕的中央那一行的第一个字符 L 光标移动到这个屏幕的最下方那一行的第一个字符 G 移动到这个文件的最后一行 [n] + G 移动到这个文件的第 n 行，这里n为任意数字 gg 移动到这个文件的第一行，相当于 1G [n] + 回车键 光标向下移动 n 行，这里n为任意数字，可以省略，省略时默认为1，这里与下键是有区别的，下键不会回到行首 [n] + w&#x2F;W 光标移动至下n个单词的单词首，这里n为任意数字，可以省略，省略时默认为1 [n] + b&#x2F;B 光标移动至前n个单词的单词首，这里n为任意数字，可以省略，省略时默认为1 [n] + e&#x2F;E 光标移动至后n个单词的单词尾，这里n为任意数字，可以省略，省略时默认为1 搜索 输入 含义 &#x2F; + [word] 向光标之下寻找一个为 word 的字符串，这里的word为任意字符串，通常配合n和N使用 ? + [word] 向光标之下寻找一上为 word 的字符串，这里的word为任意字符串 n 重复前一个搜寻的动作 N 反向重复前一个搜寻的动作 复制&#x2F;粘贴&#x2F;撤销&#x2F;删除&#x2F;其它 输入 含义 [n] + x 在一行字当中向后删除n个字符，包含光标 [n] + X 在一行字当中向前删除n个字符 [n] + dd 剪切光标所在的向下 n 行，包含光标 d1G 剪切光标所在到第一行的所有数据，包含光标 dG 剪切光标所在到最后一行的所有数据，包含光标 d$ 剪切游标所在处到行尾的所有字符，包含光标 d0 剪切游标所在处到行首的所有字符 d + [n] +w 在一行中向后删除n个单词，包含光标，这里n为任意数字，省略默认为1 [n] + yy 向后复制n行，包含光标所在行，这里n为任意数字，省略默认这1 y1G 复制光标所在到第一行的所有数据，包含光标 yG 复制光标所在到最后一行的所有数据，包含光标 y$ 复制游标所在处到行尾的所有字符，包含光标 Y0 复制游标所在处到行首的所有字符 Y + [n] +w 在一行中向后复制n个单词，包含光标，这里n为任意数字，省略默认为1 p 将已复制的数据在光标下一行贴上 P 将已复制的数据在光标上一行贴上 J 将光标所在行与下一行的数据结合成同一行 u 复原前一个动作(撤销) &gt;&gt; 选中行向右缩进 &lt;&lt; 选中行向左缩进 可视块上面只是在移动光标的位置，当我们想要选择一块内容时可以用可视块功能进行选择，方便我们对选中区域做批量操作 输入 含义 v(小写) 字符可视化，以字符为单位进行选择 V(大写) 行可视化，以行为单位进行选择 Ctrl+v 块可视化，以块为单位进行选择，类似于在vscode中用鼠标中键进行选择 在使用可视块选中后可以使用如下输入进行批量编辑 输入 含义 d 删除选中部分文本 D 删除选中行，与d不同的是即使某行没有完全被选中，删除时也会被删除 y 将选中部分复制到剪贴板 p(小写) 将剪贴板中的内容粘贴到光标之后 P(大写) 将剪贴板中的内容粘贴到光标之前。 u(小写) 将选中部分中的大写字符全部改为小写字符。 U(大写) 将选中部分中的小写字符全部改为大写字符。 &gt; 将选中部分右移（缩进）一个 tab 键 &lt; 将选中部分左移一个 tab 键 Vim的编辑模式在命令模式下输入如下可以进入编辑模式，进入输入模式后大家正常输入就可以了，大家在输入时可以按Ctrl+n/p 根据历史输入和系统库文件进行输入提示，也可以按ESC退回到命令模式 输入 含义 i 从光标处进入输入模式 I(这是一个大写i) 目前所在行的第一个非空格符进入输入模式 a 从光标下一个字符进入 输入模式 A 目前所在行的行尾进入输入模式 o 从光标所在行的下一行进入输入模式 O 从光标所在行的上一行进入输入模式 r 进入替换模式，替换光标所在字符，只会进行一次替换 R 进入替换模式，会一直替换光标所在 字符，替换后光标后移，直到按ESC键退出替换模式 Vim底线命令模式一般情况下可以通过命令模式下按:进入 指令行模式，如果我们在编辑模式，可以先 输入 含义 :w 将编辑的数据写保存 :w! 若文件为只读时强制保存，但能不能执行成功与用户对文件的权限有关 :q 退出vim :q! 如果修改过文件又不想保存，可以使用!强制退出 :wq 保存并退出 :wq! 强制保存并退出 :x 保存并退出 :[n1],[n2] w filename 保存n1到n2行的内容到filename中，n1，n2为行号范围，如果n1，n2省略则默认到1行到最后一行，类似于另存为 :! command 暂时离开vim去执行command命令 :%s&#x2F;word1&#x2F;word2&#x2F;g[c] 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2，加上c为在每次替换时需要用户确认 :n1,n2s&#x2F;word1&#x2F;word2&#x2F;g[c] 从第n1行到n2行寻找 word1 字符串，并将该字符串取代为 word2，n1，n2为行号，加上c为在每次替换时需要用户确认 Vim设置这里列几个常用的，可以在命令模式下输入进行该次临时生效 输入 含义 set nu 显示行号 set nonu 取消行号显示 syntax on&#x2F;off 开启&#x2F;关闭高亮 set tabstop&#x3D;4 设置tab的缩进为4格 set shiftwidth&#x3D;4 设置移动命令的缩进为4格 如果想入设置生效则可以编辑/etc.vimrc文件，该文件对系统所有用户生效，如果只想改变当前用户的vim设置，可以在用户家目录下创建.vimrc文件进行设置 Vim键盘图这张图是网上流传比较广的一张图，出自www.viemu.com，当然另一位大佬cenalulu的博客上也有进阶版大家感兴趣可以去看看史上最全Vim快捷键键位图 – 入门到进阶 Vim批量注释我们将/etc/profile考到桌面进行练习 1cp /etc/profile ~/ 指令行模式注释我们使用vim打开刚刚考过来的profile文件，使用指令行进行替换 在每行行首加上# 1:%s/^/#/g 取消每行行首的# 1:%s/^#//g 在每行行首加上//进行注释 1:%s/^/\\/\\//g 取消每行行首的// 1:%s/^\\/\\//g 在1到10行行首加上#注释 1:1,10s/^/#/g 替换文中pathmunge为linux 1:%s/pathmunge/linux/g 撤销所有操作 可视块批量注释 使用可视块以块为区域进行选择Ctrl+v第5到第10行行首 按I(大写i)进行行首插入 插入一个#加一个空格 按ESC退出编辑即可生效 小结这节课没有讲什么命令，主要就是vim编辑器的使用，以后我们编辑文件就不用再依赖图形窗口进行编辑了 但这个vim的指令和快捷键太多了，这个只能大家自己在使用时慢慢用，慢慢的就熟悉了","categories":[{"name":"Linux菜鸟入门","slug":"Linux菜鸟入门","permalink":"https://study.kevinlu98.cn/categories/Linux%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://study.kevinlu98.cn/tags/linux/"},{"name":"vim","slug":"vim","permalink":"https://study.kevinlu98.cn/tags/vim/"}]},{"title":"(三)重定向与管道","slug":"linux/3.重定向与管道","date":"2023-01-15T02:39:00.000Z","updated":"2023-01-22T04:31:56.774Z","comments":true,"path":"2023/01/15/zhong-ding-xiang-yu-guan-dao.html","link":"","permalink":"https://study.kevinlu98.cn/2023/01/15/zhong-ding-xiang-yu-guan-dao.html","excerpt":"","text":"前言不知道大家上节课那些命令掌握的怎么样，这些命令一定要自己亲自去敲一遍才能加深印象，不用死记硬背，用的次数多了自然就记住了 本节用到的命令wc命令wc命令，全称是word count，并不是你们想的那样，主要用于计算文件的字节数、单词数、或是列数 1wc [options] [name...] 参数 含义 -c 字节数 -l 行数 -w 单词数(这里的单词是英文意义上的，以空白隔开) sort命令sort命令，顾名思义就是用于排序的命令，主要可针对文本文件的内容，以行为单位来排序 1sort [options] name 参数 含义 -b 忽略每行前面开始出的空格字符 -f 忽略大小写 -t split 指定排序时所用的栏位分隔字符，split为分隔字符 -n 依照数值的大小排序 -r 以相反的顺序来排序 -k field1 [fieldN…] 按指定的列进行排序，field为列 -o output 将排序后的结果存入指定的文件，output为文件名 举例说明： 创建一个score.txt文件内容如下，假设是学生的成绩 1234567xiaomi 60laowang 78zhangsan 90Lisi 56wangwu 89Zhaoliu 100tianqi 30 按学生名字顺序输出 1sort -f score.txt 按学生成绩倒序输出 1sort -nrk2 score.txt grep命令为了方便我们后面的演示，这里学一个比较重要的命令grep，它与sed及awk被称为Linux文本处理三剑客，后面会详细介绍另外两个 grep命令能够在一个或多个文件中，搜索某一特定的字符模式（也就是正则表达式），此模式可以是单一的字符、字符串、单词或句子 正则表达式：描述一组字符串的一个模式，正则表达式的构成模仿了数学表达式，通过使用操作符将较小的表达式组合成一个新的表达式，这个学过一些编程语言的朋友们应该或多或少都有了解，这里就只做简单说明，如果感兴趣可以看看菜鸟教程里的相关介绍：正则表达式 - 教程 通配符 含义 * 将匹配 0 个（即空白）或多个字符前面出现的字符 . 将匹配任何一个字符，且只能是一个字符 [abc] 匹配方括号中的任意一个字符，括号内为做任意数量的任意字符 [^abc] 匹配除方括号中字符外的所有字符，括号内为做任意数量的任意字符 ^ 以后面的字符开头 $ 以前面的字符结尾 1grep [options] keyword name... #keyword为正则表达式，name为文件名 参数 含义 -c 仅列出文件中包含keyword的行数 -i 忽略模式中的字母大小写 -l 列出带有匹配行的文件名 -n 在每一行的最前面列出行号 -v 列出没有匹配模式的行 -r 递归查找 我们以/etc/passwd文件为例对该命令做一个简单的认识 例1：查找文件中包含me的行 1grep &#x27;me&#x27; /etc/passwd 例2：在上述的的基础上输出行号 1grep -n &#x27;me&#x27; /etc/passwd 例3：列出共有多少行以s开头n结尾的行数 1grep -c &#x27;^s.*n$&#x27; /etc/passwd 例4：列出&#x2F;etc目录下以s开头n结尾的文件及行号，并忽略错误输出 1grep -nr &#x27;^s.*n$&#x27; /etc/* 2&gt;/dev/null 重定向基本概念介绍在Liunx shell中，重定向为意思为改变标准输入输出的方向，重定向分为两种，输入重定向和输出重定向，这么说可能有些抽象，先看一些概念 什么是输入输出方向 输入方向：数据从哪里流向程序 输出方向：数据从程序流向哪里 什么是标准的输入入输出方向 标准输入方向：数据默认的输入方向为从键盘流向程序 标准输出方向：数据默认的输出方向为从程序流向显示器 什么是输入输出重定向 输入重定向：改变了数据的标准输入方向，即数据从其它地方流入程序 输出重定向：改变了数据的标准输出方向，即数据从程序流入其它地方 看完这些概念大家是不是已经蒙了，这个没关系，后面会有例子帮大家理清这些的 文件描述符在Linux中，一切皆文件，包括标准输入设备（键盘）和标准输出设备（显示器）在内的所有计算机硬件都是文件，为了区分这些打开的文件，Linux会为每个文件有一个整数做标识，这个整数就被称为文件描述符（File Descriptor），相当于一个非负的文件索引，我们可以通过文件描述符操作相应的文件 在LLinux进程中，会默认打开三个文件描述符 文件描述符 文件名 类型 硬件 0 &#x2F;dev&#x2F;stdin 标准输入文件 键盘 1 &#x2F;dev&#x2F;stdout 标准输出文件 显示器 2 &#x2F;dev&#x2F;stderr 标准错误输出文件 显示器 一般来说，我们打开文件后占用一个文件描述符，由于0、1、2已被标准文件描述符占用，他就可以往后找一个没有被占用的文件描述符来占用 大家知道有这么个东西就行了，这个用的不多，就知道我上面例出的三个的意思就行，如果大家想要深入了解这块内容，大家可以看看CSDN上的这篇帖子彻底弄懂 Linux 下的文件描述符（fd） 输出重定向输出重定向是指命令的结果不再输出到显示器上，而是输出到如文件中。这样做的最大好处就是把程序的输出结果保存起来，当我们需要的时候可以随时查询 在Linux中有如下的输出重定向符号 命令 说明 command &gt;file 以覆盖的方式，把 command 的正确输出结果输出到 file 文件中 command &gt;&gt;file 以追加的方式，把 command 的正确输出结果输出到 file 文件中 command n&gt;file 以覆盖的方式，把文件描述符为 n 的文件重定向到 file文件中 command n&gt;&gt;file 以追加的方式，把文件描述符为 n 的文件重定向到 file文件中 command &gt;file n&gt;&amp;m 以覆盖的方式，把文件描述符为n与文件描述符为m的输出合并到file文件中 当描述符为1时可以不写，默认就是1 例1：标准输出把&#x2F;etc下的文件详情输出到桌面的demo1.txt中 12ls -l /etc 1&gt; ~/Desktop/demo1.txtls -l /etc &gt; ~/Desktop/demo1.txt 例2：错误输出把错误输出重定向到桌面的err.txt中 命令正确执行是没有错误信息的，我们必须刻意地让命令执行出错 1ls abcd.aaa 2&gt;err.txt 例3：综合练习执行下面的程序完成相关操作 在桌面创建名为output.sh的文件，内容如下： 123456789#!/bin/bashwhile :do username=`cat /proc/sys/kernel/random/uuid | md5sum |cut -c 1-9` path=`cat /proc/sys/kernel/random/uuid | md5sum |cut -c 1-9` echo `date` &quot;user [$username] view file: $path&quot; ls $path sleep 1done 在桌面执行如下命令： 1chmod +x output.sh 运行文件可以查看效果 将正常输出保留在屏幕，错误输出到桌面的err.log的文件中 1./output.sh 2&gt;err.log 将错误输出保留在屏幕，正常输出到out.log的文件中 1./output.sh 1&gt;out.log 将错误输出到err.log文件中，正常输出到out.log的文件中 1./output.sh 1&gt;out.log 2&gt;err.log 将错误输出与正常输出合并输出到application.log文件中 1./output.sh &gt;application.log 2&gt;&amp;1 # 把标准输出重定向到application.log的文件中，然后把错误输出合并到标准输出中 &#x2F;dev&#x2F;null 文件上节课我们讲过，/dev目录是存在设备的特殊目录，这个目录下有个null设备，即为一个空白设备，有时我们不想把信息输出到屏幕，也不想输出到文件，就可以重定向到此，断续以上面的程序举例 1./output.sh &gt;/dev/null 2&gt;&amp;1 输入重定向与输出重定向类似，输入重定向是改变输入的方向，不再使用键盘作为命令输入的来源，而是使用文件 在Linux中有如下的输入重定向符号 命令 说明 command &lt;file 将 file 文件中的内容作为 command 的输入 command &lt;&lt;END 从标准输入（键盘）中读取数据，直到遇见分界符 END 才停止（分界符可以是任意的字符串，用户自己定义，常见的有EOF：end of file） 例1：统计标准输入的信息我们可以把标准输入作为wc命令的输入来计统计我们从键盘字符的信息 123456wc &lt;&lt;EOF123456hello worldi amd lengwenkevinlu98.cnEOF 例2：将用户的输入输出到文件我们希望将我们的输入直接输出到文件中，这样可以方便快捷的创建文件 12345cat &lt;&lt;EOF&gt;file.txthelloi amd lengwenmy site is kevinlu98.cnEOF 管道Linux除了有上面的输入输出重定向，还有一种功能，就是可以将两个或者多个命令（程序或者进程）连接到一起，把一个命令的输出作为下一个命令的输入，以这种方式连接的两个或者多个命令就形成了管道（pipeline） Linux 管道使用竖线|连接多个命令，这被称为管道符 12command1 | command2command1 | command2 [|commandN...] 当在两个命令之间设置管道时，管道符|左边命令的输出就变成了右边命令的输入。只要第一个命令向标准输出写入，而第二个命令是从标准输入读取，那么这两个命令就可以形成一个管道，这里需要注意，command2 必须可以处理 command1 的输出结果 管道也是一种文件，管道中的读数据是一次性操作，数据一旦被读，它就从管道中被抛弃 例1：查找文件是否在目录内查找passwd是否在&#x2F;etc目录下 1ls /etc/ | grep &#x27;passwd&#x27; 列出当前目录下.bashrc的详细信息 1ls -a | grep &#x27;passwd&#x27; 例2：按文件大小顺序输出我们先列出文件的详细信息，文件的大小在第5列，然后用数值方式对其逆向输出 1ls -l | sort -nrk5 小结这节课我们主要讲了重定向及管道，这两个都是改变文件的输出，不同的是重定向是连接命令的输出与文件，而管道是连接命令与命令的，这两个知识点在日常工作中用到的频率还是非常高的，希望大家可以好好理解一下，自己多动手写一写，想一些需求自己做一做","categories":[{"name":"Linux菜鸟入门","slug":"Linux菜鸟入门","permalink":"https://study.kevinlu98.cn/categories/Linux%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://study.kevinlu98.cn/tags/linux/"},{"name":"centos","slug":"centos","permalink":"https://study.kevinlu98.cn/tags/centos/"},{"name":"重定向","slug":"重定向","permalink":"https://study.kevinlu98.cn/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"},{"name":"管道","slug":"管道","permalink":"https://study.kevinlu98.cn/tags/%E7%AE%A1%E9%81%93/"},{"name":"grep","slug":"grep","permalink":"https://study.kevinlu98.cn/tags/grep/"}]},{"title":"(二)认识Linux文件系统及相关命令","slug":"linux/2.认识Linux文件系统及相关命令","date":"2023-01-14T18:51:00.000Z","updated":"2023-01-17T11:52:39.410Z","comments":true,"path":"2023/01/15/ren-shi-wen-jian-xi-tong-ji-xiang-guan-ming-ling.html","link":"","permalink":"https://study.kevinlu98.cn/2023/01/15/ren-shi-wen-jian-xi-tong-ji-xiang-guan-ming-ling.html","excerpt":"","text":"前言上节课到现在已经过了好久了，因为上个月才入职新单位，转了下技术栈，一直在学golang及k8s那些东西，所以就没有更新视频，所幸到现在基本已经能参与到项目团队的项目开发中了，就继续给大家录教程 我发现之前录的教程太乱了，第一课的安装倒无所谓，但第二节的命令讲的太乱了，我希望这个文档可以在大家学完之后查看什么资料直接翻文档就能很快的找到，所以第二节就录新录制下 文档位置之前文档一直在我博客放着，本来我的博客只是写写文章，偶尔发一些技术帖，加上这些教程的文档后难免显的有些乱了，我专门用hexo搭建了一个静态站点用于放课件，大家如果感兴趣了也可以网上搜搜，比较简单，站点地址：study.kevinlu98.cn Linux文件结构在Linux中，文件系统是一棵树，/为其根结点，形状大致如下： 常见的二级目录 &#x2F;bin：存放二进制可执行命令目录 &#x2F;home：用户主目录的基点目录，默认情况每个用户主目录都设在该目录下，如默认：用户user01的主目录是&#x2F;home&#x2F;user01，可用~&#x2F;user01表示 &#x2F;lib：存放标准程序设计库目录，又叫动态链接共享库目录，目录中文件类似windows里的后缀名为dll的文件 &#x2F;etc：存放系统管理和配置文件目录 &#x2F;dev：存放设备特殊文件目录，如声卡文件，磁盘文件等 &#x2F;usr：最庞大的目录，存放应用程序和文件目录 &#x2F;proc：虚拟目录，是系统内存的映射，可直接访问这个目录来获取系统信息 &#x2F;root：系统管理员的主目录（特权阶级） &#x2F;var：存放系统产生的经常变化文件的目录，例如打印机、邮件等假脱机目录、日志文件、格式化后的手册页以及一些应用程序的数据文件等 &#x2F;tmp：存放公用临时文件目录 &#x2F;sbin 系统管理命令，这里存放的是系统管理员使用的管理程序 &#x2F;mnt 系统提供这个目录是让用户临时挂载其他的文件系统 &#x2F;lost+found 这个目录平时是空的，用于存放系统非正常关机而留下未保存的文件 Linux文件路径(重要) 路径相关的概念： .：代表当前目录 ..：代表父级目录 /：linux中文件分隔或根目录 ~：当前用户的家目录 绝对路径：从根(&#x2F;)一直到目标文件的路径 相对路径：相对于当前文件的父目录的路径 大家可以做个类比，以我们现在生活中的地址为例 这个大家第一次听可能有些陌生，这点不用担心，根据我的教程来，大家会在使用Linux过程中不知不觉的把这个知识撑握 Linux行提示符我们右键打开终端，可以看到如下的行提示符 1[lengwen@localhost ~]$ 名称 含义 lengwen 表示当前打开shell的用户 @ 分隔符 localhost 主机名 ~ 当前据目录(在Linux中~可以快捷的代替当前用户的家目录) $ 身份提示符(# 表示超级用户；$ 表示普通用户) 认识命令命令的执行 命令必须在行提示符之后输入 命令格式：命令 参数名 参数值 Ctrl + C：撤销命名的执行 命令参数 -参数：单词缩写 –参数：单词的全拼 命令的帮助–help通常情况下，我们在linux中可以使用命令名称 --help来查看一个命令的帮助信息，当然也有些开发着没有为命令写对应的帮助信息，但我们用到的系统命令都是有很标准的命令，都是有帮助信息的 123name --help# 例vim --help 帮助文档中的一些符号解释 符号 含义 [ ] 选择加入的内容，可加可不加 … 加入的内容个数任意 man命令linux下的man命令是一个帮助命令，掌握这个命令可以让我们更好的学习linux，通过man指令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。 12man [name]man vim 文件目录相关命令这节课在给大家讲一些常用的命令，主要是让大家对linux命令有个大概的认识，我整理的这些命令的参数并不是所有的，只是些最常用的参数，但日常使用是绝对够了；大家也可以输出命令名 --help或man 命令可来查看其它参数，但这些大部分情况下都用不到 pwd命令pwd命令：全称Print Working Directory，也就是打印目前所在目录，这里是以全绝对路径打印 1pwd cd命令cd命令：全称是Change Directory，用于改变当前所在目录 1cd [path] ls命令ls命令：全称list directory contents，显示文件的文件名与相关属性。（目前工作目录所含之文件及子目录） 1ls [-options] [name...] 参数 含义 -a all， 显示所有文件及目录 (. 开头的隐藏文件也会列出) -A 同-a ，但不列出 . (目前目录) 及 .. (父目录) -l 以长格式显示目录下的内容列表，包括文件的权限、链接数、所有者名称和组所有者、文件大小、最后修改日期时间和文件&#x2F;目录名称 -d 仅列出目录本身，而不是列出目录内的文件数据 -R 若目录下有文件，则以下之文件亦皆依序列出 有时候我们可以看到别人用ll命令，这个的输出等同于ls -l touch命令touch命令用于修改文件或者目录的时间属性，包括访问时间和修改时间，若文件不存在，系统会建立一个新的文件 1touch [options] name... 参数 含义 -a 若文件存在时只修改访问时间为当前时间 -d 使用指定字符串表示时间而非当前时间 -m 若文件存在时只修改更新时间为当前时间 不过我们用这个命令基本都不会操作文件的这些时间，都是用它创建一个空文件 mkdir命令mkdir：全称make directory，用于创建一个新的目录 1mkdir [options] name... 参数 含义 -p 帮助你直接将所需要的目录(包含上一级目录)递归创建起来！ cp命令cp命令：全称copy，命令主要用于复制文件或目录。 1234# source 可以使用通配符*，如*.txt，aa*等cp [options] source dest #source与dest要么都文件，要么都目录cp [options] source... directory # source... 一个或多个文件 参数 含义 -f force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i 与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖 -r 若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。 rm命令rm命令：全称remove，用于移除文件或目录 1rm [options] name... #这里的name可以是文件，也可以是目录 参数 含义 -f 就是 force 的意思，也不会出现警告信息 -i 互动模式，在删除前会询问使用者是否动作 -r 递归删除，会删除目标目录及目录下的文件及子目录及子目录下的文件… mv命令mv命令：全称move，主要用于移动文件与目录，或修改名称，对这里的移动解释一下，如果源文件(目录)与目标(目录)在同一块磁盘，则命令只是做了一个重命名的操作，反之则先复制再删除 12mv [options] source dest #source与dest要么都文件，要么都目录mv [options] source... directory # 将所有source移动到directory目录下 参数 含义 -f force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i 与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖 cat命令cat命令：由第一行开始显示文件内容 1cat [options] name... 参数 含义 -b 列出行号，仅针对非空白行做行号显示，空白行不标行号 -E 将结尾的断行字节 $ 显示出来 -n 列印出行号，连同空白行也会有行号，与 -b 的选项不同 less命令less命令：一页一页的查看文件 1less name less这里没有常用参数，但在less运行时有一些按键大家在知道 按键 作用 空格 向下翻动一页 b 向上翻动一页 pagedown 向下翻动一页 pageup 向上翻动一页 &#x2F;字串 向下搜寻『字串』的功能 ?字串 向上搜寻『字串』的功能 n 重复前一个搜寻 N 反向的重复前一个搜寻 q 关闭 less head命令head命令：取出文件前面几行 1head [options] name... 参数 含义 -n 后面接数字，代表显示几行的意思 tail命令tail命令：取出文件后面几行，该命令有一个重要的功能就是可以观察打到文件中的日志 1tail [options] name... 参数 含义 -n 后面接数字，代表显示几行的意思 -f 表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测 shell中的一些快捷键 快捷键 作用 Tab 在系统中table键可以自动补齐存在的命令，文件名称和某些命令的参数 上下 历史的上一条命令，下一条命令 左右 一个字符一个字符移动 Ctrl + a 光标移动到行首 Ctrl + e 光标移动到行尾 Ctrl + u 光标所在位置删除到行首 Ctrl + k 光标所在位置删除到行尾 Ctrl + c 撤销以输入的命令 Ctrl + d 退出当前用户环境 Ctrl + L 清空屏幕 Ctrl + Shift + c 复制 Ctrl + Shift + v 粘贴 Ctrl + shift + t 在现有shell中重新打开一个table Ctrl + shift + n 在shell中打 Ctrl + r + 关键字 调出最近一条含有关键字的命令 小结这节我们学习了一些Linux上常用的文件目录操作的命令，最后又给大家说了些快捷键，这些都是很基础的东西，在后续教程中会频繁的使用，大家学完一定多多练习，自己动手多写几遍感受一下比看我教程好几遍更有用","categories":[{"name":"Linux菜鸟入门","slug":"Linux菜鸟入门","permalink":"https://study.kevinlu98.cn/categories/Linux%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://study.kevinlu98.cn/tags/linux/"},{"name":"基础命令","slug":"基础命令","permalink":"https://study.kevinlu98.cn/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"}]},{"title":"(一)Linux 系列教程介绍","slug":"linux/1.Linux系列教程介绍","date":"2023-01-13T14:23:00.000Z","updated":"2023-01-17T11:51:09.210Z","comments":true,"path":"2023/01/13/xi-lie-jiao-cheng-jie-shao.html","link":"","permalink":"https://study.kevinlu98.cn/2023/01/13/xi-lie-jiao-cheng-jie-shao.html","excerpt":"","text":"前言录这套教程主要帮助那些对Linux了解很少但又想做一个初步学习的小伙伴，因为我们一般在找开发相关的工作面试时偶尔也会被问到，而且做为一名开发人员如果不会操作Linux操作系统确实也有些说不过去，因为一般我们在企业中用到的中间件、服务的部署等都是在Linux上，本期教程就带着大家来入门下Linux，学习了Linux操作后大家如果以后用Mac系统也会用起来得心应手 准备工作 CentOS下载： 清华大学镜像站 阿里巴巴镜像站 VMware下载：https://customerconnect.vmware.com/cn/downloads/#all_products Mac下载VMware Fusion Windows下载 VMware Workstation Pro 创建一个CentOS虚拟机Mac上的操作 点击新建选择从光盘或映像中安装 选择我们的iso文件 一直点击继续直到结束 根据自己需要选择磁盘大小和内存大小及CPU 启动虚拟机 Windows上的操作 创建虚拟机 点击文件 -&gt; 新建虚拟机 选择典型，点击下一步 选择镜像文件点击下一步 选择安装位置点击下一步 根据需要调整磁盘大小 根据需要调整其它硬件 安装虚拟机 选择安装CentOS 选择语言并点击继续 选择安装盘 选择目标磁盘并点击done 选择安装项 由于我们是亲手，所以可以装一个图形桌面来方便我们学习和操作，选择GNOME 桌面，然后点击Done 设置完成之后就可以点击继续安装了 在安装过程中设置root密码及我们个人的账户，等待安装完成 初次启动 点击协议 点击同意然后点击Done 点击完成 输入密码进入系统后会有弹窗，不用管，一直点击Next 语言设置 点击关机按钮-&gt;设置图标 点击区域和语言 全部选择汉语 点击重启 重启后这里非常重要，一定选保留旧名称","categories":[{"name":"Linux菜鸟入门","slug":"Linux菜鸟入门","permalink":"https://study.kevinlu98.cn/categories/Linux%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://study.kevinlu98.cn/tags/linux/"},{"name":"vmware","slug":"vmware","permalink":"https://study.kevinlu98.cn/tags/vmware/"},{"name":"centos","slug":"centos","permalink":"https://study.kevinlu98.cn/tags/centos/"}]},{"title":"(二十三)登录功能及打包","slug":"springbootblog/25.登录功能及打包","date":"2022-10-09T18:21:00.000Z","updated":"2023-01-17T11:51:09.221Z","comments":true,"path":"2022/10/10/deng-lu-gong-neng-ji-da-bao.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/10/deng-lu-gong-neng-ji-da-bao.html","excerpt":"","text":"说明上节课原计划是把登录也说了的，由于时间不够了，就把登录拿到这节课说，然后把之前遗留的小问题处理一下，最后再说说打包的功能 异步修改我们之前做的异步实际是没有生效的，因为我们需要spring帮我们把这个类代理出来才行，我们在同一个类中就没有任作用，因为没有经过spring的代理 我们将两个发邮件的方法复制到MailHelper中或将@Async的注解加到sendMail方法就可以啦 在Application上加上@EnableAsync注解 登录功能我们的后台是不希望被除了我们之外的其他人访问到的，所以我们需要对后台所有的请求进行登录拦截，对于在没有登录的前提下所有操作都跳转到登录页 我们先定义登录页面的路由并修改页面表单 我们再写登录接口，如果用户名与密码都与我们配置的用户名密码相等我们就认为登录成功将登录成功的状态存在Session中，反之则返回登录页面且给其报用户名或密码错误的信息，密码加密我们可以直接用Spring的 DigestUtils.md5DigestAsHex方法 1234567891011121314151617181920212223@PostMapping(&quot;/login&quot;)public String login(String username, String password, Model model, HttpSession session) &#123; String pass = DigestUtils.md5DigestAsHex(password.getBytes(StandardCharsets.UTF_8)); if (StringUtils.equals(username, webSite.getUsername()) &amp;&amp; StringUtils.equals(pass, webSite.getPassword())) &#123; session.setAttribute(WebSite.LOGIN_SIGN, true); return &quot;redirect:/admin/&quot;; &#125; else &#123; model.addAttribute(&quot;errorMsg&quot;, &quot;用户名密码错误&quot;); return &quot;admin/login&quot;; &#125;&#125;@GetMapping(&quot;/logout&quot;)public String logout(HttpSession session) &#123; session.removeAttribute(WebSite.LOGIN_SIGN); return &quot;admin/login&quot;;&#125;@GetMapping(&quot;/login.html&quot;)public String login() &#123; return &quot;admin/login&quot;;&#125; 在页面回显错误信息 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!doctype html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/font-awesome/css/font-awesome.min.css&quot;&gt; &lt;!-- 自定义css文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/admin/css/login.css&quot;&gt; &lt;style&gt; .lw-error-msg &#123; color: coral; text-align: center; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;lw-login-page&quot;&gt; &lt;div class=&quot;lw-login-box&quot;&gt; &lt;div class=&quot;lw-left&quot;&gt; &lt;h1&gt;欢迎登录&lt;/h1&gt; &lt;p&gt;冷文学习者-管理后台&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;lw-right&quot;&gt; &lt;div class=&quot;lw-error-msg&quot; th:text=&quot;$&#123;errorMsg&#125;&quot; th:if=&quot;$&#123;errorMsg != null&#125;&quot;&gt;&lt;/div&gt; &lt;form th:action=&quot;@&#123;/admin/login&#125;&quot; method=&quot;post&quot;&gt; &lt;div class=&quot;lw-input&quot;&gt; &lt;input name=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;用户名&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-input&quot;&gt; &lt;input name=&quot;password&quot; readonly onfocus=&quot;this.removeAttribute(&#x27;readonly&#x27;)&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-input&quot;&gt; &lt;button type=&quot;submit&quot;&gt;登录后台&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;p&gt;Copyright © www.kevinlu98.cn All Rights Reserved. &lt;br&gt; 冷文学习者版权所有&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 定义一个拦截器实现HandlerInterceptor接口并覆写preHandle的方法，当Session中没有登录信息时我们直接转发到登录页面并给出请登录后再进行操作的提示 12345678910111213141516171819202122232425262728293031323334package cn.kevinlu98.intercepto;import cn.kevinlu98.common.WebSite;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.Objects;/** * Author: Mr丶冷文 * Date: 2022/10/16 11:07 * Email: kevinlu98@qq.com * Description: */@Componentpublic class LoginInterceptor implements HandlerInterceptor &#123; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; HttpSession session = request.getSession(); Boolean sign = (Boolean) session.getAttribute(WebSite.LOGIN_SIGN); if (Objects.nonNull(sign) &amp;&amp; sign) &#123; // 已登录 return true; &#125; else &#123; request.setAttribute(&quot;errorMsg&quot;, &quot;请登录后进行操作&quot;); request.getRequestDispatcher(&quot;/admin/login.html&quot;).forward(request, response); return false; &#125; &#125;&#125; 定义一个退出登录的路由，操作为清空Session中的登录信息 在WebConfig中的addInterceptors方法中启用拦截器，用addPathPatterns配置拦截的路由，用excludePathPatterns配置排除被拦截路由中的那些路由 12345678@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123; registry.addInterceptor(loginInterceptor) .addPathPatterns(&quot;/admin/**&quot;) .excludePathPatterns(&quot;/admin/login&quot;) .excludePathPatterns(&quot;/admin/login.html&quot;) .excludePathPatterns(&quot;/admin/logout&quot;);&#125; 打包和运行因为我们站点很多信息都存在于application.yml的配置文件中，我们打完包之后application.yml都会打进jar包中，如果我们想更改一下站点信息，我们还需要去改application.yml并重新打包，这样的话就难免有些不太友好，我们这里可以在启动时手动指定加载外部的yml文件 我们可以打完包手动将项目的application.yml复制到外部 我们可以利用打包插件自动将application.yml文件复制到外部 12345678910111213141516171819202122232425262728&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-resources&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-resources&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;*.properties&lt;/include&gt; &lt;include&gt;*.yml&lt;/include&gt; &lt;include&gt;*/*.properties&lt;/include&gt; &lt;include&gt;*/*.yml&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;&lt;/outputDirectory&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 启动时使用--spring.config.local=xxx.yml来启动我们的项目","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"异常处理","slug":"异常处理","permalink":"https://study.kevinlu98.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"}]},{"title":"(二十二)后台其它功能的实现","slug":"springbootblog/24.后台其它功能的实现","date":"2022-10-08T18:21:00.000Z","updated":"2023-01-17T11:51:09.221Z","comments":true,"path":"2022/10/09/hou-tai-qi-ta-gong-neng-de-shi-xian.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/09/hou-tai-qi-ta-gong-neng-de-shi-xian.html","excerpt":"","text":"说明前台功能我们已经完全完成了，我们现在来看看后台剩下的内容：控制台、评论管理及登录功能，这节课完了的博客项目就完了，下节课给大家说说我们的项目怎么部署到线上服务器 评论管理 我们先来改造下页面，给左边加上一键已读的按钮，给右边加上评论过滤条件：全部、已读、未读的按钮 123456789&lt;div class=&quot;btn-group&quot; role=&quot;group&quot; style=&quot;margin-bottom: 20px;&quot; aria-label=&quot;...&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;lw-add-btn&quot; class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 新增&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;lw-read-all&quot; class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 一键已读&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;btn-group&quot; role=&quot;group&quot; style=&quot;margin-bottom: 20px;float: right&quot; aria-label=&quot;...&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;全部&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;已读&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;未读&lt;/button&gt;&lt;/div&gt; 一键已读功能开发 123456789101112131415//Mapper@Modifying@Transactional@Query(&quot;update Comment set view = true where view = false &quot;)void readAll();//Servicepublic void readAll() &#123; mapper.readAll();&#125;//Controller@GetMapping(&quot;/read&quot;)public Result&lt;String&gt; read() &#123; service.readAll(); return Result.success();&#125; 12345678910111213141516$(&#x27;#lw-read-all&#x27;).on(&#x27;click&#x27;, function () &#123; console.log(111); $.ajax(&#123; url: &#x27;/admin/comment/read&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;保存成功&quot;, &#123;icon: 1, time: 500&#125;, function () &#123; $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;)&#125;) 给BSTable表格一个双击事件，参考传送门，点击表格时将表格变为一个textarea，内容为评论内容，然后在这个textarea失去焦点时调用更新接口来进行更新操作 12345678910111213141516171819202122232425onDblClickCell: function (field, value, row, $element) &#123; let comment = $(`#data-table .lw-comment-content`); comment.parent().html(comment.val()) if (field === &#x27;content&#x27;) &#123; $element.html(`&lt;textarea class=&quot;form-control lw-comment-content&quot;&gt;$&#123;value&#125;&lt;/textarea&gt;`) $(&#x27;.lw-comment-content&#x27;).blur(function () &#123; let data = &#123;id: row.id, content: $(this).val()&#125; $.ajax(&#123; url: &#x27;/admin/comment/&#x27;, method: &#x27;post&#x27;, data: data, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;保存成功&quot;, &#123;icon: 1, time: 500&#125;, function () &#123; $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) &#125;) &#125;&#125;, 完成后端更新接口的开发，更新时直接利用非空拷贝 1234567891011121314151617181920public void save(Comment comment) &#123; //新评论 if (Objects.isNull(comment.getId())) &#123; sendMailToWebsite(comment.getArticle().getId()); comment.setCreated(new Date()); comment.setView(false); if (comment.getPid() != 0) &#123; sendMailToComment(comment.getArticle().getId(), comment.getPid(), comment.getContent()); Comment parent = detail(comment.getPid()); comment.setContent(&quot;@&quot; + parent.getNickname() + &quot;: &quot; + comment.getContent()); comment.setPid(findParent(comment.getPid())); &#125; mapper.save(comment); &#125; else &#123; Comment one = detail(comment.getId()); UpdateUtil.copyNullProperties(comment, one); mapper.save(one); &#125;&#125; 将表格的修改按钮改为回复按钮，点击后给其一个弹出回复框输入我们的回复内容调用回复接口，这里可以直接用Layer 12345678910111213141516171819202122232425$(&quot;#data-table&quot;).on(&#x27;click&#x27;, &#x27;.lw-update-btn&#x27;, function () &#123; // 获取目标资源id let id = $(this).data(&#x27;id&#x27;) let aid = $(this).data(&#x27;aid&#x27;) layer.prompt(&#123;title: &#x27;回复&#x27;, formType: 2&#125;, function (text, index) &#123; layer.close(index); $.ajax(&#123; url: &#x27;/admin/comment/&#x27; + id, method: &#x27;post&#x27;, data: &#123; aid: aid, message: text &#125;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;回复成功&quot;, &#123;icon: 1&#125;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) &#125;);&#125;) 完成后端回复接口的开发 123456@PostMapping(&quot;/&#123;pid&#125;&quot;)public Result&lt;String&gt; replay(@PathVariable Integer pid, Integer aid, String message) &#123; Comment comment = Comment.builder().article(Article.builder().id(aid).build()).email(webSite.getMail()).nickname(webSite.getNickname()).content(message).pid(pid).url(webSite.getUrl()).build(); service.save(comment); return Result.success();&#125; 将页面改为分页 12345678910111213141516171819//MapperPage&lt;Comment&gt; findAllByView(Boolean view, Pageable pageable);//Servicepublic PageHelper&lt;Comment&gt; list(Boolean view, int pn, int ps) &#123; Pageable pageable = PageRequest.of(pn - 1, ps, Sort.by(Sort.Direction.DESC, &quot;created&quot;)); Page&lt;Comment&gt; page = Objects.isNull(view) ? mapper.findAll(pageable) : mapper.findAllByView(view, pageable); return PageHelper.&lt;Comment&gt;builder() .rows(page.getContent()) .total(page.getTotalElements()) .build();&#125;//Controller@GetMapping(&quot;/&quot;)public Result&lt;PageHelper&lt;Comment&gt;&gt; list(@RequestParam(required = false) Boolean view, @RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, @RequestParam(required = false, defaultValue = &quot;1&quot;) Integer ps) &#123; pn = Math.max(1, pn); ps = Math.max(1, ps); return Result.success(service.list(view, pn, ps));&#125; 123456789101112131415161718192021222324$(&#x27;#lw-comment-search button&#x27;).on(&#x27;click&#x27;,function () &#123; $(&#x27;#lw-comment-search .btn-primary&#x27;).removeClass(&#x27;btn-primary&#x27;).addClass(&#x27;btn-default&#x27;) $(this).removeClass(&#x27;btn-default&#x27;).addClass(&#x27;btn-primary&#x27;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;)&#125;)$(&#x27;#data-table&#x27;).bootstrapTable(&#123; url: &#x27;/admin/comment/&#x27;, pagination: true, pageNumber: 1, sidePagination: &#x27;server&#x27;, pageSize: 10, pageList: [10, 20, 40], responseHandler: function (res) &#123; return res.data &#125;, queryParams: function (params) &#123; return &#123; pn: (params.offset / params.limit) + 1, ps: params.limit, view: $(&#x27;#lw-comment-search .btn-primary&#x27;).data(&#x27;view&#x27;) &#125; &#125;&#125;) 控制台这里没什么好说的，页面上需要什么内容我们查什么内容就可以了，然后在未读评论这里我们给一个参数标识一下我们要查未读评论，然后在评论管理的路由里解析一下这个参数就行了 12345678910@GetMapping(&quot;/&quot;)public String index(Model model) &#123; model.addAttribute(&quot;category&quot;, categoryService.count()); model.addAttribute(&quot;comment&quot;, commentService.count(null)); model.addAttribute(&quot;commentFalse&quot;, commentService.count(false)); model.addAttribute(&quot;article&quot;, articleService.count()); model.addAttribute(&quot;newArticleList&quot;, articleService.search(ArticleSearch.builder().type(Article.TYPE_ARTICLE).pageNum(1).pageSize(5).build()).getRows()); model.addAttribute(&quot;newCommentList&quot;, commentService.list(null, 1, 5).getRows()); return &quot;admin/index&quot;;&#125; 12345678910111213141516171819202122232425262728293031&lt;div class=&quot;jumbotron&quot;&gt; &lt;h3&gt;网站概要&lt;/h3&gt;&lt;p&gt;目前有 &lt;i th:text=&quot;$&#123;article&#125;&quot;&gt;&lt;/i&gt; 篇文章, 并有 &lt;i th:text=&quot;$&#123;comment&#125;&quot;&gt;&lt;/i&gt; 条关于你的评论在 &lt;ith:text=&quot;$&#123;category&#125;&quot;&gt;&lt;/i&gt; 个分类中.&lt;/p&gt; &lt;p&gt;其中有 &lt;i th:text=&quot;$&#123;commentFalse&#125;&quot;&gt;&lt;/i&gt;条 评论未查看:&lt;/p&gt; &lt;p&gt;&lt;a class=&quot;btn btn-primary btn-lg&quot; th:href=&quot;@&#123;/admin/comment.html(view=false)&#125;&quot; role=&quot;button&quot;&gt;点此查看&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-6&quot;&gt; &lt;ul class=&quot;list-group&quot;&gt; &lt;li class=&quot;list-group-item disabled&quot;&gt; &lt;b&gt;最新文章&lt;/b&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot; th:each=&quot;post:$&#123;newArticleList&#125;&quot;&gt; &lt;span class=&quot;badge&quot; th:text=&quot;$&#123;#dates.format(post.created,&#x27;MM-dd&#x27;)&#125;&quot;&gt;09-28&lt;/span&gt;&lt;a target=&quot;_blank&quot; th:href=&quot;@&#123;/&#123;id&#125;.html(id=$&#123;post.id&#125;)&#125;&quot; th:text=&quot;$&#123;post.title&#125;&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt; &lt;ul class=&quot;list-group&quot;&gt; &lt;li class=&quot;list-group-item disabled&quot;&gt; &lt;b&gt;最新评论&lt;/b&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot; th:each=&quot;comm:$&#123;newCommentList&#125;&quot;&gt; &lt;span class=&quot;badge&quot; th:text=&quot;$&#123;#dates.format(comm.created,&#x27;MM-dd&#x27;)&#125;&quot;&gt;09-29&lt;/span&gt;&lt;th:block th:text=&quot;$&#123;comm.content&#125;&quot;&gt;&lt;/th:block&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"异常处理","slug":"异常处理","permalink":"https://study.kevinlu98.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"}]},{"title":"(二十一)统一异常拦截及自定义错误跳转","slug":"springbootblog/23.统一异常拦截及自定义错误跳转","date":"2022-10-08T17:22:00.000Z","updated":"2023-01-17T11:51:09.220Z","comments":true,"path":"2022/10/09/tong-yi-yi-chang-lan-jie-ji-zi-ding-yi-cuo-wu-tiao-zhuan.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/09/tong-yi-yi-chang-lan-jie-ji-zi-ding-yi-cuo-wu-tiao-zhuan.html","excerpt":"","text":"说明我们博客前台的功能现在已经算是做完了，我们这个时候来把异常这里说下，我们之前在写后端时捕获过一次异常，但我们直接返回了一个json，这样明显是不合理的，因我们我们的路由有些是页面，有些是json，我们只需要在接口返回值是json的时候才返回json，其它情况我们希望返回页面 定义异常页面我们在定义异常页面时可以先将error.html重命名为fail.html，因为Thymeleaf在解析模板出错时会自动跳转到error.html 我们定义一个枚举为ErrorCode，来存放我们的HTTP状态码和对应的信息 123456789101112131415161718192021package cn.kevinlu98.enums;import lombok.AllArgsConstructor;import lombok.Getter;/** * Author: Mr丶冷文 * Date: 2022/10/15 19:40 * Email: kevinlu98@qq.com * Description: */@Getter@AllArgsConstructorpublic enum ErrorCodeEnum &#123; ERROR_404(404,&quot;对不起，你请求的页面暂时未找到.&lt;br&gt;它或许已经被迁移至其它页面啦.&quot;), ERROR_500(500,&quot;您好，服务器暂时出发问题，请稍候访问.&lt;br&gt;或您也可以尝试联系站长.&quot;), ; private final int code; private final String msg;&#125; 然后定义404和500的路由 1234567891011@GetMapping(&quot;/error/404&quot;)public String error404(Model model) &#123; model.addAttribute(&quot;error&quot;, ErrorCodeEnum.ERROR_404); return &quot;fail&quot;;&#125;@GetMapping(&quot;/error/500&quot;)public String error500(Model model) &#123; model.addAttribute(&quot;error&quot;, ErrorCodeEnum.ERROR_500); return &quot;fail&quot;;&#125; 错误页面配置重要：大家先要明白一件事件，就是我们的错误页面配置是根据HTTP请求返回的状态码决定的，这个与统一异常处理不一样 我们在config里面给Spring容器一个类型为WebServerFactoryCustomizer泛型为ConfigurableWebServerFactory的bean 在这个bean里我们去调用addErrorPages的方法指定HTTP状态对应的路由 1234@Beanpublic WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; webServerFactoryCustomizer() &#123; return factory -&gt; factory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, &quot;/error/404&quot;), new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, &quot;/error/500&quot;));&#125; 统一异常改造我们之前已经做过了统一异常处理，但这个处理是非常不科学的，它不论什么样的情况都会返回一个json，这让用户在访问我们的网站时的交互就显得不是那么友好，因为用户访问的只会是前台页面 我们可以在发生异常时判断一个请求的后缀，因为当时我们在开发项目定义路由时我们所有页面的返回都是以.html结尾的，那我们就可以认为只要是以.html结尾的请求都是页面，这个时候我们就可以返回到错误页面，反之我们返回一个json 这个时候我们又有问题了，我们返回页面和返回json的返回值不同，我们应该怎么处理呢？那我们可以直接让返回值为void，不让springboot帮我们返回，我们自己利用Servlet的接口进行返回就可以了 1234567891011@ExceptionHandler(Exception.class)public void defaultException(Exception e, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; e.printStackTrace(); log.error(e.getMessage(), e); if (request.getRequestURI().endsWith(&quot;.html&quot;)) &#123; request.getRequestDispatcher(&quot;/error/500.html&quot;).forward(request, response); &#125; else &#123; response.setCharacterEncoding(&quot;utf-8&quot;); response.getWriter().print(new ObjectMapper().writeValueAsString(Result.error())); &#125;&#125; 自定义异常我们可以看到当我们访问一个不存在的文章时由于错误码是500，此时会被我们配置的错误页面拦截，但按照逻辑来讲这个时候应该是一个文章不存在，在业务上属于404，我们可以自定义一个异常，然后在统一异常里面捕获这个异常，给其重定向到404页面 123456@ExceptionHandler(LWNotFindException.class)public String notFindException(LWNotFindException e) &#123; e.printStackTrace(); log.error(e.getMessage(), e); return &quot;forward:/error/404.html&quot;;&#125;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"异常处理","slug":"异常处理","permalink":"https://study.kevinlu98.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"}]},{"title":"(二十)评论回复功能及邮件提醒","slug":"springbootblog/22.评论回复功能及邮件提醒","date":"2022-10-08T17:21:00.000Z","updated":"2023-01-17T11:51:09.220Z","comments":true,"path":"2022/10/09/ping-lun-hui-fu-gong-neng-ji-you-jian-ti-xing.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/09/ping-lun-hui-fu-gong-neng-ji-you-jian-ti-xing.html","excerpt":"","text":"说明上节课我们完成了最基本的评论功能及展示，这节课我们来说下评论回复功能、收到评论后的给站长及被评论者的邮件通知功能 回复功能 给每个评论加上data-id的属性存储评论的id 123456789101112131415161718192021222324252627282930&lt;li class=&quot;lw-posr&quot; th:each=&quot;comment:$&#123;commentPage.rows&#125;&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img th:src=&quot;$&#123;@defaultImage.avatar(comment.email)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt; &lt;b th:text=&quot;$&#123;comment.nickname&#125;&quot;&gt;&lt;/b&gt; &lt;span th:text=&quot;$&#123;#dates.format(comment.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/span&gt; &lt;a th:data-id=&quot;$&#123;comment.id&#125;&quot; href=&quot;javascript:void(0)&quot; class=&quot;lw-comment-replay&quot;&gt;回复&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-comment-cancel&quot; style=&quot;display: none&quot;&gt;取消回复&lt;/a&gt; &lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot; th:text=&quot;$&#123;comment.content&#125;&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;ul&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=1518228633&amp;s=100&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;VOODOO&lt;/b&gt; &lt;span&gt;2022-09-28 19:53&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; @xpboy &lt;br&gt; 谢谢&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; 当我们点击回复按钮时将评论框移到目标评论的下方，然后清空评论框的内容并将评论框的pid改为目标评论的id 12345678910111213141516$(&#x27;#lw-comment-list&#x27;).on(&#x27;click&#x27;, &#x27;.lw-comment-replay&#x27;, function () &#123; $(&#x27;#lw-comment-list .lw-comment-cancel&#x27;).hide() $(&#x27;#lw-comment-list .lw-comment-replay&#x27;).show() let id = $(this).data(&#x27;id&#x27;); let source = $(&#x27;#lw-comment-box&#x27;) // 复制一个评论框 let cloneBox = source.clone(); //删除源评论框 source.remove() //将复制的评论框加到目标评论的下方 $(this).parent().parent().append(source) //更改pid $(&#x27;#lw-comment-form input[name=pid]&#x27;).val(id) $(this).hide() $(this).parent().find(&#x27;.lw-comment-cancel&#x27;).show()&#125;) 评论完成后将评论框移加原来的位置并将评论框的pid变为0且评论内容清空 12345678910111213function commBoxReset()&#123; let source = $(&#x27;#lw-comment-box&#x27;) let cloneBox = source.clone(); source.remove() $(&#x27;#lw-article-box&#x27;).after(source) $(&#x27;#lw-comment-form input[name=pid]&#x27;).val(0) $(&#x27;#lw-comment-form textarea&#x27;).val(&#x27;&#x27;) $(&#x27;#lw-comment-list .lw-comment-cancel&#x27;).hide() $(&#x27;#lw-comment-list .lw-comment-replay&#x27;).show()&#125;$(&#x27;#lw-comment-list&#x27;).on(&#x27;click&#x27;, &#x27;.lw-comment-cancel&#x27;, function () &#123; commBoxReset()&#125;) 后端处理评论层级关系 12345678910111213141516171819202122232425//MapperPage&lt;Comment&gt; findAllByArticleAndPidOrderByCreatedDesc(Article article, Integer pid, Pageable pageable);List&lt;Comment&gt; findAllByPidOrderByCreatedDesc(Integer pid);//Servicepublic void save(Comment comment) &#123; //新评论 if (Objects.isNull(comment.getId())) &#123; comment.setCreated(new Date()); comment.setView(false); if (comment.getPid() != 0) &#123; Comment parent = detail(comment.getPid()); comment.setContent(&quot;@&quot;+parent.getNickname()+&quot;: &quot;+comment.getContent()); comment.setPid(findParent(comment.getPid())); &#125; &#125; mapper.save(comment);&#125;private Integer findParent(Integer id) &#123; Comment comment = detail(id); if (comment.getPid() == 0) &#123; return comment.getId(); &#125; return findParent(comment.getPid());&#125; 修改分页查询评论Service层的代码为其加上子评论列表 123456PageHelper.&lt;Comment&gt;builder() .rows(page.getContent().stream().peek(x -&gt; x.setChildren(mapper.findAllByPidOrderByCreatedDesc(x.getId()))).collect(Collectors.toList())) .current(pageNum) .total(page.getTotalElements()) .totalPage(page.getTotalPages()) .build(); 页面子评论处理 123456789101112131415161718192021222324252627282930313233343536&lt;ul&gt; &lt;li class=&quot;lw-posr&quot; th:each=&quot;comment:$&#123;commentPage.rows&#125;&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img th:src=&quot;$&#123;@defaultImage.avatar(comment.email)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt; &lt;b th:text=&quot;$&#123;comment.nickname&#125;&quot;&gt;&lt;/b&gt; &lt;span th:text=&quot;$&#123;#dates.format(comment.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/span&gt; &lt;a th:data-id=&quot;$&#123;comment.id&#125;&quot; href=&quot;javascript:void(0)&quot; class=&quot;lw-comment-replay&quot;&gt;回复&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-comment-cancel&quot; style=&quot;display: none&quot;&gt;取消回复&lt;/a&gt; &lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot; th:text=&quot;$&#123;comment.content&#125;&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;ul th:if=&quot;$&#123;comment.children.size() &gt; 0&#125;&quot;&gt; &lt;li class=&quot;lw-posr&quot; th:each=&quot;child:$&#123;comment.children&#125;&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img th:src=&quot;$&#123;@defaultImage.avatar(child.email)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt; &lt;b th:text=&quot;$&#123;child.nickname&#125;&quot;&gt;&lt;/b&gt; &lt;span th:text=&quot;$&#123;#dates.format(child.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/span&gt; &lt;a th:data-id=&quot;$&#123;child.id&#125;&quot; href=&quot;javascript:void(0)&quot; class=&quot;lw-comment-replay&quot;&gt;回复&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-comment-cancel&quot; style=&quot;display: none&quot;&gt;取消回复&lt;/a&gt; &lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot; th:text=&quot;$&#123;child.content&#125;&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 邮件提醒准备工作我这里以QQ邮箱为例，其它邮箱同理 我们先准备一个QQ邮箱且开通时长大于15天 开启POP3/IMAP/SMTP/服务并生成授权码 常见SMTP服务器地址 邮箱类型 SMTP服务器地址 端口号 QQ邮箱 smtp.qq.com 465或587 sina邮箱 smtp.sina.cn 465或587 126邮箱 smtp.126.com 465或994 aliyun邮箱 smtp.aliyun.com 465或994 163邮箱 smtp.163.com 465或994 yeah邮箱 smtp.yeah.net 465或994 SpringBootMail邮件测试 导入依赖 12345&lt;!-- springboot 邮件mail --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 配置发件人 123456789101112131415spring: mail: # 默认的邮件编码为UTF-8 default-encoding: UTF-8 # 邮箱服务器 host: smtp.qq.com # 邮箱 username: xxx@qq.com # 密码 password: xxxxx # 端口 port: 587 # 其它属性，这里只开启debug输出错误信息 properties: debug: true 创建一个邮件工具类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package cn.kevinlu98.common;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Component;import javax.mail.MessagingException;import javax.mail.internet.MimeMessage;import java.util.Date;/** * Author: Mr丶冷文 * Date: 2022/10/14 19:44 * Email: kevinlu98@qq.com * Description: */@Slf4j@Componentpublic class MailHelper &#123; @Value(&quot;$&#123;spring.mail.username&#125;&quot;) private String from; private final JavaMailSender javaMailSender; public MailHelper(JavaMailSender javaMailSender) &#123; this.javaMailSender = javaMailSender; &#125; /** * 发送邮件 * * @param send 收件人 * @param subject 主题 * @param text 内容 */ public void sendMail(String send, String subject, String text) &#123; MimeMessage message = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message); try &#123; helper.setSentDate(new Date()); //设置发件时间 helper.setFrom(from); //发件人 helper.setTo(send); //设置收件人 helper.setSubject(subject); //设置标签 helper.setText(text, true); //设置内容 javaMailSender.send(message); //发邮件 &#125; catch (MessagingException e) &#123; log.error(e.getMessage(), e); &#125; &#125;&#125; 测试是否发送成功 123456789101112131415161718192021222324252627package cn.kevinlu98.test;import cn.kevinlu98.Application;import cn.kevinlu98.common.MailHelper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;/** * Author: Mr丶冷文 * Date: 2022/10/14 19:49 * Email: kevinlu98@qq.com * Description: */@RunWith(SpringRunner.class)@SpringBootTest(classes = &#123;Application.class&#125;, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class MailTest &#123; @Autowired private MailHelper helper; @Test public void testSend()&#123; helper.sendMail(&quot;xxx@qq.com&quot;,&quot;测试邮件&quot;,&quot;&lt;h1&gt;冷文学习者&lt;/h1&gt;&lt;p&gt;我是一个测试邮件&lt;/p&gt;&quot;); &#125;&#125; 评论邮件提醒 在保存新评论时先给站长收一封邮件通知 12345678@Asyncpublic void sendMailToWebsite(Integer id) &#123; Article article = articleMapper.findById(id).orElse(null); if (Objects.isNull(article)) return; String content = &quot;&lt;p&gt;\\n&quot; + &quot; 你的文章 &lt;a href=\\&quot;&quot; + webSite.getUrl() + &quot;/&quot; + id + &quot;.html\\&quot;&gt;&quot; + article.getTitle() + &quot;&lt;/a&gt;收到了新评论，点些查看\\n&quot; + &quot;&lt;/p&gt;\\n&quot; + &quot;&lt;p style=\\&quot;text-align:right ;\\&quot;&gt;\\n&quot; + &quot;时间：\\n&quot; + new Date() + &quot;&lt;/p&gt;&quot;; helper.sendMail(webSite.getMail(), webSite.getTitle() + &quot;收到新评论&quot;, content);&#125; 如果父评论不为空，则给被回复者也发一封邮件 12345678910111213141516171819202122232425@Asyncpublic void sendMailToComment(Integer id, Integer cid, String replay) &#123; Article article = articleMapper.findById(id).orElse(null); if (Objects.isNull(article)) return; Comment comment = mapper.findById(cid).orElse(null); if (Objects.isNull(comment)) return; String content = &quot;&lt;p&gt;\\n&quot; + &quot; 你在&lt;a href=\\&quot;&quot; + webSite.getUrl() + &quot;\\&quot;&gt;&quot; + webSite.getTitle() + &quot;&lt;/a&gt;对 &lt;a href=\\&quot;&quot; + webSite.getUrl() + &quot;/&quot; + article.getId() + &quot;.html\\&quot;&gt;&quot; + article.getTitle() + &quot;&lt;/a&gt;文章的评论收到了新回复，回复内容如下：\\n&quot; + &quot;&lt;/p&gt;\\n&quot; + &quot;&lt;p&gt;\\n&quot; + replay + &quot;&lt;/p&gt;\\n&quot; + &quot;&lt;p style=\\&quot;text-align:right ;\\&quot;&gt;\\n&quot; + &quot; 一一发件人：&quot; + webSite.getTitle() + &quot;&lt;/p&gt;\\n&quot; + &quot;&lt;p style=\\&quot;text-align:right ;\\&quot;&gt;\\n&quot; + &quot;时间：&quot; + new Date() + &quot;&lt;/p&gt;\\n&quot; + &quot;&lt;p style=\\&quot;text-align:right ;\\&quot;&gt;\\n&quot; + &quot; 此邮件是由&quot; + webSite.getTitle() + &quot;自动发送，请勿回复 \\n&quot; + &quot; &lt;/p&gt;&quot;; helper.sendMail(comment.getEmail(), webSite.getTitle() + &quot;收到新回复&quot;, content);&#125; 12345678910111213141516//Service savepublic void save(Comment comment) &#123; //新评论 if (Objects.isNull(comment.getId())) &#123; sendMailToWebsite(comment.getArticle().getId()); comment.setCreated(new Date()); comment.setView(false); if (comment.getPid() != 0) &#123; sendMailToComment(comment.getArticle().getId(), comment.getPid(), comment.getContent()); Comment parent = detail(comment.getPid()); comment.setContent(&quot;@&quot; + parent.getNickname() + &quot;: &quot; + comment.getContent()); comment.setPid(findParent(comment.getPid())); &#125; &#125; mapper.save(comment);&#125;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十九)评论功能及评论局部刷展示","slug":"springbootblog/21.评论功能及评论局部刷展示","date":"2022-10-08T16:21:00.000Z","updated":"2023-01-17T11:51:09.219Z","comments":true,"path":"2022/10/09/ping-lun-gong-neng-ji-ping-lun-ju-bu-shua-zhan-shi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/09/ping-lun-gong-neng-ji-ping-lun-ju-bu-shua-zhan-shi.html","excerpt":"","text":"说明经过前面的学习，我们博客的功能是越来越完善了，这节课我们来说下评论功能的实现 我们希望我们的评论完成之后页面不进行刷，只刷新评论部分，然后评论的翻页也是如此 普通评论实现 定义评论接口 路由：/comment 方式：POST 参数：Comment对象 返回：公共返回对象 1234567891011121314151617181920//Service @PostMapping(&quot;/comment&quot;)public void save(Comment comment) &#123; //新评论 if (Objects.isNull(comment.getId())) &#123; comment.setCreated(new Date()); comment.setView(false); &#125; mapper.save(comment);&#125;//Controller@PostMapping(&quot;/comment&quot;)@ResponseBodypublic Result&lt;String&gt; comment(Comment comment) &#123; if (StringUtils.equals(comment.getEmail(), webSite.getMail())) &#123; return Result.error(ResultEnum.RESULT_MAIL_FAIL); &#125; commentService.save(comment); return Result.success();&#125; 完善评论表单的name属性 12345678910111213141516171819202122&lt;form id=&quot;lw-comment-form&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;article.id&quot; th:value=&quot;$&#123;article.id&#125;&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;pid&quot; value=&quot;0&quot;&gt; &lt;div class=&quot;col-md-12 lw-p0&quot; style=&quot;padding-right: 10px;&quot;&gt; &lt;textarea required name=&quot;content&quot; placeholder=&quot;请输入你的评论...&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-xs-12 lw-comment-input lw-posr&quot;&gt; &lt;input name=&quot;nickname&quot; required type=&quot;text&quot; placeholder=&quot;请输入昵称...&quot;&gt; &lt;i class=&quot;fa fa-user lw-comment-input lw-posa&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-xs-12 lw-comment-input lw-posr&quot;&gt; &lt;input name=&quot;email&quot; required type=&quot;email&quot; placeholder=&quot;请输入电子邮件...&quot;&gt; &lt;i class=&quot;fa fa-envelope lw-posa&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-xs-12 lw-comment-input lw-posr&quot;&gt; &lt;input name=&quot;url&quot; type=&quot;url&quot; placeholder=&quot;请输入主页地址...&quot;&gt; &lt;i class=&quot;fa fa-link fa-link lw-posa&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12 col-xs-12 lw-comment-input lw-posr&quot; style=&quot;text-align: right&quot;&gt; &lt;button class=&quot;lw-comment-submit&quot; type=&quot;submit&quot;&gt;提交按钮&lt;/button&gt; &lt;/div&gt;&lt;/form&gt; 拦截表单提交改为Ajax提交表单 123456789101112131415161718$(&#x27;#lw-comment-form&#x27;).on(&#x27;submit&#x27;, function () &#123; let data = $(this).serialize(); $.ajax(&#123; url: &#x27;/comment&#x27;, method: &#x27;POST&#x27;, data: data, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&#x27;评论成功&#x27;, &#123;icon: 1&#125;) // todo 局部刷新评论列表 &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) return false;&#125;) 局部刷新展示我们其实可以写个获取评论列表的接口返回一个JSON数据，然后前端把这个JSON拼接到一段HTML代码再展示出来，这过这样太麻烦了，我们可以直接利用Thymeleaf返回一个fragment，然后得用Jquery的load方法将其加载到对应容器中 在获取文章详情时也获取文章下的第一页评论 1234567891011121314151617181920212223242526//MapperPage&lt;Comment&gt; findAllByArticleOrderByCreatedDesc(Article article, Pageable pageable);//Servicepublic PageHelper&lt;Comment&gt; list(Integer id, int pageNum) &#123; Page&lt;Comment&gt; page = mapper.findAllByArticleOrderByCreatedDesc(Article.builder().id(id).build(), PageRequest.of(pageNum - 1, 5)); return PageHelper.&lt;Comment&gt;builder() .rows(page.getContent()) .current(pageNum) .total(page.getTotalElements()) .totalPage(page.getTotalPages()) .build();&#125;//Controller@GetMapping(&quot;/&#123;id&#125;.html&quot;)public String detail(@PathVariable Integer id, Model model, HttpServletRequest request, HttpServletResponse response) &#123; Article article = articleService.detail(id); if (Objects.isNull(CookieUtil.getCookie(request, Article.VIEW_PREFIX + id))) &#123; articleService.viewArticle(id); CookieUtil.setCookie(response, Article.VIEW_PREFIX + id, &quot;true&quot;); &#125; //todo 当文章不存在时的处理 model.addAttribute(&quot;article&quot;, article); PageHelper&lt;Comment&gt; commentPage = commentService.list(id, 1); model.addAttribute(&quot;commentPage&quot;, commentPage); return &quot;detail&quot;;&#125; 如果评论是QQ邮箱，我们直接取QQ头像(https://q1.qlogo.cn/g?b=qq&nk=1628048198&s=100)做为评论者的头像，反之随机头像 123456789public String avatar(String mail) &#123; Pattern pattern = Pattern.compile(&quot;(\\\\d&#123;5,10&#125;)@qq.com&quot;); Matcher matcher = pattern.matcher(mail); if (matcher.find()) &#123; String qq = matcher.group(1); return String.format(&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=%s&amp;s=100&quot;, qq); &#125; return avatars.get((int) (Math.random() * avatars.size()));&#125; 将页面的评论列表改为fragment并做渲染 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;div id=&quot;lw-comment-list&quot;&gt; &lt;th:block th:fragment=&quot;comments&quot;&gt; &lt;div class=&quot;lw-comment-list&quot;&gt; &lt;ul th:each=&quot;comment:$&#123;commentPage.rows&#125;&quot;&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img th:src=&quot;$&#123;@defaultImage.avatar(comment.email)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b th:text=&quot;$&#123;comment.nickname&#125;&quot;&gt;&lt;/b&gt; &lt;span th:text=&quot;$&#123;#dates.format(comment.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot; th:text=&quot;$&#123;comment.content&#125;&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;ul&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=1518228633&amp;s=100&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;VOODOO&lt;/b&gt; &lt;span&gt;2022-09-28 19:53&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; @xpboy &lt;br&gt; 谢谢&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;ul th:if=&quot;$&#123;commentPage.totalPage&gt;1&#125;&quot; id=&quot;lw-page-list&quot; class=&quot;lw-pagenation&quot;&gt; &lt;li th:if=&quot;$&#123;commentPage.current != 1&#125;&quot;&gt;&lt;a href=&quot;javascript:void(0)&quot; data-page=&quot;1&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li th:each=&quot;num:$&#123;#numbers.sequence((commentPage.current &lt; 3?1: commentPage.current -2) ,(commentPage.current &lt; commentPage.totalPage -2?commentPage.current+2: commentPage.totalPage))&#125;&quot;&gt; &lt;a th:class=&quot;$&#123;commentPage.current eq num&#125;?&#x27;lw-active&#x27;:&#x27;&#x27;&quot; href=&quot;javascript:void(0)&quot; th:data-page=&quot;$&#123;num&#125;&quot; th:text=&quot;$&#123;num&#125;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li th:if=&quot;$&#123;commentPage.current != commentPage.totalPage&#125;&quot;&gt; &lt;a href=&quot;javascript:void(0)&quot; th:data-page=&quot;$&#123;commentPage.totalPage&#125;&quot;&gt;尾页&lt;/a&gt; &lt;/li&gt; &lt;li th:text=&quot;$&#123;&#x27;共 &#x27;+ commentPage.totalPage +&#x27; 页&#x27;&#125;&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/th:block&gt;&lt;/div&gt; 在分页及评论成功时调用load方法请求评论区域的数据并加载到容器 1234567@GetMapping(&quot;/comment/&#123;id&#125;&quot;)public String comments(@PathVariable Integer id, @RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, Model model) &#123; pn = Math.max(1, pn); PageHelper&lt;Comment&gt; commentPage = commentService.list(id, pn); model.addAttribute(&quot;commentPage&quot;, commentPage); return &quot;detail::comments&quot;;&#125; 1234567//评论成功$(&#x27;#lw-comment-list&#x27;).load(&#x27;/comment/&#x27; + articleId)//分页$(&#x27;#lw-comment-list&#x27;).on(&#x27;click&#x27;, &#x27;#lw-page-list a&#x27;, function () &#123; let page = $(this).data(&#x27;page&#x27;) $(&#x27;#lw-comment-list&#x27;).load(`/comment/$&#123;articleId&#125;?pn=$&#123;page&#125;`)&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十八)目录处理与文章浏览量的处理","slug":"springbootblog/20.目录处理与文章浏览量的处理","date":"2022-10-08T16:00:00.000Z","updated":"2023-01-17T11:51:09.218Z","comments":true,"path":"2022/10/09/mu-lu-chu-li-yu-wen-zhang-liu-lan-liang-de-chu-li.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/09/mu-lu-chu-li-yu-wen-zhang-liu-lan-liang-de-chu-li.html","excerpt":"","text":"说明上节课我们把文章的详情信息已经渲染出来了，而且还为文章生成了目录，这节课我们将这个目录浮动起来，然后为我们的站点加上返回顶部的按钮，再把文章浏览功能做一下 返回顶部这里可以直接参考我之前写的文章：jQuery实现一个优雅的返回顶部 用一个div做父容器并让其的position为fixed这样就可以固定位置了 将返回顶部的按钮及QQ联系的按钮放入容器并将到顶部的按钮隐藏 判断滚动条高度大于屏幕高度一半时展示到顶部的按钮 给顶部按钮一个滚动到滚动条到顶部的功能 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!--common.html--&gt;&lt;style&gt; #lw-right-bottom-bar &#123; position: fixed; bottom: 50px; font-size: 18px; right: 20px; &#125; #lw-right-bottom-bar a &#123; margin-top: 4px; display: block; background-color: rgba(0, 0, 0, .5); color: #fff; width: 40px; height: 40px; line-height: 40px; text-align: center; &#125; #lw-right-bottom-bar #lw-to-top &#123; opacity: 0; &#125;&lt;/style&gt;&lt;div id=&quot;lw-right-bottom-bar&quot;&gt; &lt;a id=&quot;lw-to-top&quot; href=&quot;javascript:void(0)&quot;&gt;&lt;i class=&quot;fa fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; th:href=&quot;$&#123;T(java.lang.String).format(&#x27;tencent://message/?uin=%s&amp;amp;Site=&amp;amp;menu=yes&#x27;,@webSite.qq)&#125;&quot;&gt;&lt;i class=&quot;fa fa-qq&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt; $(function () &#123; $(window).scroll(function () &#123; let toTop = $(window).scrollTop() let height = $(window).height() if (toTop &gt; height / 2) &#123; $(&#x27;#lw-to-top&#x27;).stop().animate(&#123; opacity: 1 &#125;,500) &#125; else &#123; $(&#x27;#lw-to-top&#x27;).stop().animate(&#123; opacity: 0 &#125;,500) &#125; &#125;) $(&#x27;#lw-to-top&#x27;).on(&#x27;click&#x27;,function () &#123; $(&#x27;body,html&#x27;).stop().animate(&#123; scrollTop:0 &#125;) &#125;) &#125;)&lt;/script&gt; 文章目录处理目录浮动和上面思路差不多，只不过这里就稍微有一点逻辑了，我们此时判断的条件是滚动条滚动的高度大于标签云的底部时进行浮动 先定义一个浮动的样式确定样式 123456#lw-toc-parent.lw-toc-fixed &#123; position: fixed; z-index: 999; top: 10px; width: 300px;&#125; 判断滚动条高度是否满足条件，如果满足直接给容器加上我们定义的浮动的样式 12345678910$(window).scroll(function () &#123; let toTop = $(window).scrollTop() let tagCloud = $(&#x27;.lw-right-item.lw-tag-cloud&#x27;); let tagBottom = tagCloud.offset().top + tagCloud.height() if (toTop &gt; tagBottom - 10) &#123; $(&#x27;#lw-toc-parent&#x27;).addClass(&#x27;lw-toc-fixed&#x27;) &#125;else&#123; $(&#x27;#lw-toc-parent&#x27;).removeClass(&#x27;lw-toc-fixed&#x27;) &#125;&#125;) 滚动优化我们点一下目录直接跳到对应位置难免有些生硬，所以我们可以为其加上过渡动画 取消目录a标签的href，将对应目录的id保存到data-id的属性中 12$(&#x27;#lw-article-toc&#x27;).append(`&lt;li&gt;&lt;a style=&quot;padding-left: $&#123;left&#125;px;&quot; href=&quot;javascript:void(0)&quot; data-id=&quot;$&#123;$(element).attr(&#x27;id&#x27;)&#125;&quot;&gt;$&#123;$(element).text()&#125;&lt;/a&gt;&lt;/li&gt;`) 注册a标签的点击事件，当点击时滚动到目录距顶部的高度 123456$(&#x27;#lw-article-toc&#x27;).on(&#x27;click&#x27;, &#x27;li a&#x27;, function () &#123; let id = $(this).data(&#x27;id&#x27;) $(&#x27;body,html&#x27;).stop().animate(&#123; scrollTop:$(`#$&#123;id&#125;`).offset().top &#125;)&#125;) 基于Cookie的文章浏览量统计文章的浏览量无非就是当用户查看文章详情时我们给浏览量加1，但此时我们需要处理一下，即一个用户在一段时间内浏览多次文章我们都应该认为是1次，我们确定一个用户的标准可以是一个浏览器这一个用户，借助浏览器的Cookie来保存浏览记录 我们先写更新浏览量的Mapper层代码 1234@Transactional@Modifying@Query(value = &quot;update blog_article set views=views+1 where id=13&quot;,nativeQuery = true)void viewsArticle(); 在Service调用Mapper层代码 123public void viewArticle(Integer id) &#123; mapper.viewsArticle(id);&#125; 在文章详情页去调用一下更新浏览量 我们先看看效果，发现会有我们上面说的问题，一个用户重复的去访问一篇文章，它会不停的刷新浏览量 我们这个时候来将文章的浏览记录放到Cookie中，当Cookie中有这篇文章的浏览记录时我们就不更新 1234567891011@GetMapping(&quot;/&#123;id&#125;.html&quot;)public String detail(@PathVariable Integer id, Model model, HttpServletRequest request, HttpServletResponse response) &#123; Article article = articleService.detail(id); if (Objects.isNull(CookieUtil.getCookie(request, Article.VIEW_PREFIX + id))) &#123; articleService.viewArticle(id); CookieUtil.setCookie(response, Article.VIEW_PREFIX + id, &quot;true&quot;); &#125; //todo 当文章不存在时的处理 model.addAttribute(&quot;article&quot;, article); return &quot;detail&quot;;&#125; Cookie工具类123456789101112131415161718192021222324252627282930313233343536373839package cn.kevinlu98.utils;import lombok.SneakyThrows;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.concurrent.TimeUnit;public class CookieUtil &#123; public static String getCookie(HttpServletRequest request, String cookieName) &#123; Cookie[] cookies = request.getCookies(); if (cookies != null) &#123; for (Cookie cookie : cookies) &#123; if (cookie.getName().equals(cookieName)) &#123; return cookie.getValue(); &#125; &#125; &#125; return null; &#125; public static void setCookie(HttpServletResponse response, String cookieName, String value, int cookieMaxAge) &#123; Cookie cookie = new Cookie(cookieName, value); cookie.setPath(&quot;/&quot;); cookie.setMaxAge(cookieMaxAge); response.addCookie(cookie); &#125; public static void setCookie(HttpServletResponse response, String cookieName, String value) &#123; setCookie(response, cookieName, value, 7 * 24 * 60 * 60); &#125; public static void deleteCookie(HttpServletResponse response, String cookieName) &#123; setCookie(response, cookieName, null, 0); &#125;&#125; 独立页面的处理独立页面我们就不显示浏览量、分类、标签还有文章目录的信息了 1th:if=&quot;$&#123;article.type eq T(cn.kevinlu98.pojo.Article).TYPE_ARTICLE&#125;&quot;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十七)文章详情页的展示","slug":"springbootblog/19.文章详情页的展示","date":"2022-10-07T17:21:00.000Z","updated":"2023-01-17T11:51:09.217Z","comments":true,"path":"2022/10/08/wen-zhang-xiang-qing-ye-de-zhan-shi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/08/wen-zhang-xiang-qing-ye-de-zhan-shi.html","excerpt":"","text":"说明我们列表展示区域的内容基本已经做完了，我们的站点前台就只差文章页面的部分功能，我们这节课先把文章的渲染展示做一下 第三方 排版：本来页面的排版是想用Typo.css来排版的，后来觉得那个排版与我们博客的主体不搭，就自己写了版的css，文章排版其实就是把那些markdown渲染的html代码出现的标签加个样式就行了 代码高亮：这里用的是prism，其实还有很多，只是这个用起来比较简单，导入一下就行了，不需要手动渲染 markdown解析：我们用的是commonmark-java这个包，而其它java的markdown解析也基本都用的是它，但它只能支持一些比较简单的markdown语法，稍微复杂一点就不能支持了，但官我给我们很多扩展选项，对我们来说它的基本功能再加上表格的支持就够了 详情页的展示 导入依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;org.commonmark&lt;/groupId&gt; &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt; &lt;version&gt;0.18.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.commonmark&lt;/groupId&gt; &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt; &lt;version&gt;0.18.1&lt;/version&gt;&lt;/dependency&gt; 我们创建一个MarkdownUtil的工具类用于解析markdown 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package cn.kevinlu98.utils;import org.commonmark.Extension;import org.commonmark.ext.gfm.tables.TablesExtension;import org.commonmark.node.Heading;import org.commonmark.node.Link;import org.commonmark.node.Node;import org.commonmark.parser.Parser;import org.commonmark.renderer.html.AttributeProvider;import org.commonmark.renderer.html.AttributeProviderContext;import org.commonmark.renderer.html.AttributeProviderFactory;import org.commonmark.renderer.html.HtmlRenderer;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.Map;import java.util.UUID;/** * Author: Mr丶冷文 * Date: 2022/10/13 14:08 * Email: kevinlu98@qq.com * Description: */public interface MarkdownUtil &#123; List&lt;Extension&gt; EXTENSIONS = Collections.singletonList(TablesExtension.create()); Parser parser = Parser.builder() .extensions(EXTENSIONS) .build(); HtmlRenderer renderer = HtmlRenderer.builder() .extensions(EXTENSIONS) .attributeProviderFactory(attributeProviderContext -&gt; (node, tagName, attributes) -&gt; &#123; if (node instanceof Link) &#123; attributes.put(&quot;target&quot;, &quot;_blank&quot;); &#125; if (node instanceof Heading) &#123; attributes.put(&quot;id&quot;, UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;)); attributes.put(&quot;class&quot;, &quot;lw-title-toc&quot;); &#125; &#125;) .build(); /** * 将markdown代码解析成html * * @param markdown markdown源码 * @return html代码 */ static String parse(String markdown) &#123; Node document = parser.parse(markdown); return renderer.render(document); &#125;&#125; 在Article中定义一个showHtml()的方法用于将content转化为html代码 123public String showHtml() &#123; return MarkdownUtil.parse(this.content);&#125; 定义路由并查询文章详情 1234567@GetMapping(&quot;/&#123;id&#125;.html&quot;)public String detail(@PathVariable Integer id, Model model) &#123; Article article = articleService.detail(id); //todo 当文章不存在时的处理 model.addAttribute(&quot;article&quot;, article); return &quot;detail&quot;;&#125; 页面展示并引入prism 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt; &lt;head th:replace=&quot;common::header(~&#123;::title&#125;,~&#123;::link&#125;,~&#123;&#125;)&quot;&gt; &lt;title th:text=&quot;$&#123; article.title +&#x27; - &#x27;+@webSite.title&#125;&quot;&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/detail.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/prism/prism.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;th:block th:include=&quot;common::nav&quot;&gt;&lt;/th:block&gt; &lt;div class=&quot;lw-container lw-main lw-posr&quot;&gt; &lt;div class=&quot;lw-left-list&quot;&gt; &lt;div class=&quot;lw-article-list&quot;&gt; &lt;ol class=&quot;breadcrumb lw-crumb&quot;&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a th:href=&quot;@&#123;/category/&#123;id&#125;.html(id=$&#123;article.category.id&#125;)&#125;&quot; th:text=&quot;$&#123;article.category.name&#125;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;active&quot;&gt;正文&lt;/li&gt; &lt;/ol&gt; &lt;div class=&quot;lw-article&quot;&gt; &lt;div class=&quot;lw-article-title&quot;&gt; &lt;h1 th:text=&quot;$&#123;article.title&#125;&quot;&gt;&lt;/h1&gt; &lt;p&gt; &lt;i class=&quot;fa fa-clock-o lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;#dates.format(article.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-eye lw-mr5 lw-ml10&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;article.views&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-comment lw-ml10 lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;article.commentCount&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-folder lw-ml10 lw-mr5&quot;&gt;&lt;/i&gt; &lt;a th:href=&quot;@&#123;/category/&#123;id&#125;.html(id=$&#123;article.category.id&#125;)&#125;&quot; th:text=&quot;$&#123;article.category.name&#125;&quot;&gt;&lt;/a&gt;&lt;/a&gt; &lt;i class=&quot;fa fa-tags lw-ml10 lw-mr5&quot;&gt;&lt;/i&gt; &lt;a th:each=&quot;tag:$&#123;article.tags&#125;&quot; th:href=&quot;@&#123;/tag/&#123;id&#125;.html(id=$&#123;tag.id&#125;)&#125;&quot; th:text=&quot;$&#123;tag.name&#125;&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;lw-article-content&quot; id=&quot;lw-article-content&quot; th:utext=&quot;$&#123;article.showHtml()&#125;&quot;&gt;&lt;/div&gt; &lt;ul class=&quot;lw-article-right&quot;&gt; &lt;li&gt; &lt;svg t=&quot;1664366825703&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;919&quot; width=&quot;200&quot; height=&quot;200&quot;&gt; &lt;path d=&quot;M512 512m-448 0a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z&quot; fill=&quot;#FB3A83&quot; p-id=&quot;920&quot;&gt;&lt;/path&gt; &lt;path d=&quot;M676.5 701c-9 0-16.6-6.3-18.1-15-1.1-6-2.5-11.6-4.2-16.7l-0.1-0.2-0.1-0.2c-9.1-31.5-29.1-59-56.6-78-26.2 13.2-55.6 20.1-85.3 20.1-29.8 0-59.2-7-85.5-20.2-27.6 19-47.7 46.5-56.8 78.1-0.2 0.7-2.1 7.9-4.8 18.5-2 8.1-9.3 13.7-17.8 13.7h-10.7c-4.8 0-9.4-2-12.5-5.6-3.1-3.5-4.6-8.2-4-12.8 8.1-60.2 46.2-113.1 101.7-141.5l5.4-2.8 5.1 3.4c23.5 15.9 51.1 24.3 79.8 24.3 28.7 0 56.2-8.4 79.7-24.2l5.1-3.4 5.4 2.8c55.4 28.4 93.4 81.3 101.5 141.4 0.6 4.6-0.8 9.3-4 12.8s-7.7 5.6-12.5 5.6h-10.7zM512.2 526.3c-74.5 0-135-60-135-133.6S437.7 259 512.2 259s135 60 135 133.6c0 73.7-60.5 133.7-135 133.7z m0-222.4c-49.6 0-89.9 39.8-89.9 88.8s40.3 88.8 89.9 88.8c49.6 0 89.9-39.8 89.9-88.8s-40.3-88.8-89.9-88.8z&quot; fill=&quot;#FFFFFF&quot; p-id=&quot;921&quot;&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt;版权所属: &lt;a href=&quot;https://kevinlu98.cn/&quot;&gt;冷文学习者&lt;/a&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;svg t=&quot;1664366893739&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;1067&quot; width=&quot;200&quot; height=&quot;200&quot;&gt; &lt;path d=&quot;M512 512m-448 0a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z&quot; fill=&quot;#FA5151&quot; p-id=&quot;1068&quot;&gt;&lt;/path&gt; &lt;path d=&quot;M610.2 324c22.6 20.5 33.8 49 33.8 85.2 0 26.6-7.5 50.2-22.4 70.7-5.6 6.9-22.2 22.4-49.6 46.5-12.5 10.5-21.8 21.4-27.8 32.6-7.7 12.9-11.5 27.8-11.5 44.7v13.9h-49v-13.9c0-20.1 3.8-37.7 11.5-52.6 7.3-17.3 27.6-40.7 61-70.1 8.1-8.1 14.9-15.3 20.5-21.8 11.7-15.3 17.5-31.2 17.5-47.7 0-24.2-6.6-42.9-19.9-56.2-14.1-14.1-34.1-21.2-59.8-21.2-29.8 0-52.2 9.9-67.1 29.6-12.9 17.3-19.3 40.5-19.3 69.5h-48.4c0-41.9 11.9-75.7 35.7-101.5 25-26.6 58.8-39.9 101.5-39.9 39.7 0.2 70.7 10.9 93.3 32.2z m-75.5 346.4c6.8 6.9 10.3 15.3 10.3 25.4 0 10.5-3.4 19.1-10.3 26-7.7 6.9-16.3 10.3-26 10.3-10.5 0-19.1-3.4-26-10.3-7.3-7.3-10.9-15.9-10.9-26 0-10.5 3.6-18.9 10.9-25.4 6.4-6.8 15.1-10.3 26-10.3 10.4 0 19.1 3.4 26 10.3z&quot; fill=&quot;#FFFFFF&quot; p-id=&quot;1069&quot;&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt;本文链接: &lt;a href=&quot;https://kevinlu98.cn/archives/101.html&quot;&gt;https://kevinlu98.cn/archives/101.html&lt;/a&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;svg t=&quot;1664366925081&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;1215&quot; width=&quot;200&quot; height=&quot;200&quot;&gt; &lt;path d=&quot;M800.3 205.1L534.8 116c-16-5.4-33.3-5.3-49.2 0.2l-264.5 92.3c-29.3 10-49 37.5-49.1 68.4l1.7 265.4c0.7 81 31.1 158.9 85.6 218.9 25 27.7 56.9 51.5 97.8 72.7l144 74.6c9 4.7 19.7 4.6 28.7-0.2L672.5 832c40.4-21.6 72.2-45.7 96.9-73.8 53.6-60.6 83-138.9 82.6-219.8l-1.7-265.6c-0.5-30.9-20.5-58.1-50-67.7z&quot; fill=&quot;#FFC300&quot; p-id=&quot;1216&quot;&gt;&lt;/path&gt; &lt;path d=&quot;M512 597c-13.9 0-25.2-11.3-25.2-25.2V345.2c0-13.9 11.3-25.2 25.2-25.2 13.9 0 25.2 11.3 25.2 25.2v226.6c0 13.9-11.3 25.2-25.2 25.2z&quot; fill=&quot;#FFFFFF&quot; p-id=&quot;1217&quot;&gt;&lt;/path&gt; &lt;path d=&quot;M512 674.1m-29.9 0a29.9 29.9 0 1 0 59.8 0 29.9 29.9 0 1 0-59.8 0Z&quot; fill=&quot;#FFFFFF&quot; p-id=&quot;1218&quot;&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt;协议授权: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&quot;&gt;《署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0)》&lt;/a&gt;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-box row lw-m0&quot;&gt; &lt;h2&gt;评论(6)&lt;/h2&gt; &lt;form action=&quot;&quot;&gt; &lt;div class=&quot;col-md-12 lw-p0&quot; style=&quot;padding-right: 10px;&quot;&gt; &lt;textarea placeholder=&quot;请输入你的评论...&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-xs-12 lw-comment-input lw-posr&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入昵称...&quot;&gt; &lt;i class=&quot;fa fa-user lw-comment-input lw-posa&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-xs-12 lw-comment-input lw-posr&quot;&gt; &lt;input type=&quot;email&quot; placeholder=&quot;请输入电子邮件...&quot;&gt; &lt;i class=&quot;fa fa-envelope lw-posa&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-xs-12 lw-comment-input lw-posr&quot;&gt; &lt;input type=&quot;url&quot; placeholder=&quot;请输入主页地址...&quot;&gt; &lt;i class=&quot;fa fa-link fa-link lw-posa&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-list&quot;&gt; &lt;ul&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://kevinlu98.cn/freecdn-1.4/image/avatar/22.png&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;xpboy&lt;/b&gt; &lt;span&gt;2022-06-03 18:32&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; 已经解决，问题是后台的的永久链接--重写功能，一定要开启成功，我是开启没有成功，但是可以使用，部分功能受限，如点赞、登录、注册等。我是windows iis，添加web.config放到网站根目录就可以了，希望踩坑的朋友注意了。具体的web.config伪静态规则代码，可以联系我免费提供哦 qq24985536，希望帮助到大家&lt;/p&gt; &lt;/div&gt; &lt;ul&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=1518228633&amp;s=100&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;VOODOO&lt;/b&gt; &lt;span&gt;2022-09-28 19:53&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; @xpboy &lt;br&gt; 谢谢&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=68159424&amp;s=100&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;anle&lt;/b&gt; &lt;span&gt;2022-06-03 18:32&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; 您好～我是俺没偷前端的运营，关注了您在分享的技术文章，觉得您的这套模板很棒，我们诚挚邀请您加入俺没偷前端CP主计划。完整福利和详细介绍请见：https://anlenotes.com/cp 我们会给作者提供包括流量、创作分成等， 我们诚挚的邀请您并期待您的加入~&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=602314742&amp;s=100&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;王伟忘记使自己快乐&lt;/b&gt; &lt;span&gt;2022-06-03 18:32&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; 你好，请问一下，搭建的网页，在本地访问一点问题都没有，通过互联网域名访问，打开很慢，而且显示不正常，电脑手机都是一样的，是什么问题呢&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;lw-posr&quot;&gt; &lt;div class=&quot;lw-comment-avatar lw-posa&quot;&gt; &lt;img src=&quot;https://q1.qlogo.cn/g?b=qq&amp;nk=545431&amp;s=100&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-comment-content&quot;&gt; &lt;p&gt;&lt;b&gt;小布丁&lt;/b&gt; &lt;span&gt;2022-06-03 18:32&lt;/span&gt; &lt;a href=&quot;&quot;&gt;回复&lt;/a&gt;&lt;/p&gt; &lt;p class=&quot;lw-comment-info&quot;&gt; 为什么启用这个主题 后，评论用不了了，报错。&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;ul class=&quot;lw-pagenation&quot;&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;lw-right-list lw-md-show lw-posa&quot;&gt; &lt;th:block th:include=&quot;common::right&quot;&gt;&lt;/th:block&gt; &lt;/div&gt; &lt;/div&gt;&lt;th:block th:include=&quot;common::footer&quot;&gt;&lt;/th:block&gt;&lt;script src=&quot;/static/plugin/prism/prism.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 文章目录处理 给h标签加上id 取到所有的h标签 生成a标签，href是#hid 1234567891011121314151617$(function () &#123; let offset = [10, 20, 30, 40, 50, 60] let hTag = $(&#x27;#lw-article-content .lw-title-toc&#x27;) let hMax = 6; hTag.each((i, ele) =&gt; &#123; hMax = Math.min(ele.tagName.charAt(1), hMax) &#125;) for (let i = 0; i &lt; offset.length; i++) &#123; offset[i] -= (hMax - 1) * 10 &#125; hTag.each((index, element) =&gt; &#123; let level = element.tagName.charAt(1) let left = offset[level - 1] $(&#x27;#lw-article-toc&#x27;).append(`&lt;li&gt;&lt;a style=&quot;padding-left: $&#123;left&#125;px;&quot; href=&quot;#$&#123;$(element).attr(&#x27;id&#x27;)&#125;&quot;&gt;$&#123;$(element).text()&#125;&lt;/a&gt;&lt;/li&gt;`) &#125;)&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十六)入口页的展示","slug":"springbootblog/18.入口页的展示","date":"2022-10-06T21:21:00.000Z","updated":"2023-01-17T11:51:09.216Z","comments":true,"path":"2022/10/07/ru-kou-ye-de-zhan-shi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/07/ru-kou-ye-de-zhan-shi.html","excerpt":"","text":"说明我们上节课处理了列表页，但我们还没有真正的入口页面到列表页面的跳转，比如分类列表、标签列表及搜索的入口，这节课我们就重点处理一下这里 处理描述信息中的非中英文字符我们可以看到我们的列表页描述信息其实展示我是我们markdown的源代码，里面有大量的符号，而这些符号与我们的主要内容基本无关，所以我们可以把这些符号删除之后再展示摘要部分的内容 匹配中文的正则：\\u4E00-\\u9FA5 匹配英文的正则：a-zA-Z 1234public String summary() &#123; String summary = this.content.replaceAll(&quot;[^\\\\u4E00-\\\\u9FA5a-zA-Z]&quot;, &quot;&quot;); return summary.substring(0, Math.min(300, summary.length()));&#125; 分类列表 模板：categroy.html 路由：/category.html 观察页面可以看到我们的分类列表需要如下信息 分类名称（已有） 分类描述（已有） 分类下的文章数：可以查下count 分类下文章的最后一次更新时间：可以查询文章列表后用updated进行排序 代码实现 1234567891011121314151617181920//articleMapperLong countByCategory(Category category);@Query(value = &quot;select updated from blog_article where category_id=?1 order by updated desc limit 1&quot;, nativeQuery = true)Date lastUpdated(Integer id);// categoryService@Cacheablepublic List&lt;Category&gt; show() &#123; return mapper.findAll().stream().peek(category -&gt; &#123; category.setArticleCount(articleMapper.countByCategory(category)); category.setLastUpdated(articleMapper.lastUpdated(category.getId())); &#125;).collect(Collectors.toList());&#125;//IndexController@GetMapping(&quot;/category.html&quot;)public String category(Model model) &#123; model.addAttribute(&quot;categories&quot;,categoryService.show()); return &quot;category&quot;;&#125; 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt; &lt;head th:replace=&quot;common::header(~&#123;::title&#125;,~&#123;&#125;,~&#123;&#125;)&quot;&gt; &lt;title th:text=&quot;$&#123;&#x27;分类大全 - &#x27;+@webSite.title&#125;&quot;&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;th:block th:include=&quot;common::nav&quot;&gt;&lt;/th:block&gt; &lt;div class=&quot;lw-container lw-main lw-posr&quot;&gt; &lt;div class=&quot;lw-left-list&quot;&gt; &lt;ol class=&quot;breadcrumb lw-crumb&quot;&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;active&quot;&gt;分类大全&lt;/li&gt; &lt;/ol&gt; &lt;ul class=&quot;lw-category-list&quot;&gt; &lt;li th:each=&quot;category:$&#123;categories&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;/category/&#123;id&#125;.html(id=$&#123;category.id&#125;)&#125;&quot;&gt; &lt;i class=&quot;fa fa-folder lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;category.name&#125;&quot;&gt;&lt;/th:block&gt; &lt;span&gt;(Total &lt;th:block th:text=&quot;$&#123;category.articleCount&#125;&quot;&gt;&lt;/th:block&gt; Articles)&lt;/span&gt;&lt;/a&gt; &lt;p th:text=&quot;$&#123;category.summary&#125;&quot;&gt;&lt;/p&gt; &lt;p class=&quot;lw-category-update&quot;&gt;最后更新: &lt;th:block th:text=&quot;$&#123;category.articleCount eq 0&#125;?&#x27;1970-01-01&#x27;:$&#123;#dates.format(category.lastUpdated,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;&gt;&lt;/th:block&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;lw-right-list lw-md-show lw-posa&quot;&gt; &lt;th:block th:include=&quot;common::right&quot;&gt;&lt;/th:block&gt; &lt;/div&gt; &lt;/div&gt; &lt;th:block th:include=&quot;common::footer&quot;&gt;&lt;/th:block&gt; &lt;/body&gt;&lt;/html&gt; 标签列表 模板：tags.html 路由：/tag.html 观察页面可以看到我们的分类列表需要如下信息 标签名称（已有） 标签下的文章数：可以查下count 代码实现 123456789101112131415//tagMapper@Query(value = &quot;select count(1) from blog_article_tags where tags_id = ?1&quot;, nativeQuery = true)Long articleCountByTid(Integer id);//tagService@Cacheablepublic List&lt;Tag&gt; show() &#123; return mapper.findAll().stream().peek(tag -&gt; tag.setArticleCount(mapper.articleCountByTid(tag.getId()))).filter(tag -&gt; tag.getArticleCount()&gt;0).collect(Collectors.toList());&#125;//IndexController@GetMapping(&quot;/tag.html&quot;)public String tag(Model model) &#123; model.addAttribute(&quot;tagList&quot;, tagService.show()); return &quot;tags&quot;;&#125; 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt; &lt;head th:replace=&quot;common::header(~&#123;::title&#125;,~&#123;&#125;,~&#123;&#125;)&quot;&gt; &lt;title th:text=&quot;$&#123;&#x27;分类大全 - &#x27;+@webSite.title&#125;&quot;&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;th:block th:include=&quot;common::nav&quot;&gt;&lt;/th:block&gt; &lt;div class=&quot;lw-container lw-main lw-posr&quot;&gt; &lt;div class=&quot;lw-left-list&quot;&gt; &lt;ol class=&quot;breadcrumb lw-crumb&quot;&gt; &lt;li&gt;&lt;a href=&quot;/static&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;active&quot;&gt;标签云&lt;/li&gt; &lt;/ol&gt; &lt;div class=&quot;lw-tag-list&quot;&gt; &lt;a th:each=&quot;tag:$&#123;tagList&#125;&quot; th:href=&quot;@&#123;/tag/&#123;id&#125;.html(id=$&#123;tag.id&#125;)&#125;&quot; th:title=&quot;$&#123;tag.name&#125;&quot;&gt; &lt;th:block th:text=&quot;$&#123;tag.name&#125;&quot;&gt;&lt;/th:block&gt; &lt;span th:text=&quot;$&#123;tag.articleCount&#125;&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;lw-right-list lw-md-show lw-posa&quot;&gt; &lt;th:block th:include=&quot;common::right&quot;&gt;&lt;/th:block&gt; &lt;/div&gt; &lt;/div&gt; &lt;th:block th:include=&quot;common::footer&quot;&gt;&lt;/th:block&gt; &lt;/body&gt;&lt;/html&gt; 搜索的入口我们需要展示推荐关键字，这里我想的是用一个LRU做缓存展示20个最近使用的关键字，如果最近使用的关键字少于20个时我们用标签做补充 LRU：LRU中Least Recently Used 的缩写，这种算法认为最近使用过的数据是一个热门数据，下一次还有很大概率再次被使用，而最近很少被使用的数据，很大概率下次不会再使用了，当容器已经满了的时候把最近很少被使用的数据直接删除，这种算法最初是用于操作系统中的页面置换，现在也大多被使用于缓存过期策略 我们也认为最近被用户所搜索的关键字就是热门关键字，直接展示为推荐关键字 我们这里用LinkedHashSet做一个简单的LRU缓存 123456789101112131415161718192021222324252627282930313233343536373839404142package cn.kevinlu98.common;import java.util.ArrayList;import java.util.LinkedHashSet;import java.util.List;import java.util.Set;/** * Author: Mr丶冷文 * Date: 2022/10/12 18:06 * Email: kevinlu98@qq.com * Description: */public class LRUCache &#123; private final Set&lt;String&gt; cache = new LinkedHashSet&lt;&gt;(); private final int limit; public LRUCache(int limit) &#123; this.limit = limit; &#125; public int size() &#123; return cache.size(); &#125; public List&lt;String&gt; list() &#123; return new ArrayList&lt;&gt;(cache); &#125; public void add(String keyword) &#123; while (cache.size() &gt;= limit) &#123; cache.remove(cache.stream().findFirst().orElse(null)); &#125; cache.remove(keyword); cache.add(keyword); &#125;&#125; Controller的变动 12345678910111213141516171819202122232425262728@ModelAttributeprivate void indexModel(Model model) &#123; // todo 可以在这里定义这个controller公用的model的属性 model.addAttribute(&quot;friendlies&quot;, friendlyService.list()); model.addAttribute(&quot;tags&quot;, tagService.list(30)); model.addAttribute(&quot;navigations&quot;, navigationService.show()); model.addAttribute(&quot;hots&quot;, articleService.hotList(5)); int size = lruCache.size(); List&lt;String&gt; keywords = lruCache.list(); Collections.reverse(keywords); if (size &lt; 10) &#123; keywords.addAll(tagService.list(10 - size).stream().map(Tag::getName).collect(Collectors.toList())); &#125; model.addAttribute(&quot;keywords&quot;, keywords);&#125;@GetMapping(&quot;/search.html&quot;)public String search(@RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, String keyword, Model model) &#123; lruCache.add(keyword); //todo 如果这个分类不存在的时候我们要处理一下 model.addAttribute(&quot;keyword&quot;, keyword); ArticleSearch articleSearch = ArticleSearch.indexShow(pn, 8); articleSearch.setKeyword(keyword); PageHelper&lt;Article&gt; articlePage = articleService.search(articleSearch); model.addAttribute(&quot;articlePage&quot;, articlePage); model.addAttribute(&quot;pageType&quot;, &quot;search&quot;); return &quot;list&quot;;&#125; 123456789&lt;div class=&quot;lw-search-input lw-posr&quot;&gt; &lt;form th:action=&quot;@&#123;/search.html&#125;&quot; method=&quot;get&quot;&gt; &lt;input required type=&quot;text&quot; name=&quot;keyword&quot; placeholder=&quot;请输入搜索关键字...&quot;&gt; &lt;button class=&quot;lw-posa&quot;&gt;&lt;i class=&quot;fa fa-search lw-mr5&quot;&gt;&lt;/i&gt;搜索&lt;/button&gt; &lt;/form&gt;&lt;/div&gt;&lt;p&gt;推荐关键字： &lt;a class=&quot;lw-mr5&quot; th:each=&quot;keyword:$&#123;keywords&#125;&quot; th:href=&quot;@&#123;/search.html(keyword=$&#123;keyword&#125;)&#125;&quot; th:text=&quot;$&#123;keyword&#125;&quot; th:title=&quot;$&#123;keyword&#125;&quot;&gt;&lt;/a&gt;&lt;/p&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十五)文章列表页的展示","slug":"springbootblog/17.文章列表页的展示","date":"2022-10-06T20:21:00.000Z","updated":"2023-01-17T11:51:09.216Z","comments":true,"path":"2022/10/07/wen-zhang-lie-biao-ye-de-zhan-shi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/07/wen-zhang-lie-biao-ye-de-zhan-shi.html","excerpt":"","text":"说明首页我们前面几节课已经全部做完成了，而我们某个标签、分类、关键字下的文章我们都是会放到列表页统一展示，这节课我们就把列表页也处理一下，我们列表页的模板用list.html就可以了 分页展示进阶数据量大导致分页太多的情况下我们如何处理分页 可以只显示当前页最近的几页数据 1234567891011&lt;ul th:if=&quot;$&#123;articlePage.totalPage&gt;1&#125;&quot; class=&quot;lw-pagenation&quot;&gt; &lt;li th:if=&quot;$&#123;articlePage.current != 1&#125;&quot;&gt;&lt;a th:href=&quot;@&#123;/&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li th:each=&quot;num:$&#123;#numbers.sequence((articlePage.current &lt; 3?1: articlePage.current -2) ,(articlePage.current &lt; articlePage.totalPage -2?articlePage.current+2: articlePage.totalPage))&#125;&quot;&gt; &lt;a th:class=&quot;$&#123;articlePage.current eq num&#125;?&#x27;lw-active&#x27;:&#x27;&#x27;&quot; th:href=&quot;@&#123;/(pn=$&#123;num&#125;)&#125;&quot; th:text=&quot;$&#123;num&#125;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li th:if=&quot;$&#123;articlePage.current != articlePage.totalPage&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;/(pn=$&#123;articlePage.totalPage&#125;)&#125;&quot;&gt;尾页&lt;/a&gt; &lt;/li&gt; &lt;li th:text=&quot;$&#123;&#x27;共 &#x27;+ articlePage.totalPage +&#x27; 页&#x27;&#125;&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 加上页码框 1上一页 1 / 9 下一页 跳转[] 步骤分析 定义路由，我们希望的路由格式如下 分类路由：/category/&#123;分类ID&#125;.html 标签路由：/tag/&#123;标签ID&#125;.html 搜索路由：/search.html?keywords=&#123;关键定&#125; 面包屑的构建 分类面包屑：首页 &#x2F; 分类大全 &#x2F; 分类名称 标签面包屑：首页 &#x2F; 标签 &#x2F; 标签名称 搜索面包屑：首页 &#x2F; 包含关键字 XX 的文章 标题的构建：XX - 站点名称 调用search接口进行查询 分页渲染 代码实现文章列表的抽取123456789101112131415161718192021222324&lt;th:block th:fragment=&quot;article(articleList)&quot;&gt; &lt;article th:each=&quot;article:$&#123;articleList&#125;&quot; class=&quot;lw-article-item lw-posr&quot;&gt; &lt;div class=&quot;lw-article-cover lw-posa lw-xs-hidden&quot;&gt; &lt;img th:src=&quot;$&#123;@defaultImage.cover(article.cover)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-article-info&quot;&gt; &lt;h2&gt; &lt;a class=&quot;lw-xs-hidden&quot;&gt;&lt;span class=&quot;lw-category&quot; th:text=&quot;$&#123;article.category.name&#125;&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;a th:href=&quot;@&#123;/&#123;id&#125;.html(id=$&#123;article.id&#125;)&#125;&quot; th:text=&quot;$&#123;article.title&#125;&quot;&gt;&lt;/a&gt; &lt;/h2&gt; &lt;p class=&quot;lw-desc&quot; th:text=&quot;$&#123;article.summary()&#125;&quot;&gt;&lt;/p&gt; &lt;p class=&quot;lw-text-hidden lw-article-more&quot;&gt; &lt;i class=&quot;fa fa-clock-o lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;#dates.format(article.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-eye lw-mr5 lw-ml10&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;article.views&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-comment lw-ml10 lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;article.commentCount&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-tag lw-ml10 lw-mr5&quot;&gt;&lt;/i&gt; &lt;a th:each=&quot;tag:$&#123;article.tags&#125;&quot; href=&quot;#&quot; class=&quot;lw-mr5&quot; th:title=&quot;$&#123;tag.name&#125;&quot; th:text=&quot;$&#123;tag.name +&#x27;,&#x27;&#125;&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/article&gt;&lt;/th:block&gt; 分类列表 定义对应的路由 1234567891011@GetMapping(&quot;/category/&#123;id&#125;.html&quot;)public String categoryList(@PathVariable Integer id, @RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, Model model) &#123; Category category = categoryService.detail(id); //todo 如果这个分类不存在的时候我们要处理一下 model.addAttribute(&quot;category&quot;, category); ArticleSearch articleSearch = ArticleSearch.indexShow(pn, 1); articleSearch.setCid(id); PageHelper&lt;Article&gt; articlePage = articleService.search(articleSearch); model.addAttribute(&quot;articlePage&quot;, articlePage); return &quot;list&quot;;&#125; 分类已经在search接口中支持过了，所以我们直接调用即可 分页渲染 1234567891011&lt;ul th:if=&quot;$&#123;articlePage.totalPage&gt;1 and pageType eq &#x27;category&#x27;&#125;&quot; class=&quot;lw-pagenation&quot;&gt; &lt;li th:if=&quot;$&#123;articlePage.current != 1&#125;&quot;&gt;&lt;a th:href=&quot;@&#123;/category/&#123;id&#125;.html(id=$&#123;category.id&#125;)&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li th:each=&quot;num:$&#123;#numbers.sequence((articlePage.current &lt; 3?1: articlePage.current -2) ,(articlePage.current &lt; articlePage.totalPage -2?articlePage.current+2: articlePage.totalPage))&#125;&quot;&gt; &lt;a th:class=&quot;$&#123;articlePage.current eq num&#125;?&#x27;lw-active&#x27;:&#x27;&#x27;&quot; th:href=&quot;@&#123;/category/&#123;id&#125;.html(id=$&#123;category.id&#125;,pn=$&#123;num&#125;)&#125;&quot; th:text=&quot;$&#123;num&#125;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li th:if=&quot;$&#123;articlePage.current != articlePage.totalPage&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;/category/&#123;id&#125;.html(id=$&#123;category.id&#125;,pn=$&#123;articlePage.totalPage&#125;)&#125;&quot;&gt;尾页&lt;/a&gt; &lt;/li&gt; &lt;li th:text=&quot;$&#123;&#x27;共 &#x27;+ articlePage.totalPage +&#x27; 页&#x27;&#125;&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 标签列表 定义对应的路由 123456789101112@GetMapping(&quot;/tag/&#123;id&#125;.html&quot;)public String tagList(@PathVariable Integer id, @RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, Model model) &#123; Tag tag = tagService.detail(id); //todo 如果这个分类不存在的时候我们要处理一下 model.addAttribute(&quot;tag&quot;, tag); ArticleSearch articleSearch = ArticleSearch.indexShow(pn, ); articleSearch.setTid(id); PageHelper&lt;Article&gt; articlePage = articleService.search(articleSearch); model.addAttribute(&quot;articlePage&quot;, articlePage); model.addAttribute(&quot;pageType&quot;, &quot;tag&quot;); return &quot;list&quot;;&#125; 利用JPA的join操作查询标签列表下的所有 1234if (Objects.nonNull(search.getTid())) &#123; ListJoin&lt;Article, Tag&gt; join = root.join(root.getModel().getList(&quot;tags&quot;, Tag.class), JoinType.LEFT); predicateList.add(builder.equal(join.get(&quot;id&quot;), search.getTid()));&#125; 分页渲染 1234567891011&lt;ul th:if=&quot;$&#123;articlePage.totalPage&gt;1 and pageType eq &#x27;tag&#x27;&#125;&quot; class=&quot;lw-pagenation&quot;&gt; &lt;li th:if=&quot;$&#123;articlePage.current != 1&#125;&quot;&gt;&lt;a th:href=&quot;@&#123;/tag/&#123;id&#125;.html(id=$&#123;tag.id&#125;)&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li th:each=&quot;num:$&#123;#numbers.sequence((articlePage.current &lt; 3?1: articlePage.current -2) ,(articlePage.current &lt; articlePage.totalPage -2?articlePage.current+2: articlePage.totalPage))&#125;&quot;&gt; &lt;a th:class=&quot;$&#123;articlePage.current eq num&#125;?&#x27;lw-active&#x27;:&#x27;&#x27;&quot; th:href=&quot;@&#123;/tag/&#123;id&#125;.html(id=$&#123;tag.id&#125;,pn=$&#123;num&#125;)&#125;&quot; th:text=&quot;$&#123;num&#125;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li th:if=&quot;$&#123;articlePage.current != articlePage.totalPage&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;/tag/&#123;id&#125;.html(id=$&#123;tag.id&#125;,pn=$&#123;articlePage.totalPage&#125;)&#125;&quot;&gt;尾页&lt;/a&gt; &lt;/li&gt; &lt;li th:text=&quot;$&#123;&#x27;共 &#x27;+ articlePage.totalPage +&#x27; 页&#x27;&#125;&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 搜索列表 定义对应的路由 1234567891011@GetMapping(&quot;/search.html&quot;)public String tagList(@RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, String keyword, Model model) &#123; //todo 如果这个分类不存在的时候我们要处理一下 model.addAttribute(&quot;keyword&quot;, keyword); ArticleSearch articleSearch = ArticleSearch.indexShow(pn, 8); articleSearch.setKeyword(keyword); PageHelper&lt;Article&gt; articlePage = articleService.search(articleSearch); model.addAttribute(&quot;articlePage&quot;, articlePage); model.addAttribute(&quot;pageType&quot;, &quot;search&quot;); return &quot;list&quot;;&#125; 在搜索接口中加入模糊匹配 123456789101112131415161718192021222324252627282930Page&lt;Article&gt; articlePage = mapper.findAll((Specification&lt;Article&gt;) (root, query, builder) -&gt; &#123; List&lt;Predicate&gt; predicateAnd = new ArrayList&lt;&gt;(); if (Objects.nonNull(search.getCid())) &#123; predicateAnd.add(builder.equal(root.get(&quot;category&quot;), Category.builder().id(search.getCid()).build())); &#125; if (Objects.nonNull(search.getStatus())) &#123; predicateAnd.add(builder.equal(root.get(&quot;status&quot;), search.getStatus())); &#125; if (Objects.nonNull(search.getType())) &#123; predicateAnd.add(builder.equal(root.get(&quot;type&quot;), search.getType())); &#125; if (!StringUtils.isEmptyOrWhitespace(search.getTitle())) &#123; predicateAnd.add(builder.like(root.get(&quot;title&quot;), &quot;%&quot; + search.getTitle() + &quot;%&quot;)); &#125; if (Objects.nonNull(search.getTid())) &#123; ListJoin&lt;Article, Tag&gt; join = root.join(root.getModel().getList(&quot;tags&quot;, Tag.class), JoinType.LEFT); predicateAnd.add(builder.equal(join.get(&quot;id&quot;), search.getTid())); &#125; List&lt;Predicate&gt; predicateOr = new ArrayList&lt;&gt;(); if (!StringUtils.isEmptyOrWhitespace(search.getKeyword())) &#123; // todo 如果可以话后面给大家 出一期进阶课，把这里的搜索换顾EleasticSearch predicateOr.add(builder.like(root.get(&quot;title&quot;), &quot;%&quot; + search.getKeyword() + &quot;%&quot;)); predicateOr.add(builder.like(root.get(&quot;content&quot;), &quot;%&quot; + search.getKeyword() + &quot;%&quot;)); &#125; if (CollectionUtils.isEmpty(predicateOr)) &#123; return builder.and(predicateAnd.toArray(new Predicate[predicateAnd.size()])); &#125; return query.where(builder.and(predicateAnd.toArray(new Predicate[predicateAnd.size()])), builder.or(predicateOr.toArray(new Predicate[predicateOr.size()]))).getRestriction();&#125;, pageable); 分页渲染 123456789101112&lt;ul th:if=&quot;$&#123;articlePage.totalPage&gt;1 and pageType eq &#x27;search&#x27;&#125;&quot; class=&quot;lw-pagenation&quot;&gt; &lt;li th:if=&quot;$&#123;articlePage.current != 1&#125;&quot;&gt;&lt;a th:href=&quot;@&#123;/search.html(keyword=$&#123;keyword&#125;)&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li th:each=&quot;num:$&#123;#numbers.sequence((articlePage.current &lt; 3?1: articlePage.current -2) ,(articlePage.current &lt; articlePage.totalPage -2?articlePage.current+2: articlePage.totalPage))&#125;&quot;&gt; &lt;a th:class=&quot;$&#123;articlePage.current eq num&#125;?&#x27;lw-active&#x27;:&#x27;&#x27;&quot; th:href=&quot;@&#123;search.html(keyword=$&#123;keyword&#125;,pn=$&#123;num&#125;)&#125;&quot; th:text=&quot;$&#123;num&#125;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li th:if=&quot;$&#123;articlePage.current != articlePage.totalPage&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;search.html(keyword=$&#123;keyword&#125;,pn=$&#123;articlePage.totalPage&#125;)&#125;&quot;&gt;尾页&lt;/a&gt; &lt;/li&gt; &lt;li th:text=&quot;$&#123;&#x27;共 &#x27;+ articlePage.totalPage +&#x27; 页&#x27;&#125;&quot;&gt;&lt;/li&gt;&lt;/ul&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十四)缓存处理及首页文章的列表展示","slug":"springbootblog/16.缓存处理及首页文章的列表展示","date":"2022-10-06T19:21:00.000Z","updated":"2023-01-17T11:51:09.215Z","comments":true,"path":"2022/10/07/huan-cun-chu-li-ji-shou-ye-wen-zhang-de-lie-biao-zhan-shi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/07/huan-cun-chu-li-ji-shou-ye-wen-zhang-de-lie-biao-zhan-shi.html","excerpt":"","text":"说明上节课我们已经将前台页面公共部分替换成了动态的，但这个时候就有问题了，因为我们每次访问其它页面的时候都会去查多次数据库，这样会加大数据库的压力，也会拖慢我们网站的速度，因为我们知道一个程序的性能瓶颈大部分情况下是由IO性能决定的，而内存的性能比磁盘快了不知多少倍，所以我们这节课会为我们的项目加上一个缓存 缓存处理我们项目使用的缓存是ehcache这个缓存中间件，可以看下百度词条对其的描述https://baike.baidu.com/item/ehcache/6036099?fr=aladdin 我们可以利用springboot-cache帮我们集成ehcache，这样我们只用简单的做几个配置就可以了 准备工作 引入springboot-cache的依赖及ehcache的依赖 12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt;&lt;/dependency&gt; 在application.yml中配置springboot-cache让其使用ehcache，并指定ehcache的配置文件路径 1234cache: type: ehcache ehcache: config: classpath:/ehcache-spring.xml 创建ehcache的配置文件 12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;http://ehcache.org/ehcache.xsd&quot; updateCheck=&quot;false&quot;&gt; &lt;!-- 磁盘缓存位置 --&gt; &lt;diskStore path=&quot;./cache&quot;/&gt; &lt;!-- maxElementsInMemory： 在内存中缓存的element的最大数目。--&gt; &lt;!-- eternal:elements是否永久有效，如果为true，timeouts将被忽略，element将永不过期 --&gt; &lt;!-- timeToIdleSeconds:发呆秒数，发呆期间未访问缓存立即过期，当eternal为false时，这个属性才有效，0为不限制 --&gt; &lt;!-- timeToLiveSeconds:总存活秒数，当eternal为false时，这个属性才有效，0为不限制 --&gt; &lt;!-- overflowToDisk： 如果内存中数据超过内存限制，是否要缓存到磁盘上 --&gt; &lt;!-- statistics：是否收集统计信息。如果需要监控缓存使用情况，应该打开这个选项。默认为关闭（统计会影响性能）。设置statistics=&quot;true&quot;开启统计 --&gt; &lt;!-- 默认缓存 无过期时间，但 3600 秒内无人访问缓存立即过期 --&gt; &lt;cache name=&quot;blog-cache&quot; maxElementsInMemory=&quot;1000&quot; timeToIdleSeconds=&quot;3600&quot; timeToLiveSeconds=&quot;0&quot; overflowToDisk=&quot;true&quot;&gt; &lt;/cache&gt;&lt;/ehcache&gt; 自定义缓存Key的生成策略spring cache缓存的key默认是通过KeyGenerator生成的，其默认生成策略如下 如果方法没有参数，则使用0作为key 如果只有一个参数的话则使用该参数作为key 如果参数多于一个的话则使用所有参数的hashCode作为key 可以看出默认的key生成策略中并没有涉及方法名称和类，这就意味着如果我们有两个参数列表相同的方法，我们用相同的参数分别调用两个方法，当调用第二个方法的时候，spring cache将会返回缓存中的第一个方法的缓存值，因为他们的key是一样的 我们可以去自定一个CacheConfig的类用作缓存的配置，继承一下CachingConfigurerSupport类，覆写它的keyGenerator方法 然后我们去定义一个BlogCacheKey的内部类，把调用缓存的类名、方法名、参数列表传过来，在这个类里覆写一下它的equals方法，综合考虑上述参数完成key的定义 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package cn.kevinlu98.config;import org.springframework.cache.annotation.CachingConfigurerSupport;import org.springframework.cache.interceptor.KeyGenerator;import org.springframework.context.annotation.Configuration;import org.thymeleaf.util.StringUtils;import java.util.Arrays;/** * Author: Mr丶冷文 * Date: 2022/10/11 16:37 * Email: kevinlu98@qq.com * Description: */@Configurationpublic class CacheConfig extends CachingConfigurerSupport &#123; @Override public KeyGenerator keyGenerator() &#123; return (target, method, params) -&gt; new BlogCacheKey(target.getClass().getName(),method.getName(),params); &#125; static class BlogCacheKey &#123; private final String className; private final String methodName; private final Object[] params; private final int hashCode; public BlogCacheKey(String className, String methodName, Object[] params) &#123; this.className = className; this.methodName = methodName; this.params = params; String sign = className + &quot;_&quot; + methodName + &quot;_&quot; + Arrays.deepHashCode(params); this.hashCode = sign.hashCode(); &#125; @Override public int hashCode() &#123; return this.hashCode; &#125; @Override public boolean equals(Object obj) &#123; if (obj == this) return true; if (!(obj instanceof BlogCacheKey)) return false; BlogCacheKey other = (BlogCacheKey) obj; if (this.hashCode == other.hashCode) return true; return StringUtils.equals(this.className, other.className) &amp;&amp; StringUtils.equals(this.methodName, other.methodName) &amp;&amp; Arrays.deepEquals(this.params, other.params); &#125; &#125;&#125; 启用缓存 在启动类上加上EnableCaching的注解开启缓存 给我们要缓存的对象对应类实现下Serializable接口 我们在查询友情链接及导航栏还有轮播图这里先加上缓存注解CacheConfig，然后在需要加缓存的方法上加上Cacheabel 在更新及删除操作时清空缓存CacheEvict 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package cn.kevinlu98.service;import cn.kevinlu98.mapper.FriendlyMapper;import cn.kevinlu98.pojo.Friendly;import org.springframework.cache.annotation.CacheConfig;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import java.util.List;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:20 * Email: kevinlu98@qq.com * Description: */@CacheConfig(cacheNames = &#123;&quot;blog-cache&quot;&#125;)@Servicepublic class FriendlyService &#123; private final FriendlyMapper mapper; public FriendlyService(FriendlyMapper mapper) &#123; this.mapper = mapper; &#125; /** * 查询所有的友情链接 * * @return 友情链接列表 */ @Cacheable public List&lt;Friendly&gt; list() &#123; return mapper.findAll(); &#125; @CacheEvict(allEntries = true) public void save(Friendly friendly) &#123; mapper.save(friendly); &#125; /** * 根据id从数据库表中删除数据 * * @param id 主键 */ @CacheEvict(allEntries = true) public void delete(Integer id) &#123; mapper.deleteById(id); &#125;&#125; 首页文章列表的展示 给index方法加上pn的参数用于标识是分页 我们可以直接调用之前我们写的search方法来进行搜索 12345678@GetMapping(&quot;/&quot;)public String index(@RequestParam(required = false, defaultValue = &quot;1&quot;) Integer pn, Model model) &#123; pn = pn &lt; 1 ? 1 : pn; model.addAttribute(&quot;articlePage&quot;, articleService.search(ArticleSearch.builder().pageSize(2).pageNum(pn).status(Article.STATUS_PUBLISH).type(Article.TYPE_ARTICLE).build())); model.addAttribute(&quot;banners&quot;, bannerService.list()); return &quot;index&quot;;&#125; 补充评论数 123456789// commentMapperlong countByArticle(Article article);//searchreturn PageHelper.&lt;Article&gt;builder() .rows(articlePage.getContent().stream().peek(x -&gt; x.setCommentCount(commentMapper.countByArticle(x))).collect(Collectors.toList())) .total(articlePage.getTotalElements()) .current(search.getPageNum()) .totalPage(articlePage.getTotalPages()) .build(); 首页文章列表展示 1234567891011121314151617&lt;article th:each=&quot;article:$&#123;articlePage.rows&#125;&quot; class=&quot;lw-article-item lw-posr&quot;&gt; &lt;div class=&quot;lw-article-cover lw-posa lw-xs-hidden&quot;&gt; &lt;img th:src=&quot;$&#123;@defaultImage.cover(article.cover)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;lw-article-info&quot;&gt; &lt;h2&gt; &lt;a class=&quot;lw-xs-hidden&quot;&gt;&lt;span class=&quot;lw-category&quot; th:text=&quot;$&#123;article.category.name&#125;&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;a th:href=&quot;@&#123;/&#123;id&#125;.html(id=$&#123;article.id&#125;)&#125;&quot; th:text=&quot;$&#123;article.title&#125;&quot;&gt;&lt;/a&gt; &lt;/h2&gt; &lt;p class=&quot;lw-desc&quot; th:text=&quot;$&#123;article.summary()&#125;&quot;&gt;&lt;/p&gt; &lt;p class=&quot;lw-text-hidden lw-article-more&quot;&gt; &lt;i class=&quot;fa fa-clock-o lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;#dates.format(article.created,&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-eye lw-mr5 lw-ml10&quot;&gt;&lt;/i&gt;&lt;th:block th:text=&quot;$&#123;article.views&#125;&quot;&gt;&lt;/th:block&gt; &lt;i class=&quot;fa fa-comment lw-ml10 lw-mr5&quot;&gt;&lt;/i&gt;&lt;th:block th:text=&quot;$&#123;article.commentCount&#125;&quot;&gt;&lt;/th:block&gt; &lt;/p&gt; &lt;/div&gt;&lt;/article&gt; 分页部分处理 123456789&lt;ul th:if=&quot;$&#123;articlePage.totalPage&gt;1&#125;&quot; class=&quot;lw-pagenation&quot;&gt; &lt;li th:if=&quot;$&#123;articlePage.current != 1&#125;&quot;&gt;&lt;a th:href=&quot;@&#123;/&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li th:each=&quot;num:$&#123;#numbers.sequence(1,articlePage.totalPage)&#125;&quot;&gt; &lt;a th:class=&quot;$&#123;articlePage.current eq num&#125;?&#x27;lw-active&#x27;:&#x27;&#x27;&quot; th:href=&quot;@&#123;/(pn=$&#123;num&#125;)&#125;&quot; th:text=&quot;$&#123;num&#125;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li th:if=&quot;$&#123;articlePage.current != articlePage.totalPage&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;/(pn=$&#123;articlePage.totalPage&#125;)&#125;&quot;&gt;尾页&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(十三)首页展示及公共部分展示","slug":"springbootblog/15.首页展示及公共部分展示","date":"2022-10-06T18:21:00.000Z","updated":"2023-01-17T11:51:09.215Z","comments":true,"path":"2022/10/07/shou-ye-zhan-shi-ji-gong-gong-bu-fen-zhan-shi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/07/shou-ye-zhan-shi-ji-gong-gong-bu-fen-zhan-shi.html","excerpt":"","text":"说明上节课我们把页面还有公共部分做了抽取，这节课就把首页展示的东西以及公共区域展示的东西处理一下 公共部分 定义IndexController公共返回Model 12345@ModelAttributeprivate void indexModel(Model model) &#123; // todo 可以在这里定义这个controller公用的model的属性 &#125; 底部的友情链接 1model.addAttribute(&quot;friendlies&quot;, friendlyService.list()); 12345&lt;div class=&quot;lw-container&quot;&gt; &lt;h2&gt;友情链接&lt;/h2&gt; &lt;!--/*@thymesVar id=&quot;friendlies&quot; type=&quot;java.util.List&lt;cn.kevinlu98.pojo.Friendly&gt;&quot;*/--&gt; &lt;a th:each=&quot;friendly:$&#123;friendlies&#125;&quot; target=&quot;_blank&quot; th:href=&quot;$&#123;friendly.link&#125;&quot; th:text=&quot;$&#123;friendly.title&#125;&quot;&gt;冷文学习者&lt;/a&gt;&lt;/div&gt; 顶部导航条部分 12345678// Mapper层 List&lt;Navigation&gt; findAllByEnableOrderByOrderedAsc(Boolean enable);//Service层public List&lt;Navigation&gt; show() &#123; return mapper.findAllByEnableOrderByOrderedAsc(true);&#125;//IndexModelmodel.addAttribute(&quot;navigations&quot;, navigationService.show()); 123456789101112&lt;div class=&quot;lw-nav lw-posa&quot;&gt; &lt;a th:href=&quot;@&#123;/&#125;&quot;&gt;&lt;i class=&quot;fa fa-home&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;首页&lt;/a&gt; &lt;!--/*@thymesVar id=&quot;navigations&quot; type=&quot;java.util.List&lt;cn.kevinlu98.pojo.Navigation&gt;&quot;*/--&gt; &lt;a th:each=&quot;navigation:$&#123;navigations&#125;&quot; th:href=&quot;$&#123;navigation.link&#125;&quot; th:target=&quot;$&#123;navigation.linkMode&#125;?&#x27;_blank&#x27;:&#x27;&#x27;&quot;&gt; &lt;i th:if=&quot;$&#123;navigation.icon.length()&gt;0&#125;&quot; th:class=&quot;$&#123;&#x27;fa fa-&#x27;+navigation.icon&#125;&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;navigation.name&#125;&quot;&gt;&lt;/th:block&gt; &lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-fr lw-search-btn&quot; style=&quot;padding: 0;&quot;&gt; &lt;i class=&quot;fa fa-search&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/a&gt;&lt;/div&gt; 右侧标签部分：我们希望这里可以随机展示30个标签，所以这里可以利用数据库的order by rand() 来进行排序 123456789//Mapper@Query(value = &quot;select * from blog_tag order by rand() limit ?1&quot;, nativeQuery = true)List&lt;Tag&gt; findRandom(int length);//Servicepublic List&lt;Tag&gt; list(int length) &#123; return mapper.findRandom(length);&#125;//IndexModelmodel.addAttribute(&quot;tags&quot;, tagService.list(30)); 12345&lt;div class=&quot;lw-right-item lw-tag-cloud&quot;&gt; &lt;h4&gt;&lt;i class=&quot;fa fa-tags lw-mr5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;标签云&lt;/h4&gt; &lt;!--/*@thymesVar id=&quot;tags&quot; type=&quot;java.util.List&lt;cn.kevinlu98.pojo.Tag&gt;&quot;*/--&gt; &lt;a th:each=&quot;tag:$&#123;tags&#125;&quot; href=&quot;#&quot; th:title=&quot;$&#123;tag.name&#125;&quot; th:text=&quot;$&#123;tag.name&#125;&quot;&gt;&lt;/a&gt;&lt;/div&gt; 定义默认图片处理类：因为我们的文章有可能是没有封面的，所以我们来定义一个处理类处理一下封面为空的文章封面，给其一个默认图片，当然，默认图片我们也是要做成可配置的，我们可以自定义默认图片列表 1234567891011121314151617181920212223242526272829package cn.kevinlu98.common;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;import org.thymeleaf.util.StringUtils;import java.util.List;/** * Author: Mr丶冷文 * Date: 2022/10/11 11:54 * Email: kevinlu98@qq.com * Description: */@Component@Data@ConfigurationProperties(prefix = &quot;default-image&quot;)public class DefaultImage &#123; private List&lt;String&gt; images; public String cover(String imgUrl) &#123; if (StringUtils.isEmptyOrWhitespace(imgUrl)) &#123; return images.get((int) (Math.random() * images.size())); &#125; return imgUrl; &#125;&#125; 1234567default-image: images: - /static/image/1.jpg - /static/image/2.jpg - /static/image/3.jpg - /static/image/4.jpg - /static/image/5.jpg 右侧的热门文章 123456789// Mapper@Query(value = &quot;select * from blog_article where type = 1 and status = 1 order by views limit ?1&quot;, nativeQuery = true)List&lt;Article&gt; hotList(int length);//Servicepublic List&lt;Article&gt; hotList(int length) &#123; return mapper.hotList(length);&#125;//IndexModelmodel.addAttribute(&quot;hots&quot;, articleService.hotList(5)); 123456789101112131415&lt;li th:each=&quot;hot,it:$&#123;hots&#125;&quot;&gt; &lt;a th:href=&quot;@&#123;/&#123;id&#125;.html(id=$&#123;hot.id&#125;)&#125;&quot;&gt; &lt;div class=&quot;lw-hot-img&quot;&gt; &lt;span class=&quot;label label-danger lw-posa&quot; th:if=&quot;$&#123;it.index eq 0&#125;&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;label label-warning lw-posa&quot; th:if=&quot;$&#123;it.index eq 1&#125;&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;label label-info lw-posa&quot; th:if=&quot;$&#123;it.index eq 2&#125;&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;label label-default lw-posa&quot; th:if=&quot;$&#123;it.index &gt; 2&#125;&quot; th:text=&quot;$&#123;it.index+1&#125;&quot;&gt;&lt;/span&gt; &lt;img th:src=&quot;$&#123;@defaultImage.cover(hot.cover)&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;p class=&quot;lw-hot-title&quot; th:text=&quot;$&#123;hot.title&#125;&quot;&gt;&lt;/p&gt; &lt;p class=&quot;lw-hot-info&quot;&gt;&lt;i class=&quot;fa fa-eye lw-mr5&quot;&gt;&lt;/i&gt; &lt;th:block th:text=&quot;$&#123;hot.views&#125;&quot;&gt;&lt;/th:block&gt; &lt;/p&gt; &lt;/a&gt;&lt;/li&gt; 轮播图的展示 12345@GetMapping(&quot;/&quot;)public String index(Model model) &#123; model.addAttribute(&quot;banners&quot;,bannerService.list()); return &quot;index&quot;;&#125; 1234567891011&lt;div th:each=&quot;banner:$&#123;banners&#125;&quot; class=&quot;swiper-slide lw-posr&quot;&gt; &lt;img th:src=&quot;$&#123;banner.cover&#125;&quot; alt=&quot;&quot; srcset=&quot;&quot;&gt; &lt;div class=&quot;lw-banner-info lw-posa&quot;&gt; &lt;a th:href=&quot;$&#123;banner.link&#125;&quot; target=&quot;_blank&quot;&gt; &lt;h2 class=&quot;lw-text-hidden&quot;&gt;&lt;span class=&quot;label label-danger lw-mr5&quot;&gt;站长推荐&lt;/span&gt; &lt;th:block th:text=&quot;$&#123;banner.title&#125;&quot;&gt;&lt;/th:block&gt; &lt;/h2&gt; &lt;/a&gt; &lt;p th:text=&quot;$&#123;banner.summary&#125;&quot;&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(十二)前台页面的导入及公共数据的配置","slug":"springbootblog/14.前台页面的导入及公共数据的配置","date":"2022-10-06T12:21:00.000Z","updated":"2023-01-17T11:51:09.214Z","comments":true,"path":"2022/10/06/qian-tai-ye-mian-de-dao-ru-ji-gong-gong-shu-ju-de-pei-zhi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/06/qian-tai-ye-mian-de-dao-ru-ji-gong-gong-shu-ju-de-pei-zhi.html","excerpt":"","text":"说明管理后台我们几乎已经完成了，只差评论管理还有控制台的信息展示了，那里等我们把前台做完再做，因为那两个功能中有些功能依赖了前台的交互 文章编辑页的处理上节课忘了说，这节课补充一下 当页面为新增时返回新增文章 1model.addAttribute(&quot;title&quot;, Objects.isNull(article.getId()) ? &quot;创建新文章&quot; : &quot;编辑 &quot; + article.getTitle()); 当页面为编辑页面时返回编辑+文章标题 12&lt;title th:text=&quot;$&#123;title&#125;&quot;&gt;新增文章&lt;/title&gt;&lt;h3 style=&quot;margin-bottom: 30px;text-align: center&quot; th:text=&quot;$&#123;title&#125;&quot;&gt;&lt;/h3&gt; 页面素材素材介绍 error.html：错误页面 category.html：分类大全页面 detail.html：文章详情页面 index.html：首页 list.html：列表页 tags.html：标签页 /static/：静态资源 素材导入 将静态资源/static/目录复制到项目的static/目录中 将页面直接复制到templates文件夹下 站点配置我们创建一个站点配置类，因为我们这是一个个人博客，我们就没有必要去把用户信息保存到数据库里了，因为只有我们一个用户，所以我这里采用配置文件的方式配置 站点配置类的类名为WebSite，属性列表如下(只写这节课我们用到的，后面用到的我们慢慢来补充)： 属性 备注 类型 title 站点名称 String keywords SEO的关键字 List description SEO的站点描述 String nickname 站长昵称 String address 站长坐标 String tags 站长标签 List navdesc 标题栏的一句话 String qq qq String github github String sina 新浪微博 String mail 邮箱 String footer footer部分 String logo 主页的大logo String 在yml文件做补充相应的配置并使用@ConfigurationProperties注解初始化配置类 123456789101112131415161718192021222324252627282930313233package cn.kevinlu98.common;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;import java.util.List;/** * Author: Mr丶冷文 * Date: 2022/10/10 15:40 * Email: kevinlu98@qq.com * Description: 站点配置类 */@Data@Component@ConfigurationProperties(prefix = &quot;website&quot;)public class WebSite &#123; private String title; private List&lt;String&gt; keywords; private String description; private String nickname; private String address; private List&lt;String&gt; tags; private String navdesc; private String qq; private String github; private String sina; private String mail; private String footer; private String logo;&#125; 12345678910111213141516171819202122232425262728293031website: title: 冷文学习者 keywords: - typecho - freewind - java - 程序员 - springboot - 学习 - 自学 - 冷文学习者 - 冷文图床 description: 冷文学习者(KEVINLU98.COM)，记录一个北漂小码农的日常业余生活 avatar: https://imagebed-1252410096.cos.ap-nanjing.myqcloud.com/2042/ad0278954bd84793b809913c3ded4592.jpg nickname: Mr丶冷文 address: 北京 昌平 tags: - java - springboot - 大数据 - 网页设计 - php爱好者 navdesc: 让崇拜从这里开始，用代码做点好玩的事件，让每一天都变的充实起来 qq: 1628048198 github: https://github.com/kevinlu98?tab=repositories sina: https://weibo.com/lengwenboke mail: kevinlu98@qq.com logo: /static/image/logo.png footer: &#x27;© 2019-2020 &lt;a href=&quot;/&quot;&gt;冷文学习者&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://beian.miit.gov.cn&quot;&gt;陕ICP备19024566-1号&lt;/a&gt;&lt;a style=&quot;margin-left: 10px&quot; target=&quot;_blank&quot; href=&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11011402012109&quot;&gt;&lt;img style=&quot;vertical-align: top;&quot; src=&quot;https://imagebed-1252410096.cos.ap-nanjing.myqcloud.com/2046/d4ab98835b8842c88eededac6e7c9e35.png&quot;&gt;京公网安备 11011402012109号&lt;/a&gt;&#x27; 定义页面路由12345678910111213141516171819202122232425262728293031323334353637383940414243package cn.kevinlu98.controller;import cn.kevinlu98.common.WebSite;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;/** * Author: Mr丶冷文 * Date: 2022/10/10 15:56 * Email: kevinlu98@qq.com * Description: */@Controllerpublic class IndexController &#123; @GetMapping(&quot;/&quot;) public String index() &#123; return &quot;index&quot;; &#125; @GetMapping(&quot;/list&quot;) public String list() &#123; return &quot;list&quot;; &#125; @GetMapping(&quot;/category&quot;) public String category() &#123; return &quot;category&quot;; &#125; @GetMapping(&quot;/tags&quot;) public String tags() &#123; return &quot;tags&quot;; &#125; @GetMapping(&quot;/error&quot;) public String error() &#123; return &quot;error&quot;; &#125; @GetMapping(&quot;/&#123;id&#125;.html&quot;) public String detail(@PathVariable Integer id) &#123; return &quot;detail&quot;; &#125;&#125; 完成公共页面的抽取header1234567891011121314&lt;head th:fragment=&quot;header(title,link,style)&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title th:replace=&quot;$&#123;title&#125;&quot;&gt;Title&lt;/title&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; &lt;meta name=&quot;description&quot; th:content=&quot;$&#123;@webSite.description&#125;&quot;&gt; &lt;meta name=&quot;keywords&quot; th:content=&quot;$&#123;T(java.lang.String).join(&#x27;,&#x27;,@webSite.keywords)&#125;&quot;&gt; &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/bootstrap/css/bootstrap.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/font-awesome/css/font-awesome.min.css&quot;&gt; &lt;th:block th:replace=&quot;$&#123;link&#125;&quot;&gt;&lt;/th:block&gt; &lt;!-- 自定义css文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/style.css&quot;&gt; &lt;th:block th:replace=&quot;$&#123;style&#125;&quot;&gt;&lt;/th:block&gt;&lt;/head&gt; nav qq打开聊天窗口 1tencent://message/?uin=1628048198&amp;amp;Site=&amp;amp;menu=yes 打开邮我 1http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=kevinlu98@qq.com 1234567891011121314151617181920212223242526272829303132333435363738&lt;th:block th:fragment=&quot;nav&quot;&gt; &lt;nav class=&quot;lw-md-show&quot;&gt; &lt;div class=&quot;lw-container lw-header lw-posr &quot;&gt; &lt;div class=&quot;lw-logo lw-fl&quot;&gt; &lt;a href=&quot;/&quot;&gt; &lt;img th:src=&quot;$&#123;@webSite.logo eq null or @webSite.logo.length() &lt;= 0&#125;?&#x27;/static/image/logo.png&#x27;:$&#123;@webSite.logo&#125;&quot; alt=&quot;冷文的个人博客&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;span th:text=&quot;$&#123;@webSite.navdesc&#125;&quot;&gt;&lt;/span&gt; &lt;div class=&quot;lw-fr lw-linkme&quot;&gt; &lt;a target=&quot;_blank&quot; th:href=&quot;$&#123;T(java.lang.String).format(&#x27;tencent://message/?uin=%s&amp;amp;Site=&amp;amp;menu=yes&#x27;,@webSite.qq)&#125;&quot;&gt;&lt;i class=&quot;fa fa-qq&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; th:href=&quot;$&#123;@webSite.github&#125;&quot;&gt;&lt;i class=&quot;fa fa-github&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; th:href=&quot;$&#123;@webSite.sina&#125;&quot;&gt;&lt;i class=&quot;fa fa-weibo&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; th:href=&quot;$&#123;&#x27;http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=&#x27;+@webSite.mail&#125;&quot;&gt;&lt;i class=&quot;fa fa-envelope&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;lw-nav lw-posa&quot;&gt; &lt;a href=&quot;/&quot;&gt;&lt;i class=&quot;fa fa-home&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;首页&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;技术分享&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;闲言碎语&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;个人随笔&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-users&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;友情链接&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-user&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;关于我&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-edit&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;留言板&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-fr lw-search-btn&quot; style=&quot;padding: 0;&quot;&gt; &lt;i class=&quot;fa fa-search&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;div class=&quot;lw-md-hidden lw-phone-header&quot;&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-posa lw-phone-topbtn lw-search-show lw-search-btn&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a class=&quot;lw-index&quot; href=&quot;/&quot;&gt;&lt;h1&gt;冷文学习者&lt;/h1&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;lw-md-hidden&quot; style=&quot;height: 100px;&quot;&gt;&lt;/div&gt;&lt;/th:block&gt; footer1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;th:block th:fragment=&quot;footer&quot;&gt; &lt;div class=&quot;lw-friend-link&quot;&gt; &lt;div class=&quot;lw-container&quot;&gt; &lt;h2&gt;友情链接&lt;/h2&gt; &lt;a href=&quot;&quot;&gt;冷文学习者&lt;/a&gt; &lt;a href=&quot;&quot;&gt;冷文博客&lt;/a&gt; &lt;a href=&quot;&quot;&gt;冷文聊编程&lt;/a&gt; &lt;a href=&quot;&quot;&gt;GetHub&lt;/a&gt; &lt;a href=&quot;&quot;&gt;CSDN&lt;/a&gt; &lt;a href=&quot;&quot;&gt;百度一下&lt;/a&gt; &lt;a href=&quot;&quot;&gt;新浪微博&lt;/a&gt; &lt;a href=&quot;&quot;&gt;谷歌搜索&lt;/a&gt; &lt;a href=&quot;&quot;&gt;知乎&lt;/a&gt; &lt;a href=&quot;&quot;&gt;掘金&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;footer th:utext=&quot;$&#123;@webSite.footer&#125;&quot;&gt;&lt;/footer&gt; &lt;div class=&quot;lw-mask&quot; id=&quot;lw-search-box&quot;&gt; &lt;div class=&quot;lw-search-conetnt&quot;&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;lw-search-close lw-posa&quot;&gt;&lt;i class=&quot;fa fa-close&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;div class=&quot;lw-search-input lw-posr&quot;&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入搜索关键字...&quot;&gt; &lt;button class=&quot;lw-posa&quot;&gt;&lt;i class=&quot;fa fa-search lw-mr5&quot;&gt;&lt;/i&gt;搜索&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;p&gt;推荐关键字： &lt;a href=&quot;javascript:void (0)&quot;&gt;独立下载&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;评论通知&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;点赞&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;非插件&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;tp5&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;ajax&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;json&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;IO模型&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;跨域&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;javascript&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;springboot&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;视频剪辑&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;后期&lt;/a&gt; &lt;a href=&quot;javascript:void (0)&quot;&gt;个人随笔&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;/static/plugin/jquery/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt; &lt;script src=&quot;/static/plugin/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/static/plugin/swiper-bundle/swiper-bundle.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/static/js/main.js&quot;&gt;&lt;/script&gt;&lt;/th:block&gt; Right123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;th:block th:fragment=&quot;right&quot;&gt; &lt;div class=&quot;lw-right-item lw-profile&quot;&gt; &lt;div class=&quot;lw-avatar-content lw-posr&quot; style=&quot;background-image:url(/static/image/5-120601094K3-50.gif);&quot;&gt; &lt;div class=&quot;lw-avatar lw-posa&quot;&gt; &lt;img th:src=&quot;$&#123;@webSite.avatar&#125;&quot; src=&quot;/static/image/avatar.jpeg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;ul class=&quot;lw-info&quot;&gt; &lt;li&gt;&lt;span&gt;博主&lt;/span&gt;&lt;th:block th:text=&quot;$&#123;@webSite.nickname&#125;&quot;&gt;&lt;/th:block&gt; &lt;/li&gt; &lt;li&gt;&lt;span&gt;坐标&lt;/span&gt;&lt;th:block th:text=&quot;$&#123;@webSite.address&#125;&quot;&gt;&lt;/th:block&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;标签&lt;/span&gt;&lt;th:block th:text=&quot;$&#123;T(java.lang.String).join(&#x27;、&#x27;,@webSite.tags)&#125;&quot;&gt;&lt;/th:block&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;lw-right-item lw-right-hot&quot;&gt; &lt;h4&gt;&lt;i class=&quot;fa fa-fire lw-mr5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;热门文章&lt;/h4&gt; &lt;ul class=&quot;lw-hot-list&quot;&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt; &lt;div class=&quot;lw-hot-img&quot;&gt; &lt;span class=&quot;label label-danger lw-posa&quot;&gt;1&lt;/span&gt; &lt;img src=&quot;/static/image/1.jpg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;p class=&quot;lw-hot-title&quot;&gt;Freewind主题编辑器展示&lt;/p&gt; &lt;p class=&quot;lw-hot-info&quot;&gt;&lt;i class=&quot;fa-solid fa-fire-flame-curved&quot;&gt;&lt;/i&gt; 65580 &lt;/p&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt; &lt;div class=&quot;lw-hot-img&quot;&gt; &lt;span class=&quot;label label-warning lw-posa&quot;&gt;2&lt;/span&gt; &lt;img src=&quot;/static/image/2.jpg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;p class=&quot;lw-hot-title&quot;&gt;Conda虚拟环境使用&lt;/p&gt; &lt;p class=&quot;lw-hot-info&quot;&gt;&lt;i class=&quot;fa-solid fa-fire-flame-curved&quot;&gt;&lt;/i&gt; 56283 &lt;/p&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt; &lt;div class=&quot;lw-hot-img&quot;&gt; &lt;span class=&quot;label label-info lw-posa&quot;&gt;3&lt;/span&gt; &lt;img src=&quot;/static/image/3.jpg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;p class=&quot;lw-hot-title&quot;&gt;纯 CSS 图片碎裂动画教程&lt;/p&gt; &lt;p class=&quot;lw-hot-info&quot;&gt;&lt;i class=&quot;fa-solid fa-fire-flame-curved&quot;&gt;&lt;/i&gt; 52213 &lt;/p&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt; &lt;div class=&quot;lw-hot-img&quot;&gt; &lt;span class=&quot;label label-default lw-posa&quot;&gt;4&lt;/span&gt; &lt;img src=&quot;/static/image/4.jpg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;p class=&quot;lw-hot-title&quot;&gt;Spring Boot 3.0 M1 发布&lt;/p&gt; &lt;p class=&quot;lw-hot-info&quot;&gt;&lt;i class=&quot;fa-solid fa-fire-flame-curved&quot;&gt;&lt;/i&gt; 23132 &lt;/p&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt; &lt;div class=&quot;lw-hot-img&quot;&gt; &lt;span class=&quot;label label-default lw-posa&quot;&gt;5&lt;/span&gt; &lt;img src=&quot;/static/image/5.jpg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;p class=&quot;lw-hot-title&quot;&gt;异步上传文件显示进度条&lt;/p&gt; &lt;p class=&quot;lw-hot-info&quot;&gt;&lt;i class=&quot;fa-solid fa-fire-flame-curved&quot;&gt;&lt;/i&gt; 12322 &lt;/p&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;lw-right-item lw-tag-cloud&quot;&gt; &lt;h4&gt;&lt;i class=&quot;fa fa-tags lw-mr5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;标签云&lt;/h4&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/freewind/&quot; title=&quot;freewind&quot;&gt; freewind&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/typecho/&quot; title=&quot;typecho&quot;&gt; typecho&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E6%8F%92%E4%BB%B6/&quot; title=&quot;插件&quot;&gt; 插件&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/emlog/&quot; title=&quot;emlog&quot;&gt; emlog&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/java/&quot; title=&quot;java&quot;&gt; java&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E4%B8%BB%E9%A2%98/&quot; title=&quot;主题&quot;&gt; 主题&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E8%87%AA%E7%94%B1%E4%B9%8B%E9%A3%8E/&quot; title=&quot;自由之风&quot;&gt; 自由之风&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E5%9B%BE%E5%BA%8A/&quot; title=&quot;图床&quot;&gt; 图床&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E5%86%B7%E6%96%87%E5%9B%BE%E5%BA%8A/&quot; title=&quot;冷文图床&quot;&gt; 冷文图床&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/markdown/&quot; title=&quot;markdown&quot;&gt; markdown&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/gitee/&quot; title=&quot;gitee&quot;&gt; gitee&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/springboot/&quot; title=&quot;springboot&quot;&gt; springboot&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/linux/&quot; title=&quot;linux&quot;&gt; linux&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/mac/&quot; title=&quot;mac&quot;&gt; mac&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E5%AD%A6%E4%B9%A0/&quot; title=&quot;学习&quot;&gt; 学习&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/python/&quot; title=&quot;python&quot;&gt; python&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/conda/&quot; title=&quot;conda&quot;&gt; conda&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E7%9B%B8%E5%86%8C/&quot; title=&quot;相册&quot;&gt; 相册&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/jsDelivr/&quot; title=&quot;jsDelivr&quot;&gt; jsDelivr&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/cdn/&quot; title=&quot;cdn&quot;&gt; cdn&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/codemirror/&quot; title=&quot;codemirror&quot;&gt; codemirror&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/freedom/&quot; title=&quot;freedom&quot;&gt; freedom&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E8%85%BE%E8%AE%AFcos/&quot; title=&quot;腾讯cos&quot;&gt; 腾讯cos&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/cos/&quot; title=&quot;cos&quot;&gt; cos&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A/&quot; title=&quot;私人图床&quot;&gt; 私人图床&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E6%AC%A2%E8%BF%8E%E9%A1%B5/&quot; title=&quot;欢迎页&quot;&gt; 欢迎页&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/&quot; title=&quot;登录注册&quot;&gt; 登录注册&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E6%95%99%E7%A8%8B%E4%B8%8B%E8%BD%BD/&quot; title=&quot;教程下载&quot;&gt; 教程下载&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/itjc8/&quot; title=&quot;itjc8&quot;&gt; itjc8&lt;/a&gt; &lt;a href=&quot;https://www.kevinlu98.cn/tag/%E8%99%9A%E6%8B%9F%E6%9C%BA/&quot; title=&quot;虚拟机&quot;&gt; 虚拟机&lt;/a&gt; &lt;/div&gt;&lt;/th:block&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十一)完成导航管理及统一异常处理","slug":"springbootblog/13.完成导航管理及统一异常处理","date":"2022-10-06T10:21:00.000Z","updated":"2023-01-17T11:51:09.214Z","comments":true,"path":"2022/10/06/wan-cheng-dao-hang-guan-li-ji-tong-yi-yi-chang-chu-li.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/06/wan-cheng-dao-hang-guan-li-ji-tong-yi-yi-chang-chu-li.html","excerpt":"","text":"说明导航管理这里也没有任何业务逻辑，所以我们用代码生成器生成一下然后展示稍微做个修改就可以啦，完成导航管理后我们就可以管理后台的功能就先告一段落，后面几节课就主要做前台的开发 新增编辑文章标题处理我突然发现我们编辑文章及新增文章时标题都是新增文章，这里我们处理一下，直接让后端返回页面标题 当页面为新增时返回新增文章 当页面为编辑页面时返回编辑+文章标题 导航实体及数据库 实体类名：Navigation 数据库名：blog_navigation 属性 类型 备注 id 整数 主键 name 字符串 名称 icon 字符串 图标: fontawesome4.7 link 字符串 跳转链接 linkMode 布尔 跳转方式：false.当前页跳转；true.新标签页跳转 enable 布尔 是否启用 ordered 整数 顺序 导航管理 生成代码 123456name----名称icon----图标link----跳转链接ordered---顺序linkMode----跳转方式enable----是否启用 修改表单样式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;div class=&quot;modal fade&quot; id=&quot;save-window&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot;&gt; &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;form id=&quot;data-form&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;id&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt; &lt;h4 class=&quot;modal-title&quot; id=&quot;window-title&quot;&gt;Modal title&lt;/h4&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;名称&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; required class=&quot;form-control&quot; placeholder=&quot;请输入名称...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;图标&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;icon&quot; class=&quot;form-control&quot; placeholder=&quot;请输入图标...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;跳转链接&lt;/label&gt; &lt;input type=&quot;url&quot; name=&quot;link&quot; required class=&quot;form-control&quot; placeholder=&quot;请输入跳转链接...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;顺序&lt;/label&gt; &lt;input type=&quot;number&quot; name=&quot;ordered&quot; required class=&quot;form-control&quot; placeholder=&quot;请输入顺序...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;打开方式&lt;/label&gt; &lt;select required name=&quot;linkMode&quot; class=&quot;form-control&quot;&gt; &lt;option value=&quot;true&quot;&gt;在新页面打开&lt;/option&gt; &lt;option value=&quot;false&quot;&gt;在当前页打开&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;是否启用&lt;/label&gt; &lt;select required name=&quot;enable&quot; class=&quot;form-control&quot;&gt; &lt;option value=&quot;true&quot;&gt;启用&lt;/option&gt; &lt;option value=&quot;false&quot;&gt;禁止&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;modal-footer&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;关闭&lt;/button&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 修改表格展示 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667$(&#x27;#data-table&#x27;).bootstrapTable(&#123; url: &#x27;/admin/navigation/&#x27;, responseHandler: function (res) &#123; return res.data &#125;, columns: [ &#123; title: &#x27;序号&#x27;, width: 50, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return index + 1 &#125; &#125;, &#123; title: &#x27;名称&#x27;, field: &#x27;name&#x27;, formatter: function (value, row) &#123; return `&lt;a href=&quot;$&#123;row.link&#125;&quot; target=&quot;_blank&quot;&gt;$&#123;value&#125;&lt;/a&gt;` &#125; &#125;, &#123; title: &#x27;图标&#x27;, field: &#x27;icon&#x27;, formatter: function (value) &#123; return `&lt;i class=&quot;fa fa-$&#123;value&#125;&quot;&gt;&lt;/i&gt;` &#125; &#125;, &#123; title: &#x27;顺序&#x27;, width: 60, field: &#x27;ordered&#x27;, formatter: function (value, row) &#123; return `&lt;input data-id=&quot;$&#123;row.id&#125;&quot; class=&quot;form-control lw-order-input&quot; style=&quot;width: 60px;&quot; type=&quot;number&quot; value=&quot;$&#123;value&#125;&quot;&gt;` &#125; &#125;, &#123; title: &#x27;跳转方式&#x27;, field: &#x27;linkMode&#x27;, formatter: function (value) &#123; return value ? &#x27;新页面打开&#x27; : &#x27;当前页面打开&#x27; &#125; &#125;, &#123; title: &#x27;是否启用&#x27;, field: &#x27;enable&#x27;, formatter:function (value) &#123; return value?`&lt;i class=&quot;fa fa-check&quot;&gt;&lt;/i&gt;` :`&lt;i class=&quot;fa fa-close&quot;&gt;&lt;/i&gt;` &#125; &#125;, &#123; field: &#x27;id&#x27;, title: &#x27;操作&#x27;, width: 200, formatter: function (value) &#123; return `&lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-info btn-sm lw-update-btn&quot;&gt;&lt;i class=&quot;fa fa-edit&quot;&gt;&lt;/i&gt; 编辑&lt;/button&gt; &lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-danger btn-sm lw-del-btn&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; 删除&lt;/button&gt;` &#125; &#125;, ]&#125;) 保存顺序 html 12&lt;button type=&quot;button&quot; id=&quot;lw-order-btn&quot; class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot;fa fa-refresh&quot;&gt;&lt;/i&gt; 保存顺序&lt;/button&gt; js 123456789101112131415161718$(&#x27;#lw-order-btn&#x27;).on(&#x27;click&#x27;, function () &#123; let ids = &quot;&quot; $(&#x27;#data-table .lw-order-input&#x27;).each((index, ele) =&gt; ids += $(ele).data(&#x27;id&#x27;) + &quot;----&quot; + $(ele).val() + &quot;;&quot;) $.ajax(&#123; url: &#x27;/admin/navigation/order&#x27;, method: &#x27;post&#x27;, data: &#123;ids: ids&#125;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;保存成功&quot;, &#123;icon: 1&#125;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;)&#125;) controller 12345@PostMapping(&quot;/order&quot;)public Result&lt;String&gt; ordered(String ids) &#123; Arrays.stream(ids.split(&quot;;&quot;)).map(x -&gt; x.split(&quot;----&quot;)).forEach(x -&gt; service.order(Integer.parseInt(x[0]), Integer.parseInt(x[1]))); return Result.success();&#125; service 12345678public List&lt;Navigation&gt; list() &#123; return mapper.findAll(Sort.by(Sort.Direction.ASC, &quot;ordered&quot;));&#125;public void order(Integer id, Integer order) &#123; mapper.ordered(id, order);&#125; mapper 1234@Transactional@Modifying@Query(&quot;update Navigation set ordered = ?2 where id = ?1&quot;)void ordered(Integer id, Integer order); 统一异常处理 创建统一全局异常处理类 创建统一异常处理方法 返回json格式的默认错误 1234567891011121314151617181920212223package cn.kevinlu98.config;import cn.kevinlu98.common.Result;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;/** * Author: Mr丶冷文 * Date: 2022/10/10 13:33 * Email: kevinlu98@qq.com * Description: */@ControllerAdvicepublic class ExceptionConfig &#123; @ResponseBody @ExceptionHandler(Exception.class) public Result&lt;String&gt; defaultException() &#123; return Result.error(); &#125;&#125;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(十)文章管理的多条件分页查询","slug":"springbootblog/12.文章管理的多条件分页查询","date":"2022-10-06T07:21:00.000Z","updated":"2023-01-17T11:51:09.213Z","comments":true,"path":"2022/10/06/wen-zhang-guan-li-de-duo-tiao-jian-fen-ye-cha-xun.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/06/wen-zhang-guan-li-de-duo-tiao-jian-fen-ye-cha-xun.html","excerpt":"","text":"说明至此，我们已经将文章的新增及修改功能完成了，删除功能也由代码生成器给我们生成了，所以我们只剩下多条件分页查询功能了 上节遗留问题 我们上节课保存文章的时候有个问题就是我们查询对象使用了getOne方法，这个getOne方法是一个延迟查询，它不会立即查询数据库，只有当我们用到属性时才会进行查询， 查数据库看到我们的created及views字段还是null，所以我们应该用findById的方法查询对象再进行非空拷贝 123Article one = detail(article.getId());UpdateUtil.copyNullProperties(article, one);mapper.save(one); 还有就是一个小细节我们忘了设置图片在input中的回显 1&lt;input type=&quot;hidden&quot; th:value=&quot;$&#123;article.cover&#125;&quot; name=&quot;cover&quot; class=&quot;form-control&quot;&gt; 服务端分页查询定义条件查询参数 类名：ArticleSearch 属性 类型 备注 cid 整数 分类id status 整数 状态 title 字符串 标题关键字 type 整数 文章类型 pageNum 整数 页码 pageSize 整数 页大小 1234567891011121314151617181920212223242526272829303132package cn.kevinlu98.common;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;/** * Author: Mr丶冷文 * Date: 2022/10/9 21:13 * Email: kevinlu98@qq.com * Description: */@Data@Builder@AllArgsConstructor@NoArgsConstructorpublic class ArticleSearch &#123; //分类id private Integer cid; //状态 private Integer status; //标题 private String title; //文章类型 private Integer type; //页码 private Integer pageNum; //页大小 private Integer pageSize;&#125; 定义分页返回对象 类名：PageHelper 属性 类型 备注 rows 数组 数据列表 total 整数 总记录数 1234567891011121314151617181920212223242526package cn.kevinlu98.common;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import java.util.List;/** * Author: Mr丶冷文 * Date: 2022/10/9 21:15 * Email: kevinlu98@qq.com * Description: */@Data@Builder@AllArgsConstructor@NoArgsConstructorpublic class PageHelper&lt;T&gt; &#123; // 数据列表 private List&lt;T&gt; rows; // 总记录数 private Long total;&#125; Controller层逻辑 定义search接口 修改错误或未填写的pageNum及pageSize 调用service层的搜索接口 返回数据 1234567@GetMapping(&quot;/search&quot;)public Result&lt;PageHelper&lt;Article&gt;&gt; search(ArticleSearch search) &#123; search.setPageNum(Objects.isNull(search.getPageNum()) || search.getPageNum() &lt; 1 ? 1 : search.getPageNum()); search.setPageSize(Objects.isNull(search.getPageSize()) || search.getPageSize() &lt; 1 ? 1 : search.getPageSize()); PageHelper&lt;Article&gt; pageHelper = service.search(search); return Result.success(pageHelper);&#125; Service及Mapper的逻辑 构建Pageable对象添加分页信息及排序信息 让Mapper去继承JpaSpecificationExecutor复杂查询的查询使其具有复杂查询的功能 12public interface ArticleMapper extends JpaRepository&lt;Article, Integer&gt;, JpaSpecificationExecutor&lt;Article&gt; &#123;&#125; 调用findAll方法传一个匿名内部类Specification的子类并重载toPredicate方法 在toPredicate方法中创建predicateList条件数组来保存所有条件 构建条件对象并加到predicateList数组中 用and的方法拼接条件并返回 构建出PageHelper对象 123456789101112131415161718192021public PageHelper&lt;Article&gt; search(ArticleSearch search) &#123; //构建分页参数 Pageable pageable = PageRequest.of(search.getPageNum() - 1, search.getPageSize(), Sort.by(Sort.Direction.DESC, &quot;created&quot;)); Page&lt;Article&gt; articlePage = mapper.findAll((Specification&lt;Article&gt;) (root, query, builder) -&gt; &#123; List&lt;Predicate&gt; predicateList = new ArrayList&lt;&gt;(); if (Objects.nonNull(search.getCid())) &#123; predicateList.add(builder.equal(root.get(&quot;category&quot;), Category.builder().id(search.getCid()).build())); &#125; if (Objects.nonNull(search.getStatus())) &#123; predicateList.add(builder.equal(root.get(&quot;status&quot;), search.getStatus())); &#125; if (Objects.nonNull(search.getType())) &#123; predicateList.add(builder.equal(root.get(&quot;type&quot;), search.getType())); &#125; if (!StringUtils.isEmptyOrWhitespace(search.getTitle())) &#123; predicateList.add(builder.like(root.get(&quot;title&quot;), &quot;%&quot; + search.getTitle() + &quot;%&quot;)); &#125; return builder.and(predicateList.toArray(new Predicate[predicateList.size()])); &#125;, pageable); return PageHelper.&lt;Article&gt;builder().rows(articlePage.getContent()).total(articlePage.getTotalElements()).build();&#125; BSTable的分页我们可以通过设置如下属性来实现分页功能 https://bootstrap-table.com/docs/api/table-options/#sidepagination 1234567891011121314151617181920$(&#x27;#table&#x27;).bootstrapTable(&#123; pageNumber: 1, //指定默认页码 pagination: true, //开启分页 sidePagination: &#x27;server&#x27;, //使用服务端分页 pageSize: 10,//默认页大小 pageList: [10, 20, 30], //可选页大小 //bootstrap-table的分页数据是一个json，rows保存数据列表，total保存数据总数 responseHandler: function (res) &#123; return &#123; rows: res.data.rows, total: res.data.total &#125; &#125;, //这个是查询参数，就是bootstrap-table请求后端时携带的参数 queryParams: function (params) &#123; return &#123; pageNum: (params.offset / params.limit) + 1, pageSize: params.limit, &#125;&#125;) 为搜索栏加上id 123456789101112131415161718192021222324252627282930&lt;form id=&quot;lw-search-form&quot; class=&quot;form-inline&quot; style=&quot;float:right;&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;分类&lt;/label&gt; &lt;select id=&quot;lw-article-category&quot; class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option th:each=&quot;category:$&#123;categories&#125;&quot; th:value=&quot;$&#123;category.id&#125;&quot; th:text=&quot;$&#123;category.name&#125;&quot;&gt;&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;状态&lt;/label&gt; &lt;select id=&quot;lw-article-status&quot; class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;发布&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;草稿&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;类型&lt;/label&gt; &lt;select id=&quot;lw-article-type&quot; class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;文章&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;页面&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;关键字&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;lw-keywords&quot; class=&quot;form-control&quot; placeholder=&quot;请输入关键字...&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt; 搜索&lt;/button&gt;&lt;/form&gt; 修改bootstraptable的配置使其可以分页 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768$(&#x27;#data-table&#x27;).bootstrapTable(&#123; url: &#x27;/admin/article/search&#x27;, pagination: true, pageNumber: 1, sidePagination: &#x27;server&#x27;, pageSize: 10, pageList: [10, 20, 40], responseHandler: function (res) &#123; return res.data &#125;, queryParams: function (params) &#123; return &#123; pageNum: (params.offset / params.limit) + 1, pageSize: params.limit, title: $(&#x27;#lw-keywords&#x27;).val(), type: $(&#x27;#lw-article-type&#x27;).val(), status: $(&#x27;#lw-article-status&#x27;).val(), cid: $(&#x27;#lw-article-category&#x27;).val() &#125; &#125;, columns: [ &#123; title: &#x27;序号&#x27;, width: 50, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return index + 1 &#125; &#125;, &#123; title: &#x27;标题&#x27;, field: &#x27;title&#x27;, formatter: function (value, row) &#123; return `&lt;a href=&quot;/admin/write.html?id=$&#123;row.id&#125;&quot;&gt;$&#123;value&#125;&lt;/a&gt;` &#125; &#125;, &#123; title: &#x27;状态&#x27;, field: &#x27;status&#x27;, formatter: function (value) &#123; return value === 1 ? &#x27;发布&#x27; : &#x27;草稿&#x27; &#125; &#125;, &#123; title: &#x27;分类&#x27;, field: &#x27;category&#x27;, formatter: function (value) &#123; return value.name &#125; &#125;, &#123; title: &#x27;浏览量&#x27;, field: &#x27;views&#x27; &#125;, &#123; title: &#x27;创建时间&#x27;, field: &#x27;created&#x27; &#125;, &#123; field: &#x27;id&#x27;, title: &#x27;操作&#x27;, width: 100, formatter: function (value) &#123; return `&lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-danger btn-sm lw-del-btn&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; 删除&lt;/button&gt;` &#125; &#125;, ]&#125;) 阻止搜索表单提交，在其提交时重载表格 1234$(&#x27;#lw-search-form&#x27;).on(&#x27;submit&#x27;, function () &#123; $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true, pageNumber: 1&#125;); return false;&#125;) 点击文章列表的分类实现展示该分类下的文章 修改分类的展示样式 1234567&#123; title: &#x27;分类&#x27;, field: &#x27;category&#x27;, formatter: function (value) &#123; return `&lt;a class=&quot;lw-category-table&quot; href=&quot;javascript:void(0)&quot; data-id=&quot;$&#123;value.id&#125;&quot;&gt;$&#123;value.name&#125;&lt;/a&gt;` &#125;&#125; 点击文章分类时将表单的值置为空 将分类的选择框的值置为点击的值 重载表格 123456$(&quot;#data-table&quot;).on(&#x27;click&#x27;, &#x27;.lw-category-table&#x27;, function () &#123; let cid = $(this).data(&#x27;id&#x27;) $(&#x27;#lw-reset&#x27;).click() $(&#x27;#lw-article-category&#x27;).val(cid) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true, pageNumber: 1&#125;);&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(九)完成新增及编辑文章功能","slug":"springbootblog/11.完成新增及编辑文章功能","date":"2022-10-06T06:21:00.000Z","updated":"2023-01-17T11:51:09.212Z","comments":true,"path":"2022/10/06/wan-cheng-xin-zeng-ji-bian-ji-wen-zhang-gong-neng.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/06/wan-cheng-xin-zeng-ji-bian-ji-wen-zhang-gong-neng.html","excerpt":"","text":"说明经过前面几节课的学习及实战，我们已经完善了文章编辑页面，这节课我们就可以完成新增文章的功能了 新增前端部分 补充表单的name属性与文章的实体对应 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;form id=&quot;data-form&quot; class=&quot;form-horizontal&quot;&gt; &lt;div class=&quot;col-md-9&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-1 control-label&quot;&gt;标题&lt;/label&gt; &lt;div class=&quot;col-sm-11&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;title&quot; required class=&quot;form-control&quot; placeholder=&quot;请输入标题...&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-1 control-label&quot;&gt;内容&lt;/label&gt; &lt;div class=&quot;col-sm-11&quot;&gt; &lt;div id=&quot;lw-markdown-content&quot;&gt; &lt;textarea name=&quot;content&quot; style=&quot;display: none&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-1 control-label&quot;&gt;&lt;/label&gt; &lt;a class=&quot;btn btn-info&quot; href=&quot;javascript:void(0)&quot;&gt;返回列表&lt;/a&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;保存文章&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3&quot; style=&quot;background-color:#eeeeee;padding: 20px;&quot;&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 0;&quot;&gt; &lt;label&gt;缩略图&lt;/label&gt; &lt;img id=&quot;lw-upload-show&quot; style=&quot;width: 100%;border: 1px solid #cccccc;&quot; src=&quot;/static/admin/image/default.png&quot; alt=&quot;&quot;&gt; &lt;div style=&quot;text-align: right;margin-top: 10px;&quot;&gt; &lt;button class=&quot;btn btn-warning&quot; type=&quot;button&quot; id=&quot;lw-upload-btn&quot;&gt;&lt;i class=&quot;fa fa-image&quot;&gt;&lt;/i&gt; 上传图片 &lt;/button&gt; &lt;/div&gt; &lt;input type=&quot;hidden&quot; name=&quot;cover&quot; class=&quot;form-control&quot;&gt; &lt;input type=&quot;file&quot; accept=&quot;image/jpg,image/jpeg,image/png,image/gif,image/bmp&quot; id=&quot;lw-upload-file&quot; style=&quot;display: none&quot; class=&quot;form-control&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 0;&quot;&gt; &lt;label&gt;分类&lt;/label&gt; &lt;div class=&quot;radio&quot; th:each=&quot;category:$&#123;categories&#125;&quot;&gt; &lt;label&gt; &lt;input required name=&quot;cid&quot; type=&quot;radio&quot; th:value=&quot;$&#123;category.id&#125;&quot;&gt; &lt;th:block th:text=&quot;$&#123;category.name&#125;&quot;&gt;&lt;/th:block&gt; &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 10px 0 0;position:relative;&quot;&gt; &lt;label&gt;标签&lt;/label&gt; &lt;ul id=&quot;lw-select-tags&quot;&gt;&lt;/ul&gt; &lt;input type=&quot;text&quot; id=&quot;lw-tag-input&quot; class=&quot;form-control&quot;&gt; &lt;ul id=&quot;lw-unselect-tags&quot;&gt;&lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 10px 0 0;&quot;&gt; &lt;label&gt;其它设置&lt;/label&gt; &lt;div class=&quot;has-error&quot;&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;allowComment&quot; checked value=&quot;1&quot;&gt; 允许评论 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;has-error&quot;&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;status&quot; value=&quot;2&quot;&gt; 保存草稿 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;has-error&quot;&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input name=&quot;type&quot; type=&quot;checkbox&quot; value=&quot;2&quot;&gt; 保存为页面 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 标签搜索的遗留问题 123456789101112131415161718192021222324selectTags.add = function (key) &#123; if (key) &#123; if (!selectTags[key]) &#123; if (unSelectTags[key]) &#123; selectTags[key] = unSelectTags[key] delete unSelectTags[key] &#125; else &#123; selectTags[key] = &#123;name: key&#125; &#125; console.log(key); $(&#x27;#lw-select-tags&#x27;).append(`&lt;li data-value=&quot;$&#123;key&#125;&quot;&gt;$&#123;key&#125; &lt;a href=&quot;javascript:void(0)&quot;&gt;x&lt;/a&gt;&lt;/li&gt;`) &#125; $(&#x27;#lw-tag-input&#x27;).val(&quot;&quot;) $(&#x27;#lw-unselect-tags&#x27;).html(&#x27;&#x27;) &#125;&#125;$(&#x27;#lw-tag-input&#x27;).on(&#x27;keydown&#x27;, function (e) &#123; if (e.keyCode === 13) &#123; selectTags.add($(this).val()) &#125;&#125;)$(&#x27;#lw-unselect-tags&#x27;).on(&#x27;click&#x27;, &#x27;li&#x27;, function () &#123; selectTags.add($(this).text())&#125;) 拦截表单提交事件，构建我欲提交的数据 发送ajax到后端进行表单的提交 1234567891011121314151617181920212223242526$(&#x27;#data-form&#x27;).on(&#x27;submit&#x27;, function () &#123; // a=1&amp;b=2 表单 //a=1&amp;b=2&amp;category.id=1&amp;tags[]=a&amp;tags[]=2 // &#123;a:1,b:2&#125; json let data = $(this).serializeJson() data[&#x27;category&#x27;] = &#123;id: data[&#x27;cid&#x27;]&#125; data[&#x27;tags&#x27;] = selectTags.toList() console.log(data); $.ajax(&#123; url: &#x27;/admin/article/&#x27;, method: &#x27;post&#x27;, data: JSON.stringify(data), contentType: &#x27;application/json&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&#x27;保存成功&#x27;, &#123;icon: 1, time: 500&#125;, function () &#123; location.href = &#x27;/admin/article.html&#x27; &#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) return false;&#125;) 后端部分 补充前端没有传过来的属性 将数据库中没有的标签进行新增操作 执行保存操作 123456789101112131415161718192021222324@Transactionalpublic void save(Article article) &#123; article.setUpdated(new Date()); if (Objects.isNull(article.getType())) &#123; article.setType(Article.TYPE_ARTICLE); &#125; if (Objects.isNull(article.getStatus())) &#123; article.setStatus(Article.STATUS_PUBLISH); &#125; if (Objects.isNull(article.getAllowComment())) &#123; article.setAllowComment(Article.COMMENT_DISABLE); &#125; if (Objects.isNull(article.getId())) &#123; article.setCreated(new Date()); article.setViews(0); &#125; // 将数据库中不存在的标签先执行插入操作 article.setTags(article.getTags().stream().peek(x -&gt; &#123; if (Objects.isNull(x.getId())) &#123; x.setId(tagMapper.save(x).getId()); &#125; &#125;).collect(Collectors.toList())); mapper.save(article);&#125; 编辑 修改列表页面的为点击标题跳转到文章的编辑页面 1234567891011121314151617181920212223242526272829303132333435363738394041424344columns: [ &#123; title: &#x27;序号&#x27;, width: 50, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return index + 1 &#125; &#125;, &#123; title: &#x27;标题&#x27;, field: &#x27;title&#x27;, formatter: function (value, row) &#123; return `&lt;a href=&quot;/admin/write.html?id=$&#123;row.id&#125;&quot;&gt;$&#123;value&#125;&lt;/a&gt;` &#125; &#125;, &#123; title: &#x27;状态&#x27;, field: &#x27;status&#x27; &#125;, &#123; title: &#x27;分类&#x27;, field: &#x27;category&#x27;, formatter:function (value) &#123; return value.name &#125; &#125;, &#123; title: &#x27;浏览量&#x27;, field: &#x27;views&#x27; &#125;, &#123; title: &#x27;创建时间&#x27;, field: &#x27;created&#x27; &#125;, &#123; field: &#x27;id&#x27;, title: &#x27;操作&#x27;, width: 100, formatter: function (value) &#123; return `&lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-danger btn-sm lw-del-btn&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; 删除&lt;/button&gt;` &#125; &#125;,] 修改wirte路由，当参数id不为空时查询文章详情 123456789101112131415private final ArticleService articleService;public AdminController(CategoryService categoryService, ArticleService articleService) &#123; this.categoryService = categoryService; this.articleService = articleService;&#125;@GetMapping(&quot;/write.html&quot;)public String write(@RequestParam(required = false) Integer id, Model model) &#123; List&lt;Category&gt; categories = categoryService.list(); Article article = Objects.isNull(id) ? Article.builder().allowComment(1).build() : articleService.detail(id); model.addAttribute(&quot;categories&quot;, categories); model.addAttribute(&quot;article&quot;, article); return &quot;admin/write&quot;;&#125; 为write页面设置初始值 123456789101112131415161718192021222324252627282930&lt;form class=&quot;form-inline&quot; style=&quot;float:right;&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;分类&lt;/label&gt; &lt;select class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option th:each=&quot;category:$&#123;categories&#125;&quot; th:value=&quot;$&#123;category.id&#125;&quot; th:text=&quot;$&#123;category.name&#125;&quot;&gt;&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;状态&lt;/label&gt; &lt;select class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;发布&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;草稿&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;类型&lt;/label&gt; &lt;select class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;文章&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;页面&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;关键字&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入关键字...&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt; 搜索&lt;/button&gt;&lt;/form&gt; 1234567891011121314$.ajax(&#123; url: &#x27;/admin/tag/&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; res.data.forEach(x =&gt; unSelectTags[x.name] = x) $(&#x27;#lw-select-tags li&#x27;).each((index, ele) =&gt; &#123; let key = $(ele).data(&#x27;value&#x27;) console.log(key); selectTags[key] = unSelectTags[key] delete unSelectTags[key] &#125;) console.log(unSelectTags); &#125;&#125;) 修改service层的save方法，当id不为空时执行非空拷贝操作且更新文章的更新时间 123456789101112131415161718192021222324252627public void save(Article article) &#123; article.setUpdated(new Date()); if (Objects.isNull(article.getType())) &#123; article.setType(Article.TYPE_ARTICLE); &#125; if (Objects.isNull(article.getStatus())) &#123; article.setStatus(Article.STATUS_PUBLISH); &#125; if (Objects.isNull(article.getAllowComment())) &#123; article.setAllowComment(Article.COMMENT_DISABLE); &#125; // 将数据库中不存在的标签先执行插入操作 article.setTags(article.getTags().stream().peek(x -&gt; &#123; if (Objects.isNull(x.getId())) &#123; x.setId(tagMapper.save(x).getId()); &#125; &#125;).collect(Collectors.toList())); if (Objects.isNull(article.getId())) &#123; article.setCreated(new Date()); article.setViews(0); mapper.save(article); &#125; else &#123; Article one = mapper.getOne(article.getId()); UpdateUtil.copyNullProperties(article, one); mapper.save(one); &#125;&#125; 工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package cn.kevinlu98.utils;import org.springframework.beans.BeanUtils;import org.springframework.beans.BeanWrapper;import org.springframework.beans.BeanWrapperImpl;import java.beans.PropertyDescriptor;import java.util.HashSet;import java.util.Objects;import java.util.Set;/** * 更新工具类(忽略为null的字段) */public class UpdateUtil &#123; /** * 所有为空值的属性都不copy * @param source * @param target */ public static void copyNullProperties(Object source, Object target) &#123; BeanUtils.copyProperties(source, target, getNullField(source)); &#125; /** * 获取属性中为空的字段 * * @param target * @return */ private static String[] getNullField(Object target) &#123; BeanWrapper beanWrapper = new BeanWrapperImpl(target); PropertyDescriptor[] propertyDescriptors = beanWrapper.getPropertyDescriptors(); Set&lt;String&gt; notNullFieldSet = new HashSet&lt;&gt;(); if (propertyDescriptors.length &gt; 0) &#123; for (PropertyDescriptor p : propertyDescriptors) &#123; String name = p.getName(); Object value = beanWrapper.getPropertyValue(name); if (Objects.isNull(value)) &#123; notNullFieldSet.add(name); &#125; &#125; &#125; String[] notNullField = new String[notNullFieldSet.size()]; return notNullFieldSet.toArray(notNullField); &#125;&#125;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(八)为文章加入Markdown支持","slug":"springbootblog/10.为文章加入Markdown支持","date":"2022-10-05T20:21:00.000Z","updated":"2023-01-17T11:51:09.212Z","comments":true,"path":"2022/10/06/wei-wen-zhang-jia-ru-zhi-chi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/06/wei-wen-zhang-jia-ru-zhi-chi.html","excerpt":"","text":"Markdown说明都这个年代了，正经人写文章谁还用富文本编辑器呀，现在都是makrdown了，所以我们的博客也要采用markdown来排版文章 支持库：editor.md (这应该是目前最好用的js版markdown编辑器了) 集成editor.md 删减下载的文件将其考到我们的项目中(这点官方不太友好，给了那了大的一个包，里面大部分东西都是没用的) 引用css和js文件 12&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/editormd/css/editormd.min.css&quot;&gt;&lt;script src=&quot;/static/plugin/editormd/editormd.js&quot;&gt;&lt;/script&gt; 按照editor.md的说明我们来创建存在编辑器的容器 123&lt;div id=&quot;lw-markdown-content&quot;&gt; &lt;textarea style=&quot;display: none&quot;&gt;&lt;/textarea&gt;&lt;/div&gt; 初始化编辑器 1234editormd(&#x27;lw-markdown-content&#x27;, &#123; height: 800, path:&#x27;/static/plugin/editormd/lib/&#x27;&#125;) 配置工具栏的图标 123toolbarIcons: [&quot;undo&quot;, &quot;redo&quot;, &quot;|&quot;, &quot;bold&quot;, &quot;del&quot;, &quot;italic&quot;, &quot;quote&quot;, &quot;|&quot;, &quot;h1&quot;, &quot;h2&quot;, &quot;h3&quot;, &quot;h4&quot;, &quot;h5&quot;, &quot;h6&quot;, &quot;|&quot;, &quot;list-ul&quot;, &quot;list-ol&quot;, &quot;hr&quot;, &quot;|&quot;, &quot;link&quot;, &quot;image&quot;, &quot;code&quot;, &quot;code-block&quot;, &quot;table&quot;, &quot;emoji&quot;, &quot;search&quot;, &quot;|&quot;, &quot;watch&quot;, &quot;preview&quot;, &quot;fullscreen&quot;] 取消工具栏滚动浮动 1toolbarAutoFixed: false, 设置编辑窗口的z-index 123456onfullscreen: function () &#123; this.editor.css(&#x27;z-index&#x27;, 120)&#125;,onfullscreenExit:function () &#123; this.editor.css(&#x27;z-index&#x27;, 10)&#125; 文件上传功能改造 java部分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package cn.kevinlu98.controller;import cn.kevinlu98.common.Result;import cn.kevinlu98.enums.ResultEnum;import lombok.AllArgsConstructor;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Objects;import java.util.UUID;/** * Author: Mr丶冷文 * Date: 2022/10/8 11:24 * Email: kevinlu98@qq.com * Description: */@Slf4j@RestController@RequestMapping(&quot;/admin/&quot;)public class UploadController &#123; @Value(&quot;$&#123;upload.base-dir&#125;&quot;) private String baseDir; private static final DateFormat DATA_FORMAT = new SimpleDateFormat(&quot;yyyyMMdd/&quot;); /** * editor.md的规定的返回格式 */ @Data @AllArgsConstructor static class MDResult &#123; private Integer success; private String message; private String url; &#125; @PostMapping(&quot;/md/upload&quot;) public MDResult mdUpload(@RequestParam(value = &quot;editormd-image-file&quot;) MultipartFile file) &#123; try &#123; String url = uploadFile(file); return new MDResult(1, &quot;上传成功&quot;, url); &#125; catch (IOException e) &#123; log.error(e.getMessage(), e); return new MDResult(0, ResultEnum.RESULT_UPLOAD_FAIL.getMessage(), null); &#125; &#125; @PostMapping(&quot;/upload&quot;) public Result&lt;String&gt; upload(@RequestParam MultipartFile file) &#123; try &#123; String url = uploadFile(file); return Result.success(url); &#125; catch (IOException e) &#123; log.error(e.getMessage(), e); return Result.error(ResultEnum.RESULT_UPLOAD_FAIL); &#125; &#125; private String uploadFile(MultipartFile file) throws IOException &#123; if (!baseDir.endsWith(&quot;/&quot;)) &#123; baseDir += &quot;/&quot;; &#125; // 生成时间分区的目录 String dateName = DATA_FORMAT.format(new Date()); String folderPath = baseDir + dateName; File folder = new File(folderPath); if (!folder.isDirectory()) &#123; folder.mkdirs(); &#125; //取上传目录的绝对路径 String absPath = folder.getAbsolutePath().replace(&quot;./&quot;, &quot;&quot;) + &quot;/&quot;; //取文件后缀 String suffix = Objects.requireNonNull(file.getOriginalFilename()).substring(file.getOriginalFilename().lastIndexOf(&quot;.&quot;), file.getOriginalFilename().length()); //生成文件名 String filename = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;) + suffix; //上传到服务器 file.transferTo(new File(absPath + &quot;/&quot; + filename)); return &quot;/upload/&quot; + dateName + &quot;/&quot; + filename; &#125;&#125; js部分 123imageUpload : true,imageFormats : [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;],imageUploadURL : &quot;/admin/md/upload&quot;, Emoji表情处理 emoji下载：https://github.com/SemiWarm/SemiWarmAdminPhotos/blob/master/emoji.zip 将下载好的文件解压到项目的/static/plugin/editormd/images/下 1emoji:true, 修改editormd.js中emoji的路径为本地路径 1234editormd.emoji = &#123; path : &quot;/static/plugin/editormd/images/emoji/&quot;, ext : &quot;.png&quot;&#125;; 文章页的缩略图上传 HTML部分 123456789&lt;img id=&quot;lw-upload-show&quot; style=&quot;width: 100%;border: 1px solid #cccccc;&quot; src=&quot;/static/admin/image/default.png&quot; alt=&quot;&quot;&gt;&lt;div style=&quot;text-align: right;margin-top: 10px;&quot;&gt; &lt;button class=&quot;btn btn-warning&quot; type=&quot;button&quot; id=&quot;lw-upload-btn&quot;&gt;&lt;i class=&quot;fa fa-image&quot;&gt;&lt;/i&gt; 上传图片 &lt;/button&gt;&lt;/div&gt;&lt;input type=&quot;hidden&quot; name=&quot;cover&quot; class=&quot;form-control&quot;&gt;&lt;input type=&quot;file&quot; id=&quot;lw-upload-file&quot; style=&quot;display: none&quot; class=&quot;form-control&quot;&gt; JS部分 1234567891011121314151617181920212223242526$(&#x27;#lw-upload-btn&#x27;).on(&#x27;click&#x27;, function () &#123; $(&#x27;#lw-upload-file&#x27;).click()&#125;)$(&#x27;#lw-upload-file&#x27;).on(&#x27;change&#x27;, function () &#123; let file = this.files[0] let fd = new FormData(); fd.append(&#x27;file&#x27;, file); $.ajax(&#123; url: &#x27;/admin/upload&#x27;, method: &#x27;post&#x27;, data: fd, dataType: &#x27;json&#x27;, processData: false, contentType: false, success: res =&gt; &#123; if (res.code === 200) &#123; $(&#x27;#lw-upload-show&#x27;).attr(&#x27;src&#x27;, res.data); $(&#x27;#data-form [name=cover]&#x27;).val(res.data); &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;)&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(七)编辑文章的标签自动提示功能","slug":"springbootblog/9.编辑文章的标签自动提示功能","date":"2022-10-04T20:21:00.000Z","updated":"2023-01-17T11:51:09.226Z","comments":true,"path":"2022/10/05/bian-ji-wen-zhang-de-biao-qian-zi-dong-ti-shi-gong-neng.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/05/bian-ji-wen-zhang-de-biao-qian-zi-dong-ti-shi-gong-neng.html","excerpt":"","text":"前言我们上节课完成了文章编辑页面的搭建，但标签部分我们还没有做，我们可以看到演示项目中标签这里是有个输入提示，而且我们也能从已选择的标签中取它取消选择，这节课我们就来完成这部分功能的开发 标签数据 插入一些标签的测试数据 12345678910111213141516171819202122232425262728293031insert into blog_tag (name)values (&#x27;emlog相关&#x27;), (&#x27;typecho相关&#x27;), (&#x27;网站相关&#x27;), (&#x27;Linux学习&#x27;), (&#x27;Mac相关&#x27;), (&#x27;freedom&#x27;), (&#x27;emlog&#x27;), (&#x27;主题&#x27;), (&#x27;腾讯cos&#x27;), (&#x27;cos&#x27;), (&#x27;图床&#x27;), (&#x27;冷文图床&#x27;), (&#x27;私人图床&#x27;), (&#x27;markdown&#x27;), (&#x27;插件&#x27;), (&#x27;欢迎页&#x27;), (&#x27;gitee&#x27;), (&#x27;登录注册&#x27;), (&#x27;其它&#x27;), (&#x27;教程下载&#x27;), (&#x27;itjc8&#x27;), (&#x27;linux&#x27;), (&#x27;虚拟机&#x27;), (&#x27;静态IP&#x27;), (&#x27;独立下载&#x27;), (&#x27;typecho&#x27;), (&#x27;自由之风&#x27;), (&#x27;评论通知&#x27;), (&#x27;点赞&#x27;), (&#x27;非插件&#x27;) 思路及实现 准备两个字典，一个存放已选中的标签，一个存放未选中的标签 123456789101112// 选中标签let selectTags = &#123;&#125;//未选中标签let unSelectTags = &#123;&#125;$.ajax(&#123; url: &#x27;/admin/tag/&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; res.data.forEach(x =&gt; unSelectTags[x.name] = x) &#125;&#125;) 准备一个两个ul，一个存在选中标签列表，一个存放提示的标签列表 存放提示的标签列表给一个绝对定位让其在标签输入框的下方 CSS 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;style&gt; #lw-select-tags &#123; border: 1px solid #cccccc; padding: 0; border-radius: 2px; list-style: none; &#125; #lw-select-tags li &#123; background-color: #ffffff; padding: 6px 10px; margin-bottom: 2px; position: relative; &#125; #lw-select-tags li a &#123; position: absolute; right: 10px; text-decoration: none; &#125; #lw-unselect-tags &#123; list-style: none; padding: 0; background-color: #fff; border: 1px solid #cccccc; position: absolute; width: 100%; z-index: 9; &#125; #lw-unselect-tags li &#123; border-bottom: 1px solid #cccccc; padding: 10px; &#125; #lw-unselect-tags li:hover &#123; background-color: #5bc0de; cursor: pointer; &#125; #lw-unselect-tags li:last-child &#123; border-bottom: none; &#125;&lt;/style&gt; Html 123456789101112&lt;div class=&quot;form-group&quot; style=&quot;margin: 10px 0 0;position:relative;&quot;&gt; &lt;label&gt;标签&lt;/label&gt; &lt;ul id=&quot;lw-select-tags&quot;&gt; &lt;li&gt;测试标签 &lt;a href=&quot;javascript:void(0)&quot;&gt;x&lt;/a&gt;&lt;/li&gt; &lt;li&gt;测试标签 &lt;a href=&quot;javascript:void(0)&quot;&gt;x&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt; &lt;ul id=&quot;lw-unselect-tags&quot;&gt; &lt;li&gt;测试标签&lt;/li&gt; &lt;li&gt;测试标签&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 监听键盘的输入事件，在输入时搜索未选中的标签列表，将匹配到的标签显示在ul里 123456789101112131415unSelectTags.search = function (keyword) &#123; let result = [] Object.keys(unSelectTags).forEach(x =&gt; &#123; if (x.indexOf(keyword) &gt; -1 &amp;&amp; typeof unSelectTags[x] !== &#x27;function&#x27;) &#123; result.push(unSelectTags[x]) &#125; &#125;) return result;&#125;$(&#x27;#lw-tag-input&#x27;).on(&#x27;input&#x27;, function () &#123; let ust = $(&#x27;#lw-unselect-tags&#x27;) ust.html(&#x27;&#x27;) unSelectTags.search($(this).val()).forEach(x =&gt; ust.append(`&lt;li&gt;$&#123;x.name&#125;&lt;/li&gt;`))&#125;) 给body一个点击事件，点击body时清空搜索列表的内容 123$(&#x27;body&#x27;).on(&#x27;click&#x27;,function () &#123; $(&#x27;#lw-unselect-tags&#x27;).html(&#x27;&#x27;)&#125;) 给提示标签列表里的标签加上点击事件，点击里将标签的保存到已选中的标签列表中，同时给将其加入选中列表的ul里 123456$(&#x27;#lw-unselect-tags&#x27;).on(&#x27;click&#x27;, &#x27;li&#x27;, function () &#123; let key = $(this).text() selectTags[key] = unSelectTags[key] delete unSelectTags[key] $(&#x27;#lw-select-tags&#x27;).append(`&lt;li&gt;$&#123;key&#125; &lt;a href=&quot;javascript:void(0)&quot;&gt;x&lt;/a&gt;&lt;/li&gt;`)&#125;) 给选中列表的ul中的li下a一个点击事件，点击时删除该元素且从选中标签列表中删除标签，同时在未选中标签列表中加入标签 123456789$(&#x27;#lw-select-tags&#x27;).on(&#x27;click&#x27;, &#x27;a&#x27;, function () &#123; let tagLi = $(this).parent() let key = tagLi.data(&#x27;value&#x27;) if (selectTags[key].id) &#123; unSelectTags[key] = selectTags[key] delete selectTags[key] &#125; tagLi.remove()&#125;) 给表单一个监听回车的事件，我们按下回车后直接返回false，阻止表单提交 12345$(&#x27;#data-form&#x27;).on(&#x27;keydown&#x27;, function (e) &#123; if (e.keyCode===13)&#123; return false; &#125;&#125;) 给标签输入框一个监听回车的事件，我们按下回车后直接把输入框的内容加到已选中的标签列表中，同时给将其加入选中列表的ul里 12345678910111213141516171819$(&#x27;#lw-tag-input&#x27;).on(&#x27;keydown&#x27;, function (e) &#123; if (e.keyCode === 13) &#123; let key = $(this).val() if (key) &#123; if (!selectTags[key]) &#123; if (unSelectTags[key]) &#123; selectTags[key] = unSelectTags[key] delete unSelectTags[key] &#125; else &#123; selectTags[key] = &#123;name: key&#125; &#125; console.log(key); $(&#x27;#lw-select-tags&#x27;).append(`&lt;li data-value=&quot;$&#123;key&#125;&quot;&gt;$&#123;key&#125; &lt;a href=&quot;javascript:void(0)&quot;&gt;x&lt;/a&gt;&lt;/li&gt;`) &#125; $(this).val(&quot;&quot;) $(&#x27;#lw-unselect-tags&#x27;).html(&#x27;&#x27;) &#125; &#125;&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]},{"title":"(六)文章管理准备工作","slug":"springbootblog/8.文章管理准备工作","date":"2022-10-04T19:21:00.000Z","updated":"2023-01-17T11:51:09.225Z","comments":true,"path":"2022/10/05/wen-zhang-guan-li-zhun-bei-gong-zuo.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/05/wen-zhang-guan-li-zhun-bei-gong-zuo.html","excerpt":"","text":"说明文章管理相比于其它部分来说相对复杂一些，首先是文章管理的搜索，这里是一个多条件且带分页功能的查询，而且还涉及到多张表的操作，而且由于文章的属性比较多，所以我们不能像以前那样在弹窗中完成更新和删除的操作，而是在新打开的页面完成该操作，大家再看看演示项目中的新增文章的操作就知道了 实体及数据库由于文章这次会涉及到分类表、标签表及评论表，所以我们这次就一次性把这些表全部都做一个创建 标签表 类名：Tag 表名：blog_tag 属性 类型 备注 id 整数 主键 name 字符串 名称 评论表 类名：Comment 表名：blog_comment 属性 类型 备注 id 整数 主键 nickname 字符串 评论者的昵称 email 字符串 评论者的邮箱 url 字符串 评论者的主页 content 字符串 评论内容 view 布尔型 是否已读 pid 整数 评论的父评论 created 时间 评论创建时间 文章表 类名：Article 表名：blog_article 属性 类型 备注 id 整数 主键 title 字符串 标题 content 字符串 文章内容 文章内容此时255的varchat可能就不够了，应该用数据库的text保存 cover 字符串 缩略图 type 整数 类型：1.文章；2.页面 status 整数 状态：1.发布；2.草稿 allowComment 整数 允许评论：1.允许；2.不允许 views 整数 浏览量 created 时间 创建时间 updated 时间 更新时间 关联关系 关联关系 文章到标签是一个多对多的状态，标签到文章是一个多对多的状态 文章到分类是一个多对一的状态，分类到文章是一个一对多的状态 文章到评论是一个一对多的状态，评论到文章是一个多对一的状态 jpa的关联注解 @ManyToOne：多对一 @ManyToMany：多对多 @OneToMany：一对多 教程用到的新注解 @Transient：忽略属性为数据库的列 @Temporal：指定数据库列的时间类型 @Lob：将String映射为数据库中的text类型 @Basic：该数据什么时候加载 代码生成 标签 1name----名称 评论 1234567nickname----评论者的昵称email----评论者的邮箱url----评论者的主页content----评论内容view----是否已读pid----评论的父评论created----评论创建时间 文章 123456789title----标题content----文章内容cover----缩略图type----类型status----状态allowComment----允许评论views----浏览量created----创建时间updated----更新时间 代码完善 给生成的代码加上关联关系 文章 12345678910111213141516171819202122232425262728293031323334@Id@GeneratedValue(strategy = GenerationType.IDENTITY)private Integer id; //主键private String title; //标题@Lob@Basic(fetch = FetchType.LAZY)@ToString.Exclude private String content; //文章内容private String cover; //缩略图private Integer type; //类型private Integer status; //状态private Integer allowComment; //允许评论private Integer views; //浏览量@Temporal(TemporalType.TIMESTAMP)private Date created; //创建时间@Temporal(TemporalType.TIMESTAMP)private Date updated; //更新时间@ManyToMany@ToString.Exclude private List&lt;Tag&gt; tags;@ManyToOneprivate Category category; 评论 12345678910111213141516171819202122@Id@GeneratedValue(strategy = GenerationType.IDENTITY)private Integer id; //主键private String nickname; //评论者的昵称private String email; //评论者的邮箱private String url; //评论者的主页private String content; //评论内容private Boolean view; //是否已读private Integer pid; //评论的父评论//指定数据库列的类型为时间戳@Temporal(TemporalType.TIMESTAMP)private Date created; //评论创建时间@ManyToOneprivate Article article; 在删除文章管理页的多余的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344$(&#x27;#data-table&#x27;).bootstrapTable(&#123; url: &#x27;/admin/article/&#x27;, responseHandler: function (res) &#123; return res.data &#125;, columns: [ &#123; title: &#x27;序号&#x27;, width: 50, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return index + 1 &#125; &#125;, &#123; title: &#x27;标题&#x27;, field: &#x27;title&#x27; &#125;, &#123; title: &#x27;状态&#x27;, field: &#x27;status&#x27; &#125;, &#123; title: &#x27;分类&#x27;, field: &#x27;category&#x27;, &#125;, &#123; title: &#x27;浏览量&#x27;, field: &#x27;views&#x27; &#125;, &#123; title: &#x27;创建时间&#x27;, field: &#x27;created&#x27; &#125;, &#123; field: &#x27;id&#x27;, title: &#x27;操作&#x27;, width: 100, formatter: function (value) &#123; return `&lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-danger btn-sm lw-del-btn&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; 删除&lt;/button&gt;` &#125; &#125;, ]&#125;) 在文章管理页顶部加入多条件搜索的工具条 123456789101112131415161718192021222324252627282930313233&lt;div class=&quot;btn-group&quot; role=&quot;group&quot; style=&quot;margin-bottom: 20px;&quot; aria-label=&quot;...&quot;&gt; &lt;a th:href=&quot;@&#123;/admin/write.html&#125;&quot; class=&quot;btn btn-success&quot;&gt;&lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 新增&lt;/a&gt;&lt;/div&gt;&lt;form class=&quot;form-inline&quot; style=&quot;float:right;&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;分类&lt;/label&gt; &lt;select class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option th:each=&quot;category:$&#123;categories&#125;&quot; th:value=&quot;$&#123;category.id&#125;&quot; th:text=&quot;$&#123;category.name&#125;&quot;&gt;&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;状态&lt;/label&gt; &lt;select class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;发布&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;草稿&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;类型&lt;/label&gt; &lt;select class=&quot;form-control&quot; style=&quot;width: 100px;&quot;&gt; &lt;option value=&quot;&quot;&gt;全部&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;文章&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;页面&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;关键字&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入关键字...&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt; 搜索&lt;/button&gt;&lt;/form&gt; 新增&#x2F;编辑文章页 利用Bootstrap完成页面布局，为左右布局 在左侧完成标题与文章的输入 在右侧完成其它选项的输入 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt; &lt;head th:replace=&quot;admin/common::header(~&#123;::title&#125;,~&#123;&#125;,~&#123;&#125;)&quot;&gt; &lt;title&gt;新增文章&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;th:block th:include=&quot;admin/common::nav(&#x27;article&#x27;)&quot;&gt;&lt;/th:block&gt; &lt;div class=&quot;container lw-main&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;form class=&quot;form-horizontal&quot;&gt; &lt;div class=&quot;col-md-9&quot;&gt; &lt;h3 style=&quot;margin-bottom: 10px;&quot;&gt;创建新的文章&lt;/h3&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-1 control-label&quot;&gt;标题&lt;/label&gt; &lt;div class=&quot;col-sm-11&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入标题...&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-1 control-label&quot;&gt;内容&lt;/label&gt; &lt;div class=&quot;col-sm-11&quot;&gt; &lt;textarea style=&quot;resize: none;height: 700px;&quot; class=&quot;form-control&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-1 control-label&quot;&gt;&lt;/label&gt; &lt;a class=&quot;btn btn-info&quot; href=&quot;javascript:void(0)&quot;&gt;返回列表&lt;/a&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;保存文章&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3&quot; style=&quot;background-color:#eeeeee;padding: 20px;&quot;&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 0;&quot;&gt; &lt;label&gt;缩略图&lt;/label&gt; &lt;img style=&quot;width: 100%;border: 1px solid #cccccc;&quot; src=&quot;/static/admin/image/default.png&quot; alt=&quot;&quot;&gt; &lt;div style=&quot;text-align: right;margin-top: 10px;&quot;&gt; &lt;button class=&quot;btn btn-warning&quot;&gt;&lt;i class=&quot;fa fa-image&quot;&gt;&lt;/i&gt; 上传图片&lt;/button&gt; &lt;/div&gt; &lt;input type=&quot;hidden&quot; class=&quot;form-control&quot;&gt; &lt;input type=&quot;file&quot; style=&quot;display: none&quot; class=&quot;form-control&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 0;&quot;&gt; &lt;label&gt;分类&lt;/label&gt; &lt;div class=&quot;radio&quot; th:each=&quot;category:$&#123;categories&#125;&quot;&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; th:value=&quot;$&#123;category.id&#125;&quot; &gt; &lt;th:block th:text=&quot;$&#123;category.name&#125;&quot;&gt;&lt;/th:block&gt; &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 10px 0 0;&quot;&gt; &lt;label&gt;标签&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; style=&quot;margin: 10px 0 0;&quot;&gt; &lt;label&gt;其它设置&lt;/label&gt; &lt;div class=&quot;has-error&quot;&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; value=&quot;option1&quot;&gt; 允许评论 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;has-error&quot;&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; value=&quot;option1&quot;&gt; 保存草稿 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;has-error&quot;&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; value=&quot;option1&quot;&gt; 保存为页面 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;th:block th:include=&quot;admin/common::footer&quot;&gt;&lt;/th:block&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(五)轮播图管理与文件上传(下)","slug":"springbootblog/7.轮播图管理与文件上传","date":"2022-10-03T19:21:00.000Z","updated":"2023-01-17T11:51:09.225Z","comments":true,"path":"2022/10/04/lun-bo-tu-guan-li-yu-wen-jian-shang-chuan.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/04/lun-bo-tu-guan-li-yu-wen-jian-shang-chuan.html","excerpt":"","text":"上节遗留问题我们发现我们在上传文件时是什么文件都可以上传的，我们其实可以在&lt;input type=&#39;file&#39;&gt;的文件上传框上加上accept属性就可以限制上传文件的类型了 12&lt;input type=&quot;file&quot; accept=&quot;image/jpg,image/jpeg,image/png,image/gif,image/bmp&quot; id=&quot;lw-upload&quot; style=&quot;display: none&quot;&gt; 排序问题默认排序我们可以看到轮播图的属性里有个字段叫排序字段，我们则希望在查询时默认以该字段做排序然后正序输出 123public List&lt;Banner&gt; list() &#123; return mapper.findAll(Sort.by(Sort.Direction.ASC, &quot;ordered&quot;));&#125; 一键保存排序 在每个排序的input上加上data-id的属性记录id值并为其加上统一的类名 1234567&#123; title: &#x27;顺序&#x27;, field: &#x27;ordered&#x27;, formatter: function (value, row) &#123; return `&lt;input data-id=&quot;$&#123;row.id&#125;&quot; class=&quot;form-control lw-order-input&quot; style=&quot;width: 60px;&quot; type=&quot;number&quot; value=&quot;$&#123;value&#125;&quot;&gt;` &#125;&#125;, 点击保存顺序按钮时我们将所有的id及顺序拼接成如下格式字符串传给后端 1id1----顺序1;id2----顺序2;id3----顺序13 123456789101112131415161718$(&#x27;#lw-order-btn&#x27;).on(&#x27;click&#x27;, function () &#123; let ids = &quot;&quot; $(&#x27;#data-table .lw-order-input&#x27;).each((index, ele) =&gt; ids += $(ele).data(&#x27;id&#x27;) + &quot;----&quot; + $(ele).val() + &quot;;&quot;) $.ajax(&#123; url: &#x27;/admin/banner/order&#x27;, method: &#x27;post&#x27;, data: &#123;ids: ids&#125;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;保存成功&quot;, &#123;icon: 1&#125;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;)&#125;) 在controller定义保存排序的接口并解析数据 12345@PostMapping(&quot;/order&quot;)public Result&lt;String&gt; ordered(String ids) &#123; Arrays.stream(ids.split(&quot;;&quot;)).map(x -&gt; x.split(&quot;----&quot;)).forEach(x -&gt; service.order(Integer.parseInt(x[0]), Integer.parseInt(x[1]))); return Result.success();&#125; 在mapper层加入更新排序字段的HQL语句 1234@Transactional@Modifying@Query(&quot;update Banner set ordered = ?2 where id = ?1&quot;)void ordered(Integer id, Integer order); 在service层调用mapper 123public void order(Integer id, Integer order) &#123; mapper.ordered(id, order);&#125;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(五)轮播图管理与文件上传(上)","slug":"springbootblog/6.轮播图管理与文件上传1","date":"2022-10-03T18:21:00.000Z","updated":"2023-01-17T11:51:09.224Z","comments":true,"path":"2022/10/04/lun-bo-tu-guan-li-yu-wen-jian-shang-chuan.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/04/lun-bo-tu-guan-li-yu-wen-jian-shang-chuan.html","excerpt":"","text":"实体与数据库 类名：Banner 表名：blog_banner 属性 类型 备注 id 整数 主键 title 字符串 标题 link 字符串 跳转链接 cover 字符串 图片 ordered 整数 顺序 summary 字符串 描述信息 代码生成属性列表12345title----标题link----跳转链接cover----图片ordered----顺序summary----描述信息 实体代码抽取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package cn.kevinlu98.pojo;import lombok.Getter;import lombok.RequiredArgsConstructor;import lombok.Setter;import lombok.ToString;import org.hibernate.Hibernate;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;import java.util.Objects;/** * Author: Mr丶冷文 * Date: 2022/10/7 15:45 * Email: kevinlu98@qq.com * Description: */@Getter@Setter@ToString@RequiredArgsConstructor@Entity@Table(name = &quot;blog_##&#123;name-en&#125;##&quot;)public class ##&#123;name-en-up&#125;## &#123; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer ##&#123;id&#125;##; //主键 ##&#123;each&#125;## private String ##&#123;ename&#125;##; //##&#123;zname&#125;## ##&#123;endeach&#125;## @Override public boolean equals(Object o) &#123; if (this == o) return true; if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false; ##&#123;name-en-up&#125;## ##&#123;name-en&#125;## = (##&#123;name-en-up&#125;##) o; return ##&#123;id&#125;## != null &amp;&amp; Objects.equals(id, ##&#123;name-en&#125;##.##&#123;id&#125;##); &#125; @Override public int hashCode() &#123; return getClass().hashCode(); &#125;&#125; 完成基本操作 利用代码生成器完成轮播图基本的增删查改操作 定义轮播图管理的路由 加入几条测试数据 页面改造 修改展示图片的那列的内容为图片 1234567&#123; title: &#x27;图片&#x27;, field: &#x27;cover&#x27;, formatter: function (value) &#123; return `&lt;img src=&quot;$&#123;value&#125;&quot;&gt;` &#125;&#125;, 修改顺序那一列内容为输入框 1234567&#123; title: &#x27;跳转链接&#x27;, field: &#x27;link&#x27;, formatter: function (value) &#123; return `&lt;a href=&quot;$&#123;value&#125;&quot; target=&quot;_blank&quot;&gt;$&#123;value&#125;&lt;/a&gt;` &#125;&#125;, 新增一个保存顺序的按钮 1&lt;button type=&quot;button&quot; id=&quot;lw-order-btn&quot; class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot;fa fa-refresh&quot;&gt;&lt;/i&gt; 保存顺序&lt;/button&gt; 修改编辑窗口加入文件上传功能 12345678910&lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;图片 &lt;/label&gt; &lt;br&gt; &lt;img id=&quot;lw-image-show&quot; src=&quot;/static/admin/image/default.png&quot; style=&quot;vertical-align: top;width: 60%;border: 1px solid #cccccc;&quot; alt=&quot;&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;lw-upload-btn&quot; class=&quot;btn btn-success&quot;&gt;&lt;i class=&quot;fa fa-image&quot;&gt;&lt;/i&gt;上传图片 &lt;/button&gt; &lt;input id=&quot;lw-upload-hide&quot; type=&quot;file&quot; style=&quot;display: none&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;cover&quot; required class=&quot;form-control&quot; placeholder=&quot;请输入图片...&quot;&gt;&lt;/div&gt; 默认图片： 文件上传 在项目启动时将用户自定义的文件上传目录映射到/upload/路由 123456789File dir = new File(baseDir);if (!dir.isDirectory()) &#123; // 创建目录 dir.mkdirs();&#125;String absolutePath = dir.getAbsolutePath().replace(&quot;./&quot;, &quot;&quot;) + &quot;/&quot;;log.info(&quot;absolutePath:&#123;&#125;&quot;, absolutePath);// 一定要在绝对路径前加上file://表明它是一个本地目录registry.addResourceHandler(&quot;/upload/**&quot;).addResourceLocations(&quot;file://&quot; + absolutePath); 完成文件上传操作，按天分文件夹，文件名称为随机字符串 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package cn.kevinlu98.controller;import cn.kevinlu98.common.Result;import cn.kevinlu98.enums.ResultEnum;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Objects;import java.util.UUID;/** * Author: Mr丶冷文 * Date: 2022/10/8 11:24 * Email: kevinlu98@qq.com * Description: */@Slf4j@RestController@RequestMapping(&quot;/admin/&quot;)public class UploadController &#123; @Value(&quot;$&#123;upload.base-dir&#125;&quot;) private String baseDir; private static final DateFormat DATA_FORMAT = new SimpleDateFormat(&quot;yyyyMMdd/&quot;); @PostMapping(&quot;/upload&quot;) public Result&lt;String&gt; upload(@RequestParam MultipartFile file) &#123; if (!baseDir.endsWith(&quot;/&quot;)) &#123; baseDir += &quot;/&quot;; &#125; // 生成时间分区的目录 String dateName = DATA_FORMAT.format(new Date()); String folderPath = baseDir + dateName; File folder = new File(folderPath); if (!folder.isDirectory()) &#123; folder.mkdirs(); &#125; //取上传目录的绝对路径 String absPath = folder.getAbsolutePath().replace(&quot;./&quot;, &quot;&quot;) + &quot;/&quot;; //取文件后缀 String suffix = Objects.requireNonNull(file.getOriginalFilename()).substring(file.getOriginalFilename().lastIndexOf(&quot;.&quot;), file.getOriginalFilename().length()); //生成文件名 String filename = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;) + suffix; try &#123; //上传到服务器 file.transferTo(new File(absPath + &quot;/&quot; + filename)); &#125; catch (IOException e) &#123; log.error(e.getMessage(), e); return Result.error(ResultEnum.RESULT_UPLOAD_FAIL); &#125; return Result.success(&quot;/upload/&quot; + dateName + &quot;/&quot; + filename); &#125;&#125; 在管理页面完成js文件上传操作 123456789101112131415161718192021$(&#x27;#lw-upload-hide&#x27;).on(&#x27;change&#x27;, function () &#123; let file = this.files[0] let fd = new FormData(); fd.append(&#x27;file&#x27;, file); $.ajax(&#123; url: &#x27;/admin/upload&#x27;, method: &#x27;post&#x27;, data: fd, dataType: &#x27;json&#x27;, processData: false, contentType: false, success: res =&gt; &#123; if (res.code === 200) &#123; $(&#x27;#lw-image-show&#x27;).attr(&#x27;src&#x27;, res.data); $(&#x27;#data-form [name=cover]&#x27;).val(res.data); &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;)&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(四)完成友链管理与代码生成器","slug":"springbootblog/5.完成友链管理与代码生成器","date":"2022-10-02T18:21:00.000Z","updated":"2023-01-17T11:51:09.223Z","comments":true,"path":"2022/10/03/wan-cheng-you-lian-guan-li-yu-dai-ma-sheng-cheng-qi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/03/wan-cheng-you-lian-guan-li-yu-dai-ma-sheng-cheng-qi.html","excerpt":"","text":"实体及数据库表介绍友情链接 类名：Friendly 表名：blog_friendly 名称 类型 备注 id 整数 主键 title 字符串 友情链接的标题 link 字符串 友情链接的地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package cn.kevinlu98.pojo;import lombok.Getter;import lombok.RequiredArgsConstructor;import lombok.Setter;import lombok.ToString;import org.hibernate.Hibernate;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;import java.util.Objects;/** * Author: Mr丶冷文 * Date: 2022/10/7 15:45 * Email: kevinlu98@qq.com * Description: */@Getter@Setter@ToString@RequiredArgsConstructor@Entity@Table(name = &quot;blog_friendly&quot;)public class Friendly &#123; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer id; private String title; private String link; @Override public boolean equals(Object o) &#123; if (this == o) return true; if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false; Friendly friendly = (Friendly) o; return id != null &amp;&amp; Objects.equals(id, friendly.id); &#125; @Override public int hashCode() &#123; return getClass().hashCode(); &#125;&#125; 代码生成器介绍我们可以看到不管是分类管理还是这节课的友链管理这些，都是对数据库的基本增删查改操作，所以为了避免我们重复造轮子，我就开发了一个简单的代码生成器，其实原理很简单，就是用正则替换掉提前预设的一些字符 ##&#123;name-zh&#125;##：中文名 ##&#123;name-en&#125;##：英文名 ##&#123;name-en-up&#125;##：首字母大写的英文名 ##&#123;id&#125;##：主键 遍历属性： 1234##&#123;each&#125;####&#123;zname&#125;##:属性中文名##&#123;ename&#125;##:属性英文名##&#123;endeach&#125;## 构建Mapper模版1234567891011121314package cn.kevinlu98.mapper;import cn.kevinlu98.pojo.##&#123;name-en-up&#125;##;import org.springframework.data.jpa.repository.JpaRepository;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:04 * Email: kevinlu98@qq.com * Description: */public interface ##&#123;name-en-up&#125;##Mapper extends JpaRepository&lt;##&#123;name-en-up&#125;##, Integer&gt; &#123;&#125; 构建Service模版123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package cn.kevinlu98.service;import cn.kevinlu98.mapper.##&#123;name-en-up&#125;##Mapper;import cn.kevinlu98.pojo.##&#123;name-en-up&#125;##;import org.springframework.stereotype.Service;import java.util.List;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:20 * Email: kevinlu98@qq.com * Description: */@Servicepublic class ##&#123;name-en-up&#125;##Service &#123; private final ##&#123;name-en-up&#125;##Mapper mapper; public ##&#123;name-en-up&#125;##Service(##&#123;name-en-up&#125;##Mapper mapper) &#123; this.mapper = mapper; &#125; /** * 查询所有的##&#123;name-zh&#125;## * * @return ##&#123;name-zh&#125;##列表 */ public List&lt;##&#123;name-en-up&#125;##&gt; list() &#123; return mapper.findAll(); &#125; /** * 查询##&#123;name-zh&#125;##总数 * * @return ##&#123;name-zh&#125;##总数 */ public long count() &#123; return mapper.count(); &#125; /** * id查询资源详情 * * @param id 主键 * @return ##&#123;name-zh&#125;##详情 */ public ##&#123;name-en-up&#125;## detail(Integer id) &#123; return mapper.findById(id).orElse(null); &#125; /** * 保存操作 * * @param ##&#123;name-en&#125;## 要保存的对象 */ public void save(##&#123;name-en-up&#125;## ##&#123;name-en&#125;##) &#123; mapper.save(##&#123;name-en&#125;##); &#125; /** * 根据id从数据库表中删除数据 * * @param id 主键 */ public void delete(Integer id) &#123; mapper.deleteById(id); &#125;&#125; 构建Controller模版1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package cn.kevinlu98.controller;import cn.kevinlu98.common.Result;import cn.kevinlu98.enums.ResultEnum;import cn.kevinlu98.pojo.##&#123;name-en-up&#125;##;import cn.kevinlu98.service.##&#123;name-en-up&#125;##Service;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.sql.SQLIntegrityConstraintViolationException;import java.util.List;import java.util.Objects;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:32 * Email: kevinlu98@qq.com * Description: */@Slf4j@RestController@RequestMapping(&quot;/admin/##&#123;name-en&#125;##&quot;)public class ##&#123;name-en-up&#125;##Controller &#123; private final ##&#123;name-en-up&#125;##Service service; public ##&#123;name-en-up&#125;##Controller(##&#123;name-en-up&#125;##Service service) &#123; this.service = service; &#125; @GetMapping(&quot;/&quot;) public Result&lt;List&lt;##&#123;name-en-up&#125;##&gt;&gt; list() &#123; return Result.success(service.list()); &#125; @GetMapping(&quot;/&#123;id&#125;&quot;) public Result&lt;##&#123;name-en-up&#125;##&gt; detail(@PathVariable Integer id) &#123; ##&#123;name-en-up&#125;## ##&#123;name-en&#125;## = service.detail(id); if (Objects.isNull(##&#123;name-en&#125;##)) &#123; return Result.error(ResultEnum.RESULT_DATA_NOT_FIND); &#125; else &#123; return Result.success(##&#123;name-en&#125;##); &#125; &#125; @PostMapping(&quot;/&quot;) public Result&lt;String&gt; save(##&#123;name-en-up&#125;## ##&#123;name-en&#125;##) &#123; service.save(##&#123;name-en&#125;##); return Result.success(); &#125; @DeleteMapping(&quot;/&#123;id&#125;&quot;) public Result&lt;String&gt; delete(@PathVariable Integer id) &#123; service.delete(id); return Result.success(); &#125;&#125; 构建页面模版123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt;&lt;head th:replace=&quot;admin/common::header(~&#123;::title&#125;,~&#123;&#125;,~&#123;&#125;)&quot;&gt; &lt;title&gt;##&#123;name-zh&#125;##管理&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;th:block th:include=&quot;admin/common::nav(&#x27;##&#123;name-en&#125;##&#x27;)&quot;&gt;&lt;/th:block&gt;&lt;div class=&quot;container lw-main lw-banner&quot;&gt; &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; style=&quot;margin-bottom: 20px;&quot; aria-label=&quot;...&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;lw-add-btn&quot; class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 新增&lt;/button&gt; &lt;/div&gt; &lt;table id=&quot;data-table&quot;&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class=&quot;modal fade&quot; id=&quot;save-window&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot;&gt; &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;form id=&quot;data-form&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;##&#123;id&#125;##&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt; &lt;h4 class=&quot;modal-title&quot; id=&quot;window-title&quot;&gt;Modal title&lt;/h4&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; ##&#123;each&#125;## &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;##&#123;zname&#125;##&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;##&#123;ename&#125;##&quot; required class=&quot;form-control&quot; placeholder=&quot;请输入##&#123;zname&#125;##...&quot;&gt; &lt;/div&gt; ##&#123;endeach&#125;## &lt;/div&gt; &lt;div class=&quot;modal-footer&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;关闭&lt;/button&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;th:block th:include=&quot;admin/common::footer&quot;&gt;&lt;/th:block&gt;&lt;script&gt; $(function () &#123; // $(&#x27;#save-window&#x27;).modal(&#x27;show&#x27;) $(&#x27;#data-table&#x27;).bootstrapTable(&#123; url: &#x27;/admin/##&#123;name-en&#125;##/&#x27;, responseHandler: function (res) &#123; return res.data &#125;, columns: [ &#123; title: &#x27;序号&#x27;, width: 50, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return index + 1 &#125; &#125;, ##&#123;each&#125;## &#123; title: &#x27;##&#123;zname&#125;##&#x27;, field: &#x27;##&#123;ename&#125;##&#x27; &#125;, ##&#123;endeach&#125;## &#123; field: &#x27;##&#123;id&#125;##&#x27;, title: &#x27;操作&#x27;, width: 200, formatter: function (value) &#123; return `&lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-info btn-sm lw-update-btn&quot;&gt;&lt;i class=&quot;fa fa-edit&quot;&gt;&lt;/i&gt; 编辑&lt;/button&gt; &lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-danger btn-sm lw-del-btn&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; 删除&lt;/button&gt;` &#125; &#125;, ] &#125;) $(&quot;#data-form&quot;).on(&#x27;submit&#x27;, function () &#123; let data = $(this).serialize(); $.ajax(&#123; url: &#x27;/admin/##&#123;name-en&#125;##/&#x27;, method: &#x27;post&#x27;, data: data, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;保存成功&quot;, &#123;icon: 1, time: 500&#125;, function () &#123; $(&#x27;#save-window&#x27;).modal(&#x27;hide&#x27;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) return false; &#125;) $(&quot;#lw-add-btn&quot;).on(&#x27;click&#x27;, function () &#123; $(&quot;#window-title&quot;).text(&#x27;新增##&#123;name-zh&#125;##&#x27;) $(&quot;#data-form&quot;).initForm(&#123;##&#123;id&#125;##: &quot;&quot;, ##&#123;each&#125;## ##&#123;ename&#125;##: &quot;&quot;, ##&#123;endeach&#125;##&#125;) $(&#x27;#save-window&#x27;).modal(&#x27;show&#x27;) &#125;) $(&quot;#data-table&quot;).on(&#x27;click&#x27;, &#x27;.lw-update-btn&#x27;, function () &#123; // 获取目标资源id let id = $(this).data(&#x27;id&#x27;) $.ajax(&#123; url: &#x27;/admin/##&#123;name-en&#125;##/&#x27; + id, method: &#x27;get&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; $(&quot;#window-title&quot;).text(&#x27;编辑##&#123;name-zh&#125;##&#x27;) $(&quot;#data-form&quot;).initForm(res.data) $(&#x27;#save-window&#x27;).modal(&#x27;show&#x27;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) &#125;).on(&#x27;click&#x27;, &#x27;.lw-del-btn&#x27;, function () &#123; let id = $(this).data(&#x27;id&#x27;) let idx = layer.confirm(&#x27;是否要删除该数据？&#x27;, &#123; btn: [&#x27;确认&#x27;, &#x27;取消&#x27;] //按钮 &#125;, function () &#123; $.ajax(&#123; url: &#x27;/admin/##&#123;name-en&#125;##/&#x27; + id, method: &#x27;delete&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;删除成功&quot;, &#123;icon: 1&#125;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) layer.close(idx); &#125;) &#125;) &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 完成友链管理的开发 用代码生成器及刚刚构建的模版生成友链管理及轮播图管理 将生成的代码考到项目中","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(三)分类相关功能设计(下)","slug":"springbootblog/4.分类相关功能设计2","date":"2022-10-01T19:21:00.000Z","updated":"2023-01-17T11:51:09.223Z","comments":true,"path":"2022/10/02/fen-lei-xiang-guan-gong-neng-she-ji.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/02/fen-lei-xiang-guan-gong-neng-she-ji.html","excerpt":"","text":"分类管理页面创建 在AdminController中定义分类管理的路由 拷贝素材中的banner.html为category.html 替换公共部分代码 标题改为 分类管理 导航条的分类管理变为选中 完成分类管理的数据展示用到的工具 我们的管理页主要是基于BootStrapTable展示数据来完成数据的增删查改操作 BootStrapTable地址：https://bootstrap-table.com/ 而我们页面是用Bootstrap这个ui组件库堆起来的，所以为了风格统一，我们依旧用它去堆页面 BootStrap地址：https://v3.bootcss.com/ 我们项目的消息提示用的是Layer Layer地址:https://layui.gitee.io/v2/layer/ 字体图标用的Fontawesome Fontamesome地址: https://www.thinkcmf.com/font/font_awesome&#x2F;icons.html jquery表单相关操作 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374(function ($) &#123; $.fn.extend(&#123; initForm: function (options) &#123; //默认参数 var defaults = &#123; jsonValue: options, isDebug: false //是否需要调试，这个用于开发阶段，发布阶段请将设置为false，默认为false,true将会把name value打印出来 &#125; //设置参数 var setting = defaults; var form = this; jsonValue = setting.jsonValue; //如果传入的json字符串，将转为json对象 if ($.type(setting.jsonValue) === &quot;string&quot;) &#123; jsonValue = $.parseJSON(jsonValue); &#125; //如果传入的json对象为空，则不做任何操作 if (!$.isEmptyObject(jsonValue)) &#123; var debugInfo = &quot;&quot;; $.each(jsonValue, function (key, value) &#123; //是否开启调试，开启将会把name value打印出来 if (setting.isDebug) &#123; alert(&quot;name:&quot; + key + &quot;; value:&quot; + value); debugInfo += &quot;name:&quot; + key + &quot;; value:&quot; + value + &quot; || &quot;; &#125; var formField = form.find(&quot;[name=&#x27;&quot; + key + &quot;&#x27;]&quot;); if ($.type(formField[0]) === &quot;undefined&quot;) &#123; if (setting.isDebug) &#123; alert(&quot;can not find name:[&quot; + key + &quot;] in form!!!&quot;); //没找到指定name的表单 &#125; &#125; else &#123; var fieldTagName = formField[0].tagName.toLowerCase(); if (fieldTagName == &quot;input&quot;) &#123; if (formField.attr(&quot;type&quot;) == &quot;radio&quot;) &#123; $(&quot;input:radio[name=&#x27;&quot; + key + &quot;&#x27;][value=&#x27;&quot; + value + &quot;&#x27;]&quot;).attr(&quot;checked&quot;, &quot;checked&quot;); &#125; else &#123; formField.val(value); &#125; &#125; else if (fieldTagName == &quot;select&quot;) &#123; //do something special formField.val(value); &#125; else if (fieldTagName == &quot;textarea&quot;) &#123; //do something special formField.val(value); &#125; else &#123; formField.val(value); &#125; &#125; &#125;) if (setting.isDebug) &#123; alert(debugInfo); &#125; &#125; return form; //返回对象，提供链式操作 &#125;, serializeJson: function () &#123; const serializeObj = &#123;&#125;; const array = this.serializeArray(); $(array).each(function () &#123; if (serializeObj[this.name]) &#123; if ($.isArray(serializeObj[this.name])) &#123; serializeObj[this.name].push(this.value); &#125; else &#123; serializeObj[this.name] = [serializeObj[this.name], this.value]; &#125; &#125; else &#123; serializeObj[this.name] = this.value; &#125; &#125;); return serializeObj; &#125; &#125;);&#125;)(jQuery) BSTable数据展示1234567891011121314151617181920212223242526272829303132$(&#x27;#data-table&#x27;).bootstrapTable(&#123; url: &#x27;/admin/category/&#x27;, responseHandler: function (res) &#123; return res.data &#125;, columns: [ &#123; title: &#x27;序号&#x27;, width: 50, align: &#x27;center&#x27;, formatter: function (value, row, index) &#123; return index + 1 &#125; &#125;, &#123; title: &#x27;标题&#x27;, field: &#x27;name&#x27; &#125;, &#123; title: &#x27;描述&#x27;, field: &#x27;summary&#x27; &#125;, &#123; field: &#x27;id&#x27;, title: &#x27;操作&#x27;, width: 200, formatter: function (value) &#123; return `&lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-info btn-sm lw-update-btn&quot;&gt;&lt;i class=&quot;fa fa-edit&quot;&gt;&lt;/i&gt; 编辑&lt;/button&gt; &lt;button type=&quot;button&quot; data-id=&quot;$&#123;value&#125;&quot; class=&quot;btn btn-danger btn-sm&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; 删除&lt;/button&gt;` &#125; &#125;, ]&#125;) 增删改操作编辑窗口及新增按钮1234567891011121314151617181920212223242526272829303132333435&lt;!--新增按钮--&gt;&lt;div class=&quot;btn-group&quot; role=&quot;group&quot; style=&quot;margin-bottom: 20px;&quot; aria-label=&quot;...&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 新增&lt;/button&gt;&lt;/div&gt;&lt;!-- 编辑窗口 --&gt;&lt;div class=&quot;modal fade&quot; id=&quot;save-window&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot;&gt; &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;form id=&quot;data-form&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt; &lt;h4 class=&quot;modal-title&quot; id=&quot;window-title&quot;&gt;Modal title&lt;/h4&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;标题&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;form-control&quot; placeholder=&quot;请输入标题...&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;描述信息&lt;/label&gt; &lt;textarea class=&quot;form-control&quot; name=&quot;summary&quot; placeholder=&quot;请输入描述信息...&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;modal-footer&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;关闭&lt;/button&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 编辑操作处理 单击编辑按钮处理获取目标资源id 查询资源详情 用资源信息初始化表单 弹出编辑窗口 确认后提交表单 隐藏编辑窗口 刷新数据表格 123456789101112131415161718$(&quot;#data-table&quot;).on(&#x27;click&#x27;, &#x27;.lw-update-btn&#x27;, function () &#123; // 获取目标资源id let id = $(this).data(&#x27;id&#x27;) $.ajax(&#123; url: &#x27;/admin/category/&#x27; + id, method: &#x27;get&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; $(&quot;#window-title&quot;).text(&#x27;编辑分类&#x27;) $(&quot;#data-form&quot;).initForm(res.data) $(&#x27;#save-window&#x27;).modal(&#x27;show&#x27;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;)&#125;) 新增操作处理 用空对象初始化表单 弹出编辑窗口 确认后提交表单 隐藏编辑窗口 刷新数据表格 12345$(&quot;#lw-add-btn&quot;).on(&#x27;click&#x27;, function () &#123; $(&quot;#window-title&quot;).text(&#x27;新增分类&#x27;) $(&quot;#data-form&quot;).initForm(&#123;id: &quot;&quot;, name: &quot;&quot;, summary: &quot;&quot;&#125;) $(&#x27;#save-window&#x27;).modal(&#x27;show&#x27;)&#125;) 表单提交1234567891011121314151617181920$(&quot;#data-form&quot;).on(&#x27;submit&#x27;, function () &#123; let data = $(this).serialize(); $.ajax(&#123; url: &#x27;/admin/category/&#x27;, method: &#x27;post&#x27;, data: data, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;保存成功&quot;, &#123;icon: 1, time: 500&#125;, function () &#123; $(&#x27;#save-window&#x27;).modal(&#x27;hide&#x27;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) return false;&#125;) 删除操作处理 单击删除按钮获取目标资源id 弹窗询问是否删除 发送请求删除数据 刷新数据表格 12345678910111213141516171819let id = $(this).data(&#x27;id&#x27;)let idx = layer.confirm(&#x27;是否要删除该数据？&#x27;, &#123; btn: [&#x27;确认&#x27;, &#x27;取消&#x27;] //按钮&#125;, function () &#123; $.ajax(&#123; url: &#x27;/admin/category/&#x27; + id, method: &#x27;delete&#x27;, dataType: &#x27;json&#x27;, success: res =&gt; &#123; if (res.code === 200) &#123; layer.msg(&quot;删除成功&quot;, &#123;icon: 1&#125;) $(&#x27;#data-table&#x27;).bootstrapTable(&#x27;refresh&#x27;, &#123;silent: true&#125;) &#125; else &#123; layer.msg(res.message, &#123;icon: 2&#125;) &#125; &#125; &#125;) layer.close(idx);&#125;)","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(三)分类相关功能设计(上)","slug":"springbootblog/3.分类相关功能设计1","date":"2022-10-01T18:21:00.000Z","updated":"2023-01-17T11:51:09.222Z","comments":true,"path":"2022/10/02/fen-lei-xiang-guan-gong-neng-she-ji.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/02/fen-lei-xiang-guan-gong-neng-she-ji.html","excerpt":"","text":"实体&#x2F;数据库定义 类名：Category 表名：blog_category 属性 名称 中文名 类型 id 主键 整数 name 名称 字符串 summary 介绍 字符串 JPA注解说明 名称 位置 说明 @Entity 类 表示被注解的类是一个可以被JPA管理的实体类 @Table 类 当实体类与其映射的数据库表名不同名时需要使用 @Column 属性 当实体的属性与其映射的数据库表的列不同名时需要使用该标注说明，Column 标注的常用属性是 name，用于设置映射数据库表的列名。此外，该标注还包含其它多个属性，如：unique 、nullable、length 等 @Id 属性 标注用于声明一个实体类的属性映射为数据库的主键列 @GeneratedValue 属性 主要就是为一个实体生成一个唯一标识的主键、提供了主键的生成策略，比如IDENTITY就是自增主键，这个也是用的最多的 分实体类定义完整代码12345678910111213141516171819202122232425262728293031323334353637383940package cn.kevinlu98.pojo;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;/** * Author: Mr丶冷文 * Date: 2022/10/6 21:56 * Email: kevinlu98@qq.com * Description: */@Data@Builder@Entity@AllArgsConstructor@NoArgsConstructor@Table(name = &quot;blog_category&quot;)public class Category &#123; // 设置主键自增 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer id; @Column(unique = true) private String name; private String summary;&#125; JPA增删查改操作在jpa中只需要定义一个接口继承下JpaRepository接口就可以拥有对该实体类对应的数据库表最基本的增删查改操作 1234567891011121314package cn.kevinlu98.mapper;import cn.kevinlu98.pojo.Category;import org.springframework.data.jpa.repository.JpaRepository;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:04 * Email: kevinlu98@qq.com * Description: */public interface CategoryMapper extends JpaRepository&lt;Category, Integer&gt; &#123;&#125; SpringBootTest类进行测试1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package cn.kevinlu98.test;import cn.kevinlu98.Application;import cn.kevinlu98.mapper.CategoryMapper;import cn.kevinlu98.pojo.Category;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:02 * Email: kevinlu98@qq.com * Description: */@RunWith(SpringRunner.class)@SpringBootTest(classes = &#123;Application.class&#125;, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class CategoryTest &#123; @Autowired private CategoryMapper mapper; @Test public void newEntity() &#123; Category c1 = Category.builder().id(1).name(&quot;xx&quot;).summary(&quot;Qqq&quot;).build(); System.out.println(c1); &#125; @Test public void testMapper() &#123; System.out.println(mapper); &#125; @Test public void testUpdate() &#123; Category category = mapper.findById(1).orElse(null); System.out.println(category); category.setName(&quot;新分类&quot;); mapper.save(category); System.out.println(mapper.findById(1)); &#125; @Test public void testAdd() &#123; //save 如果这个对象的id不为null，它就是一个update，反之就是一个insert for (int i = 10; i &lt; 20; i++) &#123; mapper.save(Category.builder().name(&quot;测试分类&quot; + i).summary(&quot;我是一个描述字段&quot; + i + &quot;...&quot;).build()); &#125; &#125; @Test public void testFind() &#123; System.out.println(mapper.findAll()); System.out.println(mapper.findById(1)); &#125;&#125; 完成service层增删查改操作 查询所有 查询总数 查询单个对象 保存(新增&#x2F;更新) 删除 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package cn.kevinlu98.service;import cn.kevinlu98.mapper.CategoryMapper;import cn.kevinlu98.pojo.Category;import org.springframework.stereotype.Service;import java.util.List;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:20 * Email: kevinlu98@qq.com * Description: */@Servicepublic class CategoryService &#123; private final CategoryMapper mapper; public CategoryService(CategoryMapper mapper) &#123; this.mapper = mapper; &#125; /** * 查询所有的分类 * * @return 分类列表 */ public List&lt;Category&gt; list() &#123; return mapper.findAll(); &#125; /** * 查询分类总数 * * @return 分类总数 */ public long count() &#123; return mapper.count(); &#125; /** * id查询资源详情 * * @param id 主键 * @return 分类详情 */ public Category detail(Integer id) &#123; return mapper.findById(id).orElse(null); &#125; /** * 保存操作 * * @param category 要保存的对象 */ public void save(Category category) &#123; mapper.save(category); &#125; /** * 根据id从数据库表中删除数据 * * @param id 主键 */ public void delete(Integer id) &#123; mapper.deleteById(id); &#125;&#125; Controller层开发公共返回实体 属性 类型 说明 code 整数 返回的状态，200表示成功，其它表示失败 message 字符串 返回的消息 data 对象 返回的具体数据 12345678910111213141516171819202122232425262728293031package cn.kevinlu98.common;import cn.kevinlu98.enums.ResultEnum;import lombok.AllArgsConstructor;import lombok.Data;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:26 * Email: kevinlu98@qq.com * Description: */@Data@AllArgsConstructorpublic class Result&lt;T&gt; &#123; private Integer code; private String message; private T data; private Result(ResultEnum resultEnum) &#123; this.code = resultEnum.getCode(); this.message = resultEnum.getMessage(); &#125; private Result(ResultEnum resultEnum, T data) &#123; this.code = resultEnum.getCode(); this.message = resultEnum.getMessage(); this.data = data; &#125;&#125; 返回枚举定义定义一个有两个属性的枚举，code与message，然后定义成功与失败的枚举常量 1234567891011121314151617181920package cn.kevinlu98.enums;import lombok.AllArgsConstructor;import lombok.Getter;/** * Author: Mr丶冷文 * Date: 2022/10/6 22:27 * Email: kevinlu98@qq.com * Description: */@Getter@AllArgsConstructorpublic enum ResultEnum &#123; RESULT_SUCCESS(200, &quot;操作成功&quot;), RESULT_ERROR(500, &quot;系统错误&quot;); private final Integer code; private final String message;&#125; 定义公共返回类的静态方法定义成功及失败的静态方法 1234567891011121314151617181920public static &lt;T&gt; Result&lt;T&gt; success() &#123; return new Result&lt;&gt;(ResultEnum.RESULT_SUCCESS);&#125;public static &lt;T&gt; Result&lt;T&gt; success(T data) &#123; return new Result&lt;&gt;(ResultEnum.RESULT_SUCCESS, data);&#125;public static &lt;T&gt; Result&lt;T&gt; error() &#123; return new Result&lt;&gt;(ResultEnum.RESULT_ERROR);&#125;public static &lt;T&gt; Result&lt;T&gt; error(ResultEnum resultEnum) &#123; return new Result&lt;&gt;(resultEnum);&#125;public static &lt;T&gt; Result&lt;T&gt; error(int code, String message) &#123; return new Result&lt;&gt;(code, message, null);&#125; 完成分类列表接口的开发接口定义: url: &#x2F;admin&#x2F;category&#x2F; method: get Params: none Result: 12345678910111213141516&#123; code:200, message:&quot;成功&quot;, data:[ &#123; id:1, name:&quot;分类1&quot;, summary:&quot;我是描述&quot; &#125;, &#123; id:2, name:&quot;分类2&quot;, summary:&quot;我是描述&quot; &#125;, ]&#125; 1234@GetMapping(&quot;/&quot;)public Result&lt;List&lt;Category&gt;&gt; list() &#123; return Result.success(service.list());&#125;","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(二)管理页面的导入及Thymeleaf配置","slug":"springbootblog/2.管理页面的导入及Thymeleaf配置","date":"2022-10-01T15:23:00.000Z","updated":"2023-01-17T11:51:09.218Z","comments":true,"path":"2022/10/01/guan-li-ye-mian-de-dao-ru-ji-pei-zhi.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/01/guan-li-ye-mian-de-dao-ru-ji-pei-zhi.html","excerpt":"","text":"Thymeleaf的配置 在application.yml中加入thymeleaf的相关配置 12345678910111213141516thymeleaf: # 关闭缓存 cache: false # 模版的前缀 prefix: classpath:/templates/ # 开启模版的本地check check-template-location: true # 模版的后缀 suffix: .html # 模版的编码 encoding: utf-8 # 响应头的content-Type servlet: content-type: text/html # 模式H5 mode: HTML5 创建模板目录templates 在templates下创建admin目录用于保存后台管理页面 创建静态资源目录static 更改static路由的路由为/static/ 创建一个config的包 在该包下创建一个WebConfig.java的文件 在这个配置类的addResourceHandlers方法中加上路由配置 12345678910111213141516171819202122package cn.kevinlu98.config;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * Author: Mr丶冷文 * Date: 2022/10/6 16:17 * Email: kevinlu98@qq.com * Description: */@Configurationpublic class WebConfig implements WebMvcConfigurer &#123; @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; // 创建static目录到/static/的路由 registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;); &#125;&#125; 拷贝素材blog-admin内容到项目中 素材的static目录拷贝到项目static 目录中 素材中的其它文件拷贝到项目的templates目录下 启动项目访问一下静态资源 定义后台路由 定义一个AdminController用于定义管理页面的Controller 创建index路由跳转到后台控制台 替换静态页面中的一些静态资源的路径 公共页面提取 创建一个common.html来存放页面公共部分的代码 在html标签上加上thymeleaf 1&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt; 抽取head部分的公共代码定义为header 1234567891011121314151617&lt;head th:fragment=&quot;header(title,link,style)&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title th:replace=&quot;$&#123;title&#125;&quot;&gt;Title&lt;/title&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/bootstrap/css/bootstrap.min.css&quot;&gt; &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/bootstrap/css/bootstrap-theme.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/bootstrap-table/bootstrap-table.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugin/font-awesome/css/font-awesome.min.css&quot;&gt; &lt;th:block th:replace=&quot;$&#123;link&#125;&quot;&gt;&lt;/th:block&gt; &lt;!-- 自定义css文件 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/admin/css/style.css&quot;&gt; &lt;th:block th:replace=&quot;$&#123;style&#125;&quot;&gt;&lt;/th:block&gt;&lt;/head&gt; 抽取导航部分的公共代码定义为nav 1234567891011121314151617181920212223242526272829303132&lt;th:block th:fragment=&quot;nav(active)&quot;&gt; &lt;nav class=&quot;navbar navbar-default&quot;&gt; &lt;div class=&quot;container container-fluid&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;博客后台&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li th:class=&quot;$&#123;active eq &#x27;index&#x27;&#125;?&#x27;active&#x27;:&#x27;&#x27;&quot;&gt;&lt;a href=&quot;#&quot;&gt;控制台 &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li th:class=&quot;$&#123;active eq &#x27;article&#x27;&#125;?&#x27;active&#x27;:&#x27;&#x27;&quot;&gt;&lt;a href=&quot;#&quot;&gt;文章管理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;分类管理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;轮播图管理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;页面管理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;友链管理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;评论管理&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;退出登录&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站前台&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt;&lt;/th:block&gt; 抽取底部代码与script的公共代码定义footer 1234567891011121314151617181920&lt;th:block th:fragment=&quot;footer&quot;&gt; &lt;footer&gt; &lt;div class=&quot;container lw-footer&quot;&gt; &lt;p&gt; © 2019-2020 &lt;a href=&quot;/&quot;&gt;冷文学习者&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://beian.miit.gov.cn&quot;&gt;陕ICP备19024566-1号&lt;/a&gt; &lt;a style=&quot;margin-left: 10px&quot; target=&quot;_blank&quot; href=&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11011402012109&quot;&gt;京公网安备 11011402012109号&lt;/a&gt; &lt;/p&gt; &lt;p&gt;如果您有什么好的意见或建议请发邮件至 &lt;a href=&quot;#&quot;&gt;kevinlu98@qq.com&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/footer&gt; &lt;script src=&quot;/static/plugin/jquery/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt; &lt;script src=&quot;/static/plugin/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/static/plugin/bootstrap-table/bootstrap-table.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/static/plugin/bootstrap-table/bootstrap-table-zh-CN.js&quot;&gt;&lt;/script&gt;&lt;/th:block&gt; 在页面引用公共部分代码","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]},{"title":"(一)项目介绍及框架搭建","slug":"springbootblog/1.项目介绍及框架搭建","date":"2022-10-01T14:23:00.000Z","updated":"2023-01-17T11:51:09.211Z","comments":true,"path":"2022/10/01/xiang-mu-jie-shao-ji-kuang-jia-da-jian.html","link":"","permalink":"https://study.kevinlu98.cn/2022/10/01/xiang-mu-jie-shao-ji-kuang-jia-da-jian.html","excerpt":"","text":"简介利用SpringBoot开发一个功能完善且颜值优雅的个人博客项目，整体难度适中，不管是用来巩固SpringBoot还是在校生找工作而没有像样的项目或者就单纯的想自己开发一个个人博客而不知道如何下手都是一个不错的选择 技术栈： 整体框架：SpringBoot 数据库访问框架：SpringBoot-JPA 模板引擎：Thymeleaf 数据库：MySQL 前端UI框架：BootStrap3 其它： 字体图标：FontAwesome4 CommonMark：解析Markdown 邮件：SpringBootMail BootStrapTable：展示管理页面的数据 能学到什么 如何得用SpringBoot快速搭建一个完整的项目 个人博客相关逻辑的处理 页面的局部刷新（效果类似php中的pjax，但原理和方法不同） Java邮件相关 如何在生产环境部署SpringBoot项目 项目展示 准备工作本机需要安装如下工具（当然，几乎每个Java开发者应该都装了的）： MySQL（这里也可以用远程的） JDK Idea 如果需要部署上线的话请准备一台服务器以及域名（这个到最后几节课后面会说） 课件：所有课件都以及文章的形式放在我的博客上了冷文博客，如果本节课有其它资料（如页面、素材等）请直接在文章最下面的附件中找，如果下载链接失效了请联系我 素材介绍 blog-page：博客的前端页面，因为写了大量的样式，如果带着大家在教程中写会很浪费时间，我就提前给大家写好了一套博客的前端页面，就放到我的网站上，大家直接去下载就行。我们的目的就是将其集成到项目中去，会集成这套页面了想换个样式无非就从网上找些其它页面改一改就能集成到你自己的项目中了 blog-admin：博客的管理页面，这个页面我就写了个主体的架子，因为不涉及太多样式，就纯粹用bootstrap拼接起来的 项目搭建 创建一个空的数据库 用idea创建一个maven项目 复制下面的依赖到pom文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.kevinlu98&lt;/groupId&gt; &lt;artifactId&gt;blog-project&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.7.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;maven.compiler.plugin.version&gt;3.8.1&lt;/maven.compiler.plugin.version&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;mysql-connector-java.version&gt;8.0.30&lt;/mysql-connector-java.version&gt; &lt;lombok.version&gt;1.18.24&lt;/lombok.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- 上边引入 parent，因此 下边无需指定版本 --&gt; &lt;!-- 包含 mvc,aop 等jar资源 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--thymeleaf模版引擎--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- springboot测试 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--springbootjpa的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql-connector-java.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--lombok--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven.compiler.plugin.version&#125;&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;$&#123;maven.compiler.source&#125;&lt;/source&gt; &lt;target&gt;$&#123;maven.compiler.target&#125;&lt;/target&gt; &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 创建application.yml配置文件并配置数据库连接信息及jackson 12345678910111213spring: jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/my_blog?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false username: root password: 123456 jpa: hibernate: ddl-auto: update # 更新或者创建数据表结构 如果数据库中没做表，Jpa会我们创建 这个配置就是在没有表的时候创建，实体类发生改变的话 会更新表结构 show-sql: true 创建main方法并启动项目进行测试 1234567891011121314151617package cn.kevinlu98;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * Author: Mr丶冷文 * Date: 2022/9/29 16:43 * Email: kevinlu98@qq.com * Description: */@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 创建logback的配置文件logback-spring.xml，内容如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;configuration&gt; &lt;property scope=&quot;context&quot; name=&quot;LOG_PATTERN&quot; value=&quot;[%-5p %d] [%t %c&#123;10&#125;] - %marker%m %n%xEx&quot; /&gt; &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_DIR&quot; source=&quot;logging.file.path&quot;/&gt; &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_LEVEL&quot; source=&quot;logging.level.root&quot;/&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt;%highlight(%-5level) -%logger - %marker%msg %n%xEx&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;$&#123;LOG_DIR&#125;/application.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;LOG_DIR&#125;/application-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt; &lt;maxHistory&gt;10&lt;/maxHistory&gt; &lt;totalSizeCap&gt;50MB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;$&#123;LOG_PATTERN&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;async-file&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt; &lt;appender-ref ref=&quot;file&quot;/&gt; &lt;/appender&gt; &lt;appender name=&quot;error&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;$&#123;LOG_DIR&#125;/application.err.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;LOG_DIR&#125;/application-%d&#123;yyyy-MM-dd&#125;.%i.err.log&lt;/fileNamePattern&gt; &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt; &lt;maxHistory&gt;10&lt;/maxHistory&gt; &lt;totalSizeCap&gt;50MB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt; &lt;encoder&gt; &lt;pattern&gt;$&#123;LOG_PATTERN&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;async-error&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt; &lt;appender-ref ref=&quot;error&quot;/&gt; &lt;/appender&gt; &lt;root level=&quot;$&#123;LOG_LEVEL&#125;&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot;/&gt; &lt;appender-ref ref=&quot;async-file&quot;/&gt; &lt;appender-ref ref=&quot;async-error&quot;/&gt; &lt;/root&gt;&lt;/configuration&gt; 在application.yml中补充logback的相关配置 12345logging: file: path: ./logs level: root: info 启动项目并测试","categories":[{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]}],"categories":[{"name":"Linux菜鸟入门","slug":"Linux菜鸟入门","permalink":"https://study.kevinlu98.cn/categories/Linux%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/"},{"name":"个人博客项目","slug":"个人博客项目","permalink":"https://study.kevinlu98.cn/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://study.kevinlu98.cn/tags/linux/"},{"name":"vim","slug":"vim","permalink":"https://study.kevinlu98.cn/tags/vim/"},{"name":"centos","slug":"centos","permalink":"https://study.kevinlu98.cn/tags/centos/"},{"name":"重定向","slug":"重定向","permalink":"https://study.kevinlu98.cn/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"},{"name":"管道","slug":"管道","permalink":"https://study.kevinlu98.cn/tags/%E7%AE%A1%E9%81%93/"},{"name":"grep","slug":"grep","permalink":"https://study.kevinlu98.cn/tags/grep/"},{"name":"基础命令","slug":"基础命令","permalink":"https://study.kevinlu98.cn/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"},{"name":"vmware","slug":"vmware","permalink":"https://study.kevinlu98.cn/tags/vmware/"},{"name":"java","slug":"java","permalink":"https://study.kevinlu98.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://study.kevinlu98.cn/tags/springboot/"},{"name":"个人博客","slug":"个人博客","permalink":"https://study.kevinlu98.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"异常处理","slug":"异常处理","permalink":"https://study.kevinlu98.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"name":"博客系统","slug":"博客系统","permalink":"https://study.kevinlu98.cn/tags/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"}]}